/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.use.impl;

import java.util.Collection;

import modelConverter.use_language.use.Association;
import modelConverter.use_language.use.AssociationEnd;
import modelConverter.use_language.use.UsePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Association</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link modelConverter.use_language.use.impl.AssociationImpl#getTypeAssociation <em>Type Association</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.AssociationImpl#getAssociationEnds <em>Association Ends</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssociationImpl extends TypeImpl implements Association
{
  /**
   * The default value of the '{@link #getTypeAssociation() <em>Type Association</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeAssociation()
   * @generated
   * @ordered
   */
  protected static final String TYPE_ASSOCIATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTypeAssociation() <em>Type Association</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeAssociation()
   * @generated
   * @ordered
   */
  protected String typeAssociation = TYPE_ASSOCIATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getAssociationEnds() <em>Association Ends</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssociationEnds()
   * @generated
   * @ordered
   */
  protected EList<AssociationEnd> associationEnds;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssociationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UsePackage.Literals.ASSOCIATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTypeAssociation()
  {
    return typeAssociation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTypeAssociation(String newTypeAssociation)
  {
    String oldTypeAssociation = typeAssociation;
    typeAssociation = newTypeAssociation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.ASSOCIATION__TYPE_ASSOCIATION, oldTypeAssociation, typeAssociation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AssociationEnd> getAssociationEnds()
  {
    if (associationEnds == null)
    {
      associationEnds = new EObjectContainmentEList<AssociationEnd>(AssociationEnd.class, this, UsePackage.ASSOCIATION__ASSOCIATION_ENDS);
    }
    return associationEnds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UsePackage.ASSOCIATION__ASSOCIATION_ENDS:
        return ((InternalEList<?>)getAssociationEnds()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UsePackage.ASSOCIATION__TYPE_ASSOCIATION:
        return getTypeAssociation();
      case UsePackage.ASSOCIATION__ASSOCIATION_ENDS:
        return getAssociationEnds();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UsePackage.ASSOCIATION__TYPE_ASSOCIATION:
        setTypeAssociation((String)newValue);
        return;
      case UsePackage.ASSOCIATION__ASSOCIATION_ENDS:
        getAssociationEnds().clear();
        getAssociationEnds().addAll((Collection<? extends AssociationEnd>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.ASSOCIATION__TYPE_ASSOCIATION:
        setTypeAssociation(TYPE_ASSOCIATION_EDEFAULT);
        return;
      case UsePackage.ASSOCIATION__ASSOCIATION_ENDS:
        getAssociationEnds().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.ASSOCIATION__TYPE_ASSOCIATION:
        return TYPE_ASSOCIATION_EDEFAULT == null ? typeAssociation != null : !TYPE_ASSOCIATION_EDEFAULT.equals(typeAssociation);
      case UsePackage.ASSOCIATION__ASSOCIATION_ENDS:
        return associationEnds != null && !associationEnds.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (typeAssociation: ");
    result.append(typeAssociation);
    result.append(')');
    return result.toString();
  }

} //AssociationImpl
