/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.use.impl;

import modelConverter.use_language.use.ExpCS;
import modelConverter.use_language.use.IfThenExpCS;
import modelConverter.use_language.use.UsePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>If Then Exp CS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link modelConverter.use_language.use.impl.IfThenExpCSImpl#getOwnedCondition <em>Owned Condition</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.IfThenExpCSImpl#getOwnedThenExpression <em>Owned Then Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IfThenExpCSImpl extends MinimalEObjectImpl.Container implements IfThenExpCS
{
  /**
   * The cached value of the '{@link #getOwnedCondition() <em>Owned Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedCondition()
   * @generated
   * @ordered
   */
  protected ExpCS ownedCondition;

  /**
   * The cached value of the '{@link #getOwnedThenExpression() <em>Owned Then Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedThenExpression()
   * @generated
   * @ordered
   */
  protected ExpCS ownedThenExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IfThenExpCSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UsePackage.Literals.IF_THEN_EXP_CS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpCS getOwnedCondition()
  {
    return ownedCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOwnedCondition(ExpCS newOwnedCondition, NotificationChain msgs)
  {
    ExpCS oldOwnedCondition = ownedCondition;
    ownedCondition = newOwnedCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.IF_THEN_EXP_CS__OWNED_CONDITION, oldOwnedCondition, newOwnedCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOwnedCondition(ExpCS newOwnedCondition)
  {
    if (newOwnedCondition != ownedCondition)
    {
      NotificationChain msgs = null;
      if (ownedCondition != null)
        msgs = ((InternalEObject)ownedCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.IF_THEN_EXP_CS__OWNED_CONDITION, null, msgs);
      if (newOwnedCondition != null)
        msgs = ((InternalEObject)newOwnedCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.IF_THEN_EXP_CS__OWNED_CONDITION, null, msgs);
      msgs = basicSetOwnedCondition(newOwnedCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.IF_THEN_EXP_CS__OWNED_CONDITION, newOwnedCondition, newOwnedCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpCS getOwnedThenExpression()
  {
    return ownedThenExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOwnedThenExpression(ExpCS newOwnedThenExpression, NotificationChain msgs)
  {
    ExpCS oldOwnedThenExpression = ownedThenExpression;
    ownedThenExpression = newOwnedThenExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.IF_THEN_EXP_CS__OWNED_THEN_EXPRESSION, oldOwnedThenExpression, newOwnedThenExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOwnedThenExpression(ExpCS newOwnedThenExpression)
  {
    if (newOwnedThenExpression != ownedThenExpression)
    {
      NotificationChain msgs = null;
      if (ownedThenExpression != null)
        msgs = ((InternalEObject)ownedThenExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.IF_THEN_EXP_CS__OWNED_THEN_EXPRESSION, null, msgs);
      if (newOwnedThenExpression != null)
        msgs = ((InternalEObject)newOwnedThenExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.IF_THEN_EXP_CS__OWNED_THEN_EXPRESSION, null, msgs);
      msgs = basicSetOwnedThenExpression(newOwnedThenExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.IF_THEN_EXP_CS__OWNED_THEN_EXPRESSION, newOwnedThenExpression, newOwnedThenExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UsePackage.IF_THEN_EXP_CS__OWNED_CONDITION:
        return basicSetOwnedCondition(null, msgs);
      case UsePackage.IF_THEN_EXP_CS__OWNED_THEN_EXPRESSION:
        return basicSetOwnedThenExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UsePackage.IF_THEN_EXP_CS__OWNED_CONDITION:
        return getOwnedCondition();
      case UsePackage.IF_THEN_EXP_CS__OWNED_THEN_EXPRESSION:
        return getOwnedThenExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UsePackage.IF_THEN_EXP_CS__OWNED_CONDITION:
        setOwnedCondition((ExpCS)newValue);
        return;
      case UsePackage.IF_THEN_EXP_CS__OWNED_THEN_EXPRESSION:
        setOwnedThenExpression((ExpCS)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.IF_THEN_EXP_CS__OWNED_CONDITION:
        setOwnedCondition((ExpCS)null);
        return;
      case UsePackage.IF_THEN_EXP_CS__OWNED_THEN_EXPRESSION:
        setOwnedThenExpression((ExpCS)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.IF_THEN_EXP_CS__OWNED_CONDITION:
        return ownedCondition != null;
      case UsePackage.IF_THEN_EXP_CS__OWNED_THEN_EXPRESSION:
        return ownedThenExpression != null;
    }
    return super.eIsSet(featureID);
  }

} //IfThenExpCSImpl
