/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.use.impl;

import modelConverter.use_language.use.ExpCS;
import modelConverter.use_language.use.MapLiteralPartCS;
import modelConverter.use_language.use.UsePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Map Literal Part CS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link modelConverter.use_language.use.impl.MapLiteralPartCSImpl#getOwnedKey <em>Owned Key</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.MapLiteralPartCSImpl#getOwnedValue <em>Owned Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MapLiteralPartCSImpl extends MinimalEObjectImpl.Container implements MapLiteralPartCS
{
  /**
   * The cached value of the '{@link #getOwnedKey() <em>Owned Key</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedKey()
   * @generated
   * @ordered
   */
  protected ExpCS ownedKey;

  /**
   * The cached value of the '{@link #getOwnedValue() <em>Owned Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedValue()
   * @generated
   * @ordered
   */
  protected ExpCS ownedValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MapLiteralPartCSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UsePackage.Literals.MAP_LITERAL_PART_CS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpCS getOwnedKey()
  {
    return ownedKey;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOwnedKey(ExpCS newOwnedKey, NotificationChain msgs)
  {
    ExpCS oldOwnedKey = ownedKey;
    ownedKey = newOwnedKey;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.MAP_LITERAL_PART_CS__OWNED_KEY, oldOwnedKey, newOwnedKey);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOwnedKey(ExpCS newOwnedKey)
  {
    if (newOwnedKey != ownedKey)
    {
      NotificationChain msgs = null;
      if (ownedKey != null)
        msgs = ((InternalEObject)ownedKey).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.MAP_LITERAL_PART_CS__OWNED_KEY, null, msgs);
      if (newOwnedKey != null)
        msgs = ((InternalEObject)newOwnedKey).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.MAP_LITERAL_PART_CS__OWNED_KEY, null, msgs);
      msgs = basicSetOwnedKey(newOwnedKey, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.MAP_LITERAL_PART_CS__OWNED_KEY, newOwnedKey, newOwnedKey));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpCS getOwnedValue()
  {
    return ownedValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOwnedValue(ExpCS newOwnedValue, NotificationChain msgs)
  {
    ExpCS oldOwnedValue = ownedValue;
    ownedValue = newOwnedValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.MAP_LITERAL_PART_CS__OWNED_VALUE, oldOwnedValue, newOwnedValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOwnedValue(ExpCS newOwnedValue)
  {
    if (newOwnedValue != ownedValue)
    {
      NotificationChain msgs = null;
      if (ownedValue != null)
        msgs = ((InternalEObject)ownedValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.MAP_LITERAL_PART_CS__OWNED_VALUE, null, msgs);
      if (newOwnedValue != null)
        msgs = ((InternalEObject)newOwnedValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.MAP_LITERAL_PART_CS__OWNED_VALUE, null, msgs);
      msgs = basicSetOwnedValue(newOwnedValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.MAP_LITERAL_PART_CS__OWNED_VALUE, newOwnedValue, newOwnedValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UsePackage.MAP_LITERAL_PART_CS__OWNED_KEY:
        return basicSetOwnedKey(null, msgs);
      case UsePackage.MAP_LITERAL_PART_CS__OWNED_VALUE:
        return basicSetOwnedValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UsePackage.MAP_LITERAL_PART_CS__OWNED_KEY:
        return getOwnedKey();
      case UsePackage.MAP_LITERAL_PART_CS__OWNED_VALUE:
        return getOwnedValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UsePackage.MAP_LITERAL_PART_CS__OWNED_KEY:
        setOwnedKey((ExpCS)newValue);
        return;
      case UsePackage.MAP_LITERAL_PART_CS__OWNED_VALUE:
        setOwnedValue((ExpCS)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.MAP_LITERAL_PART_CS__OWNED_KEY:
        setOwnedKey((ExpCS)null);
        return;
      case UsePackage.MAP_LITERAL_PART_CS__OWNED_VALUE:
        setOwnedValue((ExpCS)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.MAP_LITERAL_PART_CS__OWNED_KEY:
        return ownedKey != null;
      case UsePackage.MAP_LITERAL_PART_CS__OWNED_VALUE:
        return ownedValue != null;
    }
    return super.eIsSet(featureID);
  }

} //MapLiteralPartCSImpl
