/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.use.impl;

import modelConverter.use_language.use.PatternExpCS;
import modelConverter.use_language.use.TypedRefCS;
import modelConverter.use_language.use.UsePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pattern Exp CS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link modelConverter.use_language.use.impl.PatternExpCSImpl#getPatternVariableName <em>Pattern Variable Name</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.PatternExpCSImpl#getOwnedPatternType <em>Owned Pattern Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PatternExpCSImpl extends MinimalEObjectImpl.Container implements PatternExpCS
{
  /**
   * The default value of the '{@link #getPatternVariableName() <em>Pattern Variable Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPatternVariableName()
   * @generated
   * @ordered
   */
  protected static final String PATTERN_VARIABLE_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPatternVariableName() <em>Pattern Variable Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPatternVariableName()
   * @generated
   * @ordered
   */
  protected String patternVariableName = PATTERN_VARIABLE_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getOwnedPatternType() <em>Owned Pattern Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedPatternType()
   * @generated
   * @ordered
   */
  protected TypedRefCS ownedPatternType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PatternExpCSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UsePackage.Literals.PATTERN_EXP_CS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPatternVariableName()
  {
    return patternVariableName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPatternVariableName(String newPatternVariableName)
  {
    String oldPatternVariableName = patternVariableName;
    patternVariableName = newPatternVariableName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.PATTERN_EXP_CS__PATTERN_VARIABLE_NAME, oldPatternVariableName, patternVariableName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypedRefCS getOwnedPatternType()
  {
    return ownedPatternType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOwnedPatternType(TypedRefCS newOwnedPatternType, NotificationChain msgs)
  {
    TypedRefCS oldOwnedPatternType = ownedPatternType;
    ownedPatternType = newOwnedPatternType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.PATTERN_EXP_CS__OWNED_PATTERN_TYPE, oldOwnedPatternType, newOwnedPatternType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOwnedPatternType(TypedRefCS newOwnedPatternType)
  {
    if (newOwnedPatternType != ownedPatternType)
    {
      NotificationChain msgs = null;
      if (ownedPatternType != null)
        msgs = ((InternalEObject)ownedPatternType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.PATTERN_EXP_CS__OWNED_PATTERN_TYPE, null, msgs);
      if (newOwnedPatternType != null)
        msgs = ((InternalEObject)newOwnedPatternType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.PATTERN_EXP_CS__OWNED_PATTERN_TYPE, null, msgs);
      msgs = basicSetOwnedPatternType(newOwnedPatternType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.PATTERN_EXP_CS__OWNED_PATTERN_TYPE, newOwnedPatternType, newOwnedPatternType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UsePackage.PATTERN_EXP_CS__OWNED_PATTERN_TYPE:
        return basicSetOwnedPatternType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UsePackage.PATTERN_EXP_CS__PATTERN_VARIABLE_NAME:
        return getPatternVariableName();
      case UsePackage.PATTERN_EXP_CS__OWNED_PATTERN_TYPE:
        return getOwnedPatternType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UsePackage.PATTERN_EXP_CS__PATTERN_VARIABLE_NAME:
        setPatternVariableName((String)newValue);
        return;
      case UsePackage.PATTERN_EXP_CS__OWNED_PATTERN_TYPE:
        setOwnedPatternType((TypedRefCS)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.PATTERN_EXP_CS__PATTERN_VARIABLE_NAME:
        setPatternVariableName(PATTERN_VARIABLE_NAME_EDEFAULT);
        return;
      case UsePackage.PATTERN_EXP_CS__OWNED_PATTERN_TYPE:
        setOwnedPatternType((TypedRefCS)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.PATTERN_EXP_CS__PATTERN_VARIABLE_NAME:
        return PATTERN_VARIABLE_NAME_EDEFAULT == null ? patternVariableName != null : !PATTERN_VARIABLE_NAME_EDEFAULT.equals(patternVariableName);
      case UsePackage.PATTERN_EXP_CS__OWNED_PATTERN_TYPE:
        return ownedPatternType != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (patternVariableName: ");
    result.append(patternVariableName);
    result.append(')');
    return result.toString();
  }

} //PatternExpCSImpl
