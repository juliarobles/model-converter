/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.use.impl;

import java.util.Collection;

import modelConverter.use_language.use.ExpCS;
import modelConverter.use_language.use.IfExpCS;
import modelConverter.use_language.use.IfThenExpCS;
import modelConverter.use_language.use.UsePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>If Exp CS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link modelConverter.use_language.use.impl.IfExpCSImpl#getOwnedCondition <em>Owned Condition</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.IfExpCSImpl#getOwnedThenExpression <em>Owned Then Expression</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.IfExpCSImpl#getOwnedIfThenExpressions <em>Owned If Then Expressions</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.IfExpCSImpl#getOwnedElseExpression <em>Owned Else Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IfExpCSImpl extends ExpCSImpl implements IfExpCS
{
  /**
   * The cached value of the '{@link #getOwnedCondition() <em>Owned Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedCondition()
   * @generated
   * @ordered
   */
  protected EObject ownedCondition;

  /**
   * The cached value of the '{@link #getOwnedThenExpression() <em>Owned Then Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedThenExpression()
   * @generated
   * @ordered
   */
  protected ExpCS ownedThenExpression;

  /**
   * The cached value of the '{@link #getOwnedIfThenExpressions() <em>Owned If Then Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedIfThenExpressions()
   * @generated
   * @ordered
   */
  protected EList<IfThenExpCS> ownedIfThenExpressions;

  /**
   * The cached value of the '{@link #getOwnedElseExpression() <em>Owned Else Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedElseExpression()
   * @generated
   * @ordered
   */
  protected ExpCS ownedElseExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IfExpCSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UsePackage.Literals.IF_EXP_CS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getOwnedCondition()
  {
    return ownedCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOwnedCondition(EObject newOwnedCondition, NotificationChain msgs)
  {
    EObject oldOwnedCondition = ownedCondition;
    ownedCondition = newOwnedCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.IF_EXP_CS__OWNED_CONDITION, oldOwnedCondition, newOwnedCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOwnedCondition(EObject newOwnedCondition)
  {
    if (newOwnedCondition != ownedCondition)
    {
      NotificationChain msgs = null;
      if (ownedCondition != null)
        msgs = ((InternalEObject)ownedCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.IF_EXP_CS__OWNED_CONDITION, null, msgs);
      if (newOwnedCondition != null)
        msgs = ((InternalEObject)newOwnedCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.IF_EXP_CS__OWNED_CONDITION, null, msgs);
      msgs = basicSetOwnedCondition(newOwnedCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.IF_EXP_CS__OWNED_CONDITION, newOwnedCondition, newOwnedCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpCS getOwnedThenExpression()
  {
    return ownedThenExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOwnedThenExpression(ExpCS newOwnedThenExpression, NotificationChain msgs)
  {
    ExpCS oldOwnedThenExpression = ownedThenExpression;
    ownedThenExpression = newOwnedThenExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.IF_EXP_CS__OWNED_THEN_EXPRESSION, oldOwnedThenExpression, newOwnedThenExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOwnedThenExpression(ExpCS newOwnedThenExpression)
  {
    if (newOwnedThenExpression != ownedThenExpression)
    {
      NotificationChain msgs = null;
      if (ownedThenExpression != null)
        msgs = ((InternalEObject)ownedThenExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.IF_EXP_CS__OWNED_THEN_EXPRESSION, null, msgs);
      if (newOwnedThenExpression != null)
        msgs = ((InternalEObject)newOwnedThenExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.IF_EXP_CS__OWNED_THEN_EXPRESSION, null, msgs);
      msgs = basicSetOwnedThenExpression(newOwnedThenExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.IF_EXP_CS__OWNED_THEN_EXPRESSION, newOwnedThenExpression, newOwnedThenExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<IfThenExpCS> getOwnedIfThenExpressions()
  {
    if (ownedIfThenExpressions == null)
    {
      ownedIfThenExpressions = new EObjectContainmentEList<IfThenExpCS>(IfThenExpCS.class, this, UsePackage.IF_EXP_CS__OWNED_IF_THEN_EXPRESSIONS);
    }
    return ownedIfThenExpressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpCS getOwnedElseExpression()
  {
    return ownedElseExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOwnedElseExpression(ExpCS newOwnedElseExpression, NotificationChain msgs)
  {
    ExpCS oldOwnedElseExpression = ownedElseExpression;
    ownedElseExpression = newOwnedElseExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.IF_EXP_CS__OWNED_ELSE_EXPRESSION, oldOwnedElseExpression, newOwnedElseExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOwnedElseExpression(ExpCS newOwnedElseExpression)
  {
    if (newOwnedElseExpression != ownedElseExpression)
    {
      NotificationChain msgs = null;
      if (ownedElseExpression != null)
        msgs = ((InternalEObject)ownedElseExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.IF_EXP_CS__OWNED_ELSE_EXPRESSION, null, msgs);
      if (newOwnedElseExpression != null)
        msgs = ((InternalEObject)newOwnedElseExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.IF_EXP_CS__OWNED_ELSE_EXPRESSION, null, msgs);
      msgs = basicSetOwnedElseExpression(newOwnedElseExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.IF_EXP_CS__OWNED_ELSE_EXPRESSION, newOwnedElseExpression, newOwnedElseExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UsePackage.IF_EXP_CS__OWNED_CONDITION:
        return basicSetOwnedCondition(null, msgs);
      case UsePackage.IF_EXP_CS__OWNED_THEN_EXPRESSION:
        return basicSetOwnedThenExpression(null, msgs);
      case UsePackage.IF_EXP_CS__OWNED_IF_THEN_EXPRESSIONS:
        return ((InternalEList<?>)getOwnedIfThenExpressions()).basicRemove(otherEnd, msgs);
      case UsePackage.IF_EXP_CS__OWNED_ELSE_EXPRESSION:
        return basicSetOwnedElseExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UsePackage.IF_EXP_CS__OWNED_CONDITION:
        return getOwnedCondition();
      case UsePackage.IF_EXP_CS__OWNED_THEN_EXPRESSION:
        return getOwnedThenExpression();
      case UsePackage.IF_EXP_CS__OWNED_IF_THEN_EXPRESSIONS:
        return getOwnedIfThenExpressions();
      case UsePackage.IF_EXP_CS__OWNED_ELSE_EXPRESSION:
        return getOwnedElseExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UsePackage.IF_EXP_CS__OWNED_CONDITION:
        setOwnedCondition((EObject)newValue);
        return;
      case UsePackage.IF_EXP_CS__OWNED_THEN_EXPRESSION:
        setOwnedThenExpression((ExpCS)newValue);
        return;
      case UsePackage.IF_EXP_CS__OWNED_IF_THEN_EXPRESSIONS:
        getOwnedIfThenExpressions().clear();
        getOwnedIfThenExpressions().addAll((Collection<? extends IfThenExpCS>)newValue);
        return;
      case UsePackage.IF_EXP_CS__OWNED_ELSE_EXPRESSION:
        setOwnedElseExpression((ExpCS)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.IF_EXP_CS__OWNED_CONDITION:
        setOwnedCondition((EObject)null);
        return;
      case UsePackage.IF_EXP_CS__OWNED_THEN_EXPRESSION:
        setOwnedThenExpression((ExpCS)null);
        return;
      case UsePackage.IF_EXP_CS__OWNED_IF_THEN_EXPRESSIONS:
        getOwnedIfThenExpressions().clear();
        return;
      case UsePackage.IF_EXP_CS__OWNED_ELSE_EXPRESSION:
        setOwnedElseExpression((ExpCS)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.IF_EXP_CS__OWNED_CONDITION:
        return ownedCondition != null;
      case UsePackage.IF_EXP_CS__OWNED_THEN_EXPRESSION:
        return ownedThenExpression != null;
      case UsePackage.IF_EXP_CS__OWNED_IF_THEN_EXPRESSIONS:
        return ownedIfThenExpressions != null && !ownedIfThenExpressions.isEmpty();
      case UsePackage.IF_EXP_CS__OWNED_ELSE_EXPRESSION:
        return ownedElseExpression != null;
    }
    return super.eIsSet(featureID);
  }

} //IfExpCSImpl
