/*
 * generated by Xtext 2.25.0
 */
grammar InternalUSE;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package modelConverter.use_language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package modelConverter.use_language.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import modelConverter.use_language.services.USEGrammarAccess;

}

@parser::members {

 	private USEGrammarAccess grammarAccess;

    public InternalUSEParser(TokenStream input, USEGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected USEGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='model'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getModelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getEnumsEnumParserRuleCall_2_0_0());
					}
					lv_enums_2_0=ruleEnum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"enums",
							lv_enums_2_0,
							"modelConverter.use_language.USE.Enum");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getPackagedElementTypeParserRuleCall_2_1_0());
					}
					lv_packagedElement_3_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"packagedElement",
							lv_packagedElement_3_0,
							"modelConverter.use_language.USE.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getConstraintsConstrainsGeneralParserRuleCall_2_2_0());
					}
					lv_constraints_4_0=ruleConstrainsGeneral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						set(
							$current,
							"constraints",
							lv_constraints_4_0,
							"modelConverter.use_language.USE.ConstrainsGeneral");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleMultiplicity
entryRuleMultiplicity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicityRule()); }
	iv_ruleMultiplicity=ruleMultiplicity
	{ $current=$iv_ruleMultiplicity.current; }
	EOF;

// Rule Multiplicity
ruleMultiplicity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_minValue_0_1='*'
					{
						newLeafNode(lv_minValue_0_1, grammarAccess.getMultiplicityAccess().getMinValueAsteriskKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultiplicityRule());
						}
						addWithLastConsumed($current, "minValue", lv_minValue_0_1, null);
					}
					    |
					{
						newCompositeNode(grammarAccess.getMultiplicityAccess().getMinValueIntToStringParserRuleCall_0_0_1());
					}
					lv_minValue_0_2=ruleIntToString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicityRule());
						}
						add(
							$current,
							"minValue",
							lv_minValue_0_2,
							"modelConverter.use_language.USE.IntToString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_1='..'
			{
				newLeafNode(otherlv_1, grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_1_0());
			}
			(
				(
					(
						lv_maxValue_2_1='*'
						{
							newLeafNode(lv_maxValue_2_1, grammarAccess.getMultiplicityAccess().getMaxValueAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicityRule());
							}
							addWithLastConsumed($current, "maxValue", lv_maxValue_2_1, null);
						}
						    |
						{
							newCompositeNode(grammarAccess.getMultiplicityAccess().getMaxValueIntToStringParserRuleCall_1_1_0_1());
						}
						lv_maxValue_2_2=ruleIntToString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultiplicityRule());
							}
							add(
								$current,
								"maxValue",
								lv_maxValue_2_2,
								"modelConverter.use_language.USE.IntToString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getMultiplicityAccess().getCommaKeyword_2_0());
			}
			(
				(
					(
						lv_minValue_4_1='*'
						{
							newLeafNode(lv_minValue_4_1, grammarAccess.getMultiplicityAccess().getMinValueAsteriskKeyword_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicityRule());
							}
							addWithLastConsumed($current, "minValue", lv_minValue_4_1, null);
						}
						    |
						{
							newCompositeNode(grammarAccess.getMultiplicityAccess().getMinValueIntToStringParserRuleCall_2_1_0_1());
						}
						lv_minValue_4_2=ruleIntToString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultiplicityRule());
							}
							add(
								$current,
								"minValue",
								lv_minValue_4_2,
								"modelConverter.use_language.USE.IntToString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_5='..'
				{
					newLeafNode(otherlv_5, grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_2_2_0());
				}
				(
					(
						(
							lv_maxValue_6_1='*'
							{
								newLeafNode(lv_maxValue_6_1, grammarAccess.getMultiplicityAccess().getMaxValueAsteriskKeyword_2_2_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMultiplicityRule());
								}
								addWithLastConsumed($current, "maxValue", lv_maxValue_6_1, null);
							}
							    |
							{
								newCompositeNode(grammarAccess.getMultiplicityAccess().getMaxValueIntToStringParserRuleCall_2_2_1_0_1());
							}
							lv_maxValue_6_2=ruleIntToString
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMultiplicityRule());
								}
								add(
									$current,
									"maxValue",
									lv_maxValue_6_2,
									"modelConverter.use_language.USE.IntToString");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)?
		)*
	)
;

// Entry rule entryRuleIntToString
entryRuleIntToString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntToStringRule()); }
	iv_ruleIntToString=ruleIntToString
	{ $current=$iv_ruleIntToString.current.getText(); }
	EOF;

// Rule IntToString
ruleIntToString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntToStringAccess().getDigitZeroKeyword_0());
		}
		    |
		kw='1'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntToStringAccess().getDigitOneKeyword_1());
		}
		    |
		kw='2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntToStringAccess().getDigitTwoKeyword_2());
		}
		    |
		kw='3'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntToStringAccess().getDigitThreeKeyword_3());
		}
		    |
		kw='4'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntToStringAccess().getDigitFourKeyword_4());
		}
		    |
		kw='5'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntToStringAccess().getDigitFiveKeyword_5());
		}
		    |
		kw='6'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntToStringAccess().getDigitSixKeyword_6());
		}
		    |
		kw='7'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntToStringAccess().getDigitSevenKeyword_7());
		}
		    |
		kw='8'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntToStringAccess().getDigitEightKeyword_8());
		}
		    |
		kw='9'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntToStringAccess().getDigitNineKeyword_9());
		}
	)+
;

// Entry rule entryRuleDefaultType
entryRuleDefaultType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDefaultTypeRule()); }
	iv_ruleDefaultType=ruleDefaultType
	{ $current=$iv_ruleDefaultType.current.getText(); }
	EOF;

// Rule DefaultType
ruleDefaultType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Integer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefaultTypeAccess().getIntegerKeyword_0());
		}
		    |
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefaultTypeAccess().getStringKeyword_1());
		}
		    |
		kw='Real'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefaultTypeAccess().getRealKeyword_2());
		}
		    |
		kw='Boolean'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefaultTypeAccess().getBooleanKeyword_3());
		}
	)
;

// Entry rule entryRuleAllTypes
entryRuleAllTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllTypesRule()); }
	iv_ruleAllTypes=ruleAllTypes
	{ $current=$iv_ruleAllTypes.current; }
	EOF;

// Rule AllTypes
ruleAllTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAllTypesAccess().getCollectionTypeParserRuleCall_0());
		}
		this_CollectionType_0=ruleCollectionType
		{
			$current = $this_CollectionType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAllTypesAccess().getSimpleTypesParserRuleCall_1());
		}
		this_SimpleTypes_1=ruleSimpleTypes
		{
			$current = $this_SimpleTypes_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getClassParserRuleCall_0());
		}
		this_Class_0=ruleClass
		{
			$current = $this_Class_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getAssociationParserRuleCall_1());
		}
		this_Association_1=ruleAssociation
		{
			$current = $this_Association_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getAssociationClassParserRuleCall_2());
		}
		this_AssociationClass_2=ruleAssociationClass
		{
			$current = $this_AssociationClass_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCollectionType
entryRuleCollectionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionTypeRule()); }
	iv_ruleCollectionType=ruleCollectionType
	{ $current=$iv_ruleCollectionType.current; }
	EOF;

// Rule CollectionType
ruleCollectionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_collection_0_1='Set'
					{
						newLeafNode(lv_collection_0_1, grammarAccess.getCollectionTypeAccess().getCollectionSetKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCollectionTypeRule());
						}
						setWithLastConsumed($current, "collection", lv_collection_0_1, null);
					}
					    |
					lv_collection_0_2='Bag'
					{
						newLeafNode(lv_collection_0_2, grammarAccess.getCollectionTypeAccess().getCollectionBagKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCollectionTypeRule());
						}
						setWithLastConsumed($current, "collection", lv_collection_0_2, null);
					}
					    |
					lv_collection_0_3='Sequence'
					{
						newLeafNode(lv_collection_0_3, grammarAccess.getCollectionTypeAccess().getCollectionSequenceKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCollectionTypeRule());
						}
						setWithLastConsumed($current, "collection", lv_collection_0_3, null);
					}
				)
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCollectionTypeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionTypeAccess().getTypeSimpleTypesParserRuleCall_2_0());
				}
				lv_type_2_0=ruleSimpleTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionTypeRule());
					}
					add(
						$current,
						"type",
						lv_type_2_0,
						"modelConverter.use_language.USE.SimpleTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCollectionTypeAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleAllClass
entryRuleAllClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllClassRule()); }
	iv_ruleAllClass=ruleAllClass
	{ $current=$iv_ruleAllClass.current; }
	EOF;

// Rule AllClass
ruleAllClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAllClassAccess().getClassParserRuleCall_0());
		}
		this_Class_0=ruleClass
		{
			$current = $this_Class_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAllClassAccess().getAssociationClassParserRuleCall_1());
		}
		this_AssociationClass_1=ruleAssociationClass
		{
			$current = $this_AssociationClass_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSimpleTypes
entryRuleSimpleTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleTypesRule()); }
	iv_ruleSimpleTypes=ruleSimpleTypes
	{ $current=$iv_ruleSimpleTypes.current; }
	EOF;

// Rule SimpleTypes
ruleSimpleTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleTypesAccess().getDefaultTypeDefaultTypeParserRuleCall_0_0());
				}
				lv_defaultType_0_0=ruleDefaultType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleTypesRule());
					}
					set(
						$current,
						"defaultType",
						lv_defaultType_0_0,
						"modelConverter.use_language.USE.DefaultType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleTypesRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSimpleTypesAccess().getReferendedAllClassAndEnumCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleEnum
entryRuleEnum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumRule()); }
	iv_ruleEnum=ruleEnum
	{ $current=$iv_ruleEnum.current; }
	EOF;

// Rule Enum
ruleEnum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enum'
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumAccess().getEnumKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEnumAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumAccess().getElementsEnumElementParserRuleCall_3_0());
				}
				lv_elements_3_0=ruleEnumElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumRule());
					}
					add(
						$current,
						"elements",
						lv_elements_3_0,
						"modelConverter.use_language.USE.EnumElement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEnumElement
entryRuleEnumElement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEnumElementRule()); }
	iv_ruleEnumElement=ruleEnumElement
	{ $current=$iv_ruleEnumElement.current.getText(); }
	EOF;

// Rule EnumElement
ruleEnumElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getEnumElementAccess().getIDTerminalRuleCall_0());
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEnumElementAccess().getCommaKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_abstract_0_0='abstract'
				{
					newLeafNode(lv_abstract_0_0, grammarAccess.getClassAccess().getAbstractAbstractKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassRule());
					}
					setWithLastConsumed($current, "abstract", lv_abstract_0_0 != null, "abstract");
				}
			)
		)?
		otherlv_1='class'
		{
			newLeafNode(otherlv_1, grammarAccess.getClassAccess().getClassKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='<'
			{
				newLeafNode(otherlv_3, grammarAccess.getClassAccess().getLessThanSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getClassAccess().getGeneralizationGeneralizationParserRuleCall_3_1_0());
					}
					lv_generalization_4_0=ruleGeneralization
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClassRule());
						}
						add(
							$current,
							"generalization",
							lv_generalization_4_0,
							"modelConverter.use_language.USE.Generalization");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getAttributesAttributesBaseParserRuleCall_4_0());
				}
				lv_attributes_5_0=ruleAttributesBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"attributes",
						lv_attributes_5_0,
						"modelConverter.use_language.USE.AttributesBase");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getOperationsOperationsBaseParserRuleCall_5_0());
				}
				lv_operations_6_0=ruleOperationsBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"operations",
						lv_operations_6_0,
						"modelConverter.use_language.USE.OperationsBase");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getConstraintsConstraintsBaseParserRuleCall_6_0());
				}
				lv_constraints_7_0=ruleConstraintsBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"constraints",
						lv_constraints_7_0,
						"modelConverter.use_language.USE.ConstraintsBase");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_8='end'
		{
			newLeafNode(otherlv_8, grammarAccess.getClassAccess().getEndKeyword_7());
		}
	)
;

// Entry rule entryRuleGeneralization
entryRuleGeneralization returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeneralizationRule()); }
	iv_ruleGeneralization=ruleGeneralization
	{ $current=$iv_ruleGeneralization.current; }
	EOF;

// Rule Generalization
ruleGeneralization returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGeneralizationRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getGeneralizationAccess().getGeneralAllClassCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getGeneralizationAccess().getCommaKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleAssociation
entryRuleAssociation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssociationRule()); }
	iv_ruleAssociation=ruleAssociation
	{ $current=$iv_ruleAssociation.current; }
	EOF;

// Rule Association
ruleAssociation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_typeAssociation_0_1='association'
					{
						newLeafNode(lv_typeAssociation_0_1, grammarAccess.getAssociationAccess().getTypeAssociationAssociationKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssociationRule());
						}
						setWithLastConsumed($current, "typeAssociation", lv_typeAssociation_0_1, null);
					}
					    |
					lv_typeAssociation_0_2='aggregation'
					{
						newLeafNode(lv_typeAssociation_0_2, grammarAccess.getAssociationAccess().getTypeAssociationAggregationKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssociationRule());
						}
						setWithLastConsumed($current, "typeAssociation", lv_typeAssociation_0_2, null);
					}
					    |
					lv_typeAssociation_0_3='composition'
					{
						newLeafNode(lv_typeAssociation_0_3, grammarAccess.getAssociationAccess().getTypeAssociationCompositionKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssociationRule());
						}
						setWithLastConsumed($current, "typeAssociation", lv_typeAssociation_0_3, null);
					}
				)
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAssociationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssociationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='between'
		{
			newLeafNode(otherlv_2, grammarAccess.getAssociationAccess().getBetweenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationAccess().getAssociationEndsAssociationEndParserRuleCall_3_0());
				}
				lv_associationEnds_3_0=ruleAssociationEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationRule());
					}
					add(
						$current,
						"associationEnds",
						lv_associationEnds_3_0,
						"modelConverter.use_language.USE.AssociationEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getAssociationAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleAssociationEnd
entryRuleAssociationEnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssociationEndRule()); }
	iv_ruleAssociationEnd=ruleAssociationEnd
	{ $current=$iv_ruleAssociationEnd.current; }
	EOF;

// Rule AssociationEnd
ruleAssociationEnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssociationEndRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAssociationEndAccess().getTypeAllClassCrossReference_0_0());
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getAssociationEndAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationEndAccess().getMulMultiplicityParserRuleCall_2_0());
				}
				lv_mul_2_0=ruleMultiplicity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationEndRule());
					}
					set(
						$current,
						"mul",
						lv_mul_2_0,
						"modelConverter.use_language.USE.Multiplicity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getAssociationEndAccess().getRightSquareBracketKeyword_3());
		}
		(
			otherlv_4='role'
			{
				newLeafNode(otherlv_4, grammarAccess.getAssociationEndAccess().getRoleKeyword_4_0());
			}
			(
				(
					lv_role_5_0=RULE_ID
					{
						newLeafNode(lv_role_5_0, grammarAccess.getAssociationEndAccess().getRoleIDTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssociationEndRule());
						}
						setWithLastConsumed(
							$current,
							"role",
							lv_role_5_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
		(
			(
				lv_ordered_6_0='ordered'
				{
					newLeafNode(lv_ordered_6_0, grammarAccess.getAssociationEndAccess().getOrderedOrderedKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssociationEndRule());
					}
					setWithLastConsumed($current, "ordered", lv_ordered_6_0 != null, "ordered");
				}
			)
		)?
	)
;

// Entry rule entryRuleAssociationClass
entryRuleAssociationClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssociationClassRule()); }
	iv_ruleAssociationClass=ruleAssociationClass
	{ $current=$iv_ruleAssociationClass.current; }
	EOF;

// Rule AssociationClass
ruleAssociationClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_abstract_0_0='abstract'
				{
					newLeafNode(lv_abstract_0_0, grammarAccess.getAssociationClassAccess().getAbstractAbstractKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssociationClassRule());
					}
					setWithLastConsumed($current, "abstract", lv_abstract_0_0 != null, "abstract");
				}
			)
		)?
		otherlv_1='associationclass'
		{
			newLeafNode(otherlv_1, grammarAccess.getAssociationClassAccess().getAssociationclassKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getAssociationClassAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssociationClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='<'
			{
				newLeafNode(otherlv_3, grammarAccess.getAssociationClassAccess().getLessThanSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAssociationClassAccess().getGeneralizationGeneralizationParserRuleCall_3_1_0());
					}
					lv_generalization_4_0=ruleGeneralization
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssociationClassRule());
						}
						add(
							$current,
							"generalization",
							lv_generalization_4_0,
							"modelConverter.use_language.USE.Generalization");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		otherlv_5='between'
		{
			newLeafNode(otherlv_5, grammarAccess.getAssociationClassAccess().getBetweenKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationClassAccess().getAssociationEndsAssociationEndParserRuleCall_5_0());
				}
				lv_associationEnds_6_0=ruleAssociationEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationClassRule());
					}
					add(
						$current,
						"associationEnds",
						lv_associationEnds_6_0,
						"modelConverter.use_language.USE.AssociationEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationClassAccess().getAttributesAttributesBaseParserRuleCall_6_0());
				}
				lv_attributes_7_0=ruleAttributesBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationClassRule());
					}
					set(
						$current,
						"attributes",
						lv_attributes_7_0,
						"modelConverter.use_language.USE.AttributesBase");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationClassAccess().getOperationsOperationsBaseParserRuleCall_7_0());
				}
				lv_operations_8_0=ruleOperationsBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationClassRule());
					}
					set(
						$current,
						"operations",
						lv_operations_8_0,
						"modelConverter.use_language.USE.OperationsBase");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationClassAccess().getConstraintsConstraintsBaseParserRuleCall_8_0());
				}
				lv_constraints_9_0=ruleConstraintsBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationClassRule());
					}
					set(
						$current,
						"constraints",
						lv_constraints_9_0,
						"modelConverter.use_language.USE.ConstraintsBase");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_10='end'
		{
			newLeafNode(otherlv_10, grammarAccess.getAssociationClassAccess().getEndKeyword_9());
		}
	)
;

// Entry rule entryRuleAttributesBase
entryRuleAttributesBase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributesBaseRule()); }
	iv_ruleAttributesBase=ruleAttributesBase
	{ $current=$iv_ruleAttributesBase.current; }
	EOF;

// Rule AttributesBase
ruleAttributesBase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='attributes'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributesBaseAccess().getAttributesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributesBaseAccess().getAttributesAttributeParserRuleCall_1_0());
				}
				lv_attributes_1_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributesBaseRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_1_0,
						"modelConverter.use_language.USE.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getTypeAllTypesParserRuleCall_2_0());
				}
				lv_type_2_0=ruleAllTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"modelConverter.use_language.USE.AllTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperationsBase
entryRuleOperationsBase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationsBaseRule()); }
	iv_ruleOperationsBase=ruleOperationsBase
	{ $current=$iv_ruleOperationsBase.current; }
	EOF;

// Rule OperationsBase
ruleOperationsBase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='operations'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperationsBaseAccess().getOperationsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationsBaseAccess().getOperationsOperationTypeParserRuleCall_1_0());
				}
				lv_operations_1_0=ruleOperationType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationsBaseRule());
					}
					add(
						$current,
						"operations",
						lv_operations_1_0,
						"modelConverter.use_language.USE.OperationType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleOperationType
entryRuleOperationType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationTypeRule()); }
	iv_ruleOperationType=ruleOperationType
	{ $current=$iv_ruleOperationType.current; }
	EOF;

// Rule OperationType
ruleOperationType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperationTypeAccess().getOperationComplexParserRuleCall_0());
		}
		this_OperationComplex_0=ruleOperationComplex
		{
			$current = $this_OperationComplex_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationTypeAccess().getOperationQueryParserRuleCall_1());
		}
		this_OperationQuery_1=ruleOperationQuery
		{
			$current = $this_OperationQuery_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperationQuery
entryRuleOperationQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationQueryRule()); }
	iv_ruleOperationQuery=ruleOperationQuery
	{ $current=$iv_ruleOperationQuery.current; }
	EOF;

// Rule OperationQuery
ruleOperationQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationQueryAccess().getOperationDeclarationOperationDeclarationParserRuleCall_0_0());
				}
				lv_operationDeclaration_0_0=ruleOperationDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationQueryRule());
					}
					set(
						$current,
						"operationDeclaration",
						lv_operationDeclaration_0_0,
						"modelConverter.use_language.USE.OperationDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getOperationQueryAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationQueryAccess().getOperationbodyOCLExpressionParserRuleCall_2_0());
				}
				lv_operationbody_2_0=ruleOCLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationQueryRule());
					}
					set(
						$current,
						"operationbody",
						lv_operationbody_2_0,
						"modelConverter.use_language.USE.OCLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationQueryAccess().getConditionsConditionTypeParserRuleCall_3_0());
				}
				lv_conditions_3_0=ruleConditionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationQueryRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_3_0,
						"modelConverter.use_language.USE.ConditionType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleOperationComplex
entryRuleOperationComplex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationComplexRule()); }
	iv_ruleOperationComplex=ruleOperationComplex
	{ $current=$iv_ruleOperationComplex.current; }
	EOF;

// Rule OperationComplex
ruleOperationComplex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationComplexAccess().getOperationDeclarationOperationDeclarationParserRuleCall_0_0());
				}
				lv_operationDeclaration_0_0=ruleOperationDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationComplexRule());
					}
					set(
						$current,
						"operationDeclaration",
						lv_operationDeclaration_0_0,
						"modelConverter.use_language.USE.OperationDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='begin'
			{
				newLeafNode(otherlv_1, grammarAccess.getOperationComplexAccess().getBeginKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationComplexAccess().getOperationbodyOCLExpressionParserRuleCall_1_1_0());
					}
					lv_operationbody_2_0=ruleOCLExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationComplexRule());
						}
						set(
							$current,
							"operationbody",
							lv_operationbody_2_0,
							"modelConverter.use_language.USE.OCLExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_3='end'
			{
				newLeafNode(otherlv_3, grammarAccess.getOperationComplexAccess().getEndKeyword_1_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationComplexAccess().getConditionsConditionTypeParserRuleCall_2_0());
				}
				lv_conditions_4_0=ruleConditionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationComplexRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_4_0,
						"modelConverter.use_language.USE.ConditionType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleOperationDeclaration
entryRuleOperationDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationDeclarationRule()); }
	iv_ruleOperationDeclaration=ruleOperationDeclaration
	{ $current=$iv_ruleOperationDeclaration.current; }
	EOF;

// Rule OperationDeclaration
ruleOperationDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getOperationDeclarationAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getOperationDeclarationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationDeclarationAccess().getParametersParameterParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationDeclarationRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_2_0,
						"modelConverter.use_language.USE.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getOperationDeclarationAccess().getRightParenthesisKeyword_3());
		}
		(
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getOperationDeclarationAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationDeclarationAccess().getReturnTypeAllTypesParserRuleCall_4_1_0());
					}
					lv_returnType_5_0=ruleAllTypes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationDeclarationRule());
						}
						set(
							$current,
							"returnType",
							lv_returnType_5_0,
							"modelConverter.use_language.USE.AllTypes");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeAllTypesParserRuleCall_2_0());
				}
				lv_type_2_0=ruleAllTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"modelConverter.use_language.USE.AllTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getCommaKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleConstraintsBase
entryRuleConstraintsBase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintsBaseRule()); }
	iv_ruleConstraintsBase=ruleConstraintsBase
	{ $current=$iv_ruleConstraintsBase.current; }
	EOF;

// Rule ConstraintsBase
ruleConstraintsBase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constraints'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstraintsBaseAccess().getConstraintsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintsBaseAccess().getInvariantsInvariantDefinitionParserRuleCall_1_0());
				}
				lv_invariants_1_0=ruleInvariantDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintsBaseRule());
					}
					add(
						$current,
						"invariants",
						lv_invariants_1_0,
						"modelConverter.use_language.USE.InvariantDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConstrainsGeneral
entryRuleConstrainsGeneral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstrainsGeneralRule()); }
	iv_ruleConstrainsGeneral=ruleConstrainsGeneral
	{ $current=$iv_ruleConstrainsGeneral.current; }
	EOF;

// Rule ConstrainsGeneral
ruleConstrainsGeneral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constraints'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstrainsGeneralAccess().getConstraintsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstrainsGeneralAccess().getContextsContextsTypeParserRuleCall_1_0());
				}
				lv_contexts_1_0=ruleContextsType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstrainsGeneralRule());
					}
					add(
						$current,
						"contexts",
						lv_contexts_1_0,
						"modelConverter.use_language.USE.ContextsType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleContextsType
entryRuleContextsType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContextsTypeRule()); }
	iv_ruleContextsType=ruleContextsType
	{ $current=$iv_ruleContextsType.current; }
	EOF;

// Rule ContextsType
ruleContextsType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getContextsTypeAccess().getInvariantContextParserRuleCall_0());
		}
		this_InvariantContext_0=ruleInvariantContext
		{
			$current = $this_InvariantContext_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getContextsTypeAccess().getOperationContextParserRuleCall_1());
		}
		this_OperationContext_1=ruleOperationContext
		{
			$current = $this_OperationContext_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInvariantContext
entryRuleInvariantContext returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInvariantContextRule()); }
	iv_ruleInvariantContext=ruleInvariantContext
	{ $current=$iv_ruleInvariantContext.current; }
	EOF;

// Rule InvariantContext
ruleInvariantContext returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='context'
		{
			newLeafNode(otherlv_0, grammarAccess.getInvariantContextAccess().getContextKeyword_0());
		}
		(
			(
				(
					lv_variablename_1_0=RULE_ID
					{
						newLeafNode(lv_variablename_1_0, grammarAccess.getInvariantContextAccess().getVariablenameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInvariantContextRule());
						}
						setWithLastConsumed(
							$current,
							"variablename",
							lv_variablename_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getInvariantContextAccess().getColonKeyword_1_1());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInvariantContextRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getInvariantContextAccess().getClassnameAllClassCrossReference_2_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInvariantContextAccess().getInvariantsInvariantDefinitionParserRuleCall_3_0());
				}
				lv_invariants_4_0=ruleInvariantDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInvariantContextRule());
					}
					add(
						$current,
						"invariants",
						lv_invariants_4_0,
						"modelConverter.use_language.USE.InvariantDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleInvariantDefinition
entryRuleInvariantDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInvariantDefinitionRule()); }
	iv_ruleInvariantDefinition=ruleInvariantDefinition
	{ $current=$iv_ruleInvariantDefinition.current; }
	EOF;

// Rule InvariantDefinition
ruleInvariantDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='inv'
		{
			newLeafNode(otherlv_0, grammarAccess.getInvariantDefinitionAccess().getInvKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getInvariantDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInvariantDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getInvariantDefinitionAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInvariantDefinitionAccess().getOclexpressionOCLExpressionParserRuleCall_3_0());
				}
				lv_oclexpression_3_0=ruleOCLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInvariantDefinitionRule());
					}
					set(
						$current,
						"oclexpression",
						lv_oclexpression_3_0,
						"modelConverter.use_language.USE.OCLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperationContext
entryRuleOperationContext returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationContextRule()); }
	iv_ruleOperationContext=ruleOperationContext
	{ $current=$iv_ruleOperationContext.current; }
	EOF;

// Rule OperationContext
ruleOperationContext returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='context'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperationContextAccess().getContextKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationContextRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getOperationContextAccess().getClassnameAllClassCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationContextAccess().getConstrainsOperationConstraintsParserRuleCall_2_0());
				}
				lv_constrains_2_0=ruleOperationConstraints
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationContextRule());
					}
					set(
						$current,
						"constrains",
						lv_constrains_2_0,
						"modelConverter.use_language.USE.OperationConstraints");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperationConstraints
entryRuleOperationConstraints returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationConstraintsRule()); }
	iv_ruleOperationConstraints=ruleOperationConstraints
	{ $current=$iv_ruleOperationConstraints.current; }
	EOF;

// Rule OperationConstraints
ruleOperationConstraints returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='::'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperationConstraintsAccess().getColonColonKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationConstraintsAccess().getOperationDeclarationOperationDeclarationParserRuleCall_1_0());
				}
				lv_operationDeclaration_1_0=ruleOperationDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationConstraintsRule());
					}
					set(
						$current,
						"operationDeclaration",
						lv_operationDeclaration_1_0,
						"modelConverter.use_language.USE.OperationDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationConstraintsAccess().getConditionsConditionTypeParserRuleCall_2_0());
				}
				lv_conditions_2_0=ruleConditionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationConstraintsRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_2_0,
						"modelConverter.use_language.USE.ConditionType");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleConditionType
entryRuleConditionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionTypeRule()); }
	iv_ruleConditionType=ruleConditionType
	{ $current=$iv_ruleConditionType.current; }
	EOF;

// Rule ConditionType
ruleConditionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConditionTypeAccess().getPreconditionParserRuleCall_0());
		}
		this_Precondition_0=rulePrecondition
		{
			$current = $this_Precondition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConditionTypeAccess().getPostconditionParserRuleCall_1());
		}
		this_Postcondition_1=rulePostcondition
		{
			$current = $this_Postcondition_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrecondition
entryRulePrecondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPreconditionRule()); }
	iv_rulePrecondition=rulePrecondition
	{ $current=$iv_rulePrecondition.current; }
	EOF;

// Rule Precondition
rulePrecondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pre'
		{
			newLeafNode(otherlv_0, grammarAccess.getPreconditionAccess().getPreKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPreconditionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPreconditionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getPreconditionAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPreconditionAccess().getOclexpressionOCLExpressionParserRuleCall_3_0());
				}
				lv_oclexpression_3_0=ruleOCLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreconditionRule());
					}
					set(
						$current,
						"oclexpression",
						lv_oclexpression_3_0,
						"modelConverter.use_language.USE.OCLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePostcondition
entryRulePostcondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostconditionRule()); }
	iv_rulePostcondition=rulePostcondition
	{ $current=$iv_rulePostcondition.current; }
	EOF;

// Rule Postcondition
rulePostcondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='post'
		{
			newLeafNode(otherlv_0, grammarAccess.getPostconditionAccess().getPostKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPostconditionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPostconditionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getPostconditionAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPostconditionAccess().getOclexpressionOCLExpressionParserRuleCall_3_0());
				}
				lv_oclexpression_3_0=ruleOCLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPostconditionRule());
					}
					set(
						$current,
						"oclexpression",
						lv_oclexpression_3_0,
						"modelConverter.use_language.USE.OCLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOCLExpression
entryRuleOCLExpression returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getOCLExpressionRule()); }
	iv_ruleOCLExpression=ruleOCLExpression
	{ $current=$iv_ruleOCLExpression.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule OCLExpression
ruleOCLExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getOCLExpressionAccess().getSTRINGTerminalRuleCall());
	}
;
finally {
	myHiddenTokenState.restore();
}

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ML_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
