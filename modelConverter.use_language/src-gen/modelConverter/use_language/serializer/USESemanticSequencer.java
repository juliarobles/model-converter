/*
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.serializer;

import com.google.inject.Inject;
import java.util.Set;
import modelConverter.use_language.services.USEGrammarAccess;
import modelConverter.use_language.uml.Association;
import modelConverter.use_language.uml.AssociationClass;
import modelConverter.use_language.uml.Attribute;
import modelConverter.use_language.uml.ConstrainsGeneral;
import modelConverter.use_language.uml.ConstraintsBase;
import modelConverter.use_language.uml.Enumeration;
import modelConverter.use_language.uml.Generalization;
import modelConverter.use_language.uml.InvariantContext;
import modelConverter.use_language.uml.InvariantDefinition;
import modelConverter.use_language.uml.MemberEnd;
import modelConverter.use_language.uml.Model;
import modelConverter.use_language.uml.OperationContext;
import modelConverter.use_language.uml.OperationDeclaration;
import modelConverter.use_language.uml.OwnedLiteral;
import modelConverter.use_language.uml.Postcondition;
import modelConverter.use_language.uml.Precondition;
import modelConverter.use_language.uml.SimpleTypes;
import modelConverter.use_language.uml.UmlPackage;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class USESemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private USEGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UmlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UmlPackage.ASSOCIATION:
				sequence_Association(context, (Association) semanticObject); 
				return; 
			case UmlPackage.ASSOCIATION_CLASS:
				sequence_AssociationClass(context, (AssociationClass) semanticObject); 
				return; 
			case UmlPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case UmlPackage.CLASS:
				sequence_Class(context, (modelConverter.use_language.uml.Class) semanticObject); 
				return; 
			case UmlPackage.CONSTRAINS_GENERAL:
				sequence_ConstrainsGeneral(context, (ConstrainsGeneral) semanticObject); 
				return; 
			case UmlPackage.CONSTRAINTS_BASE:
				sequence_ConstraintsBase(context, (ConstraintsBase) semanticObject); 
				return; 
			case UmlPackage.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case UmlPackage.GENERALIZATION:
				sequence_Generalization(context, (Generalization) semanticObject); 
				return; 
			case UmlPackage.INVARIANT_CONTEXT:
				sequence_InvariantContext(context, (InvariantContext) semanticObject); 
				return; 
			case UmlPackage.INVARIANT_DEFINITION:
				sequence_InvariantDefinition(context, (InvariantDefinition) semanticObject); 
				return; 
			case UmlPackage.MEMBER_END:
				sequence_MemberEnd(context, (MemberEnd) semanticObject); 
				return; 
			case UmlPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case UmlPackage.OPERATION_CONTEXT:
				sequence_OperationContext(context, (OperationContext) semanticObject); 
				return; 
			case UmlPackage.OPERATION_DECLARATION:
				if (rule == grammarAccess.getOperationTypeRule()) {
					sequence_OperationBasic_OperationComplex_OperationDeclaration(context, (OperationDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOperationBasicRule()) {
					sequence_OperationBasic_OperationDeclaration(context, (OperationDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOperationComplexRule()) {
					sequence_OperationComplex_OperationDeclaration(context, (OperationDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOperationConstraintsRule()) {
					sequence_OperationConstraints_OperationDeclaration(context, (OperationDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOperationDeclarationRule()) {
					sequence_OperationDeclaration(context, (OperationDeclaration) semanticObject); 
					return; 
				}
				else break;
			case UmlPackage.OWNED_LITERAL:
				sequence_OwnedLiteral(context, (OwnedLiteral) semanticObject); 
				return; 
			case UmlPackage.POSTCONDITION:
				sequence_Postcondition(context, (Postcondition) semanticObject); 
				return; 
			case UmlPackage.PRECONDITION:
				sequence_Precondition(context, (Precondition) semanticObject); 
				return; 
			case UmlPackage.SIMPLE_TYPES:
				sequence_SimpleTypes(context, (SimpleTypes) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Type returns AssociationClass
	 *     AssociationType returns AssociationClass
	 *     AllClass returns AssociationClass
	 *     AssociationClass returns AssociationClass
	 *
	 * Constraint:
	 *     (
	 *         abstract?='abstract'? 
	 *         name=ID 
	 *         generalization+=Generalization* 
	 *         memberEnds+=MemberEnd+ 
	 *         ownedAttribute+=Attribute* 
	 *         operations+=OperationType* 
	 *         constraints=ConstraintsBase?
	 *     )
	 */
	protected void sequence_AssociationClass(ISerializationContext context, AssociationClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Association
	 *     AssociationType returns Association
	 *     Association returns Association
	 *     AssociationBasic returns Association
	 *     Aggregation returns Association
	 *     Composition returns Association
	 *
	 * Constraint:
	 *     (name=ID memberEnds+=MemberEnd+)
	 */
	protected void sequence_Association(ISerializationContext context, Association semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *     OwnedParameter returns Attribute
	 *
	 * Constraint:
	 *     (name=ID type=SimpleTypes)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UmlPackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UmlPackage.Literals.ATTRIBUTE__NAME));
			if (transientValues.isValueTransient(semanticObject, UmlPackage.Literals.ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UmlPackage.Literals.ATTRIBUTE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAttributeAccess().getTypeSimpleTypesParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Class
	 *     AllClass returns Class
	 *     Class returns Class
	 *
	 * Constraint:
	 *     (
	 *         abstract?='abstract'? 
	 *         name=ID 
	 *         generalization+=Generalization* 
	 *         ownedAttribute+=Attribute* 
	 *         ownedOperation=OperationsBase? 
	 *         constraints=ConstraintsBase?
	 *     )
	 */
	protected void sequence_Class(ISerializationContext context, modelConverter.use_language.uml.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstrainsGeneral returns ConstrainsGeneral
	 *
	 * Constraint:
	 *     contexts+=ContextsType+
	 */
	protected void sequence_ConstrainsGeneral(ISerializationContext context, ConstrainsGeneral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstraintsBase returns ConstraintsBase
	 *
	 * Constraint:
	 *     invariants+=InvariantDefinition+
	 */
	protected void sequence_ConstraintsBase(ISerializationContext context, ConstraintsBase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Enumeration returns Enumeration
	 *
	 * Constraint:
	 *     (name=ID? ownedLiteral+=OwnedLiteral+)
	 */
	protected void sequence_Enumeration(ISerializationContext context, Enumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Generalization returns Generalization
	 *
	 * Constraint:
	 *     general+=[AllClass|ID]
	 */
	protected void sequence_Generalization(ISerializationContext context, Generalization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContextsType returns InvariantContext
	 *     InvariantContext returns InvariantContext
	 *
	 * Constraint:
	 *     (variablename=ID? classname=[AllClass|ID] invariants+=InvariantDefinition*)
	 */
	protected void sequence_InvariantContext(ISerializationContext context, InvariantContext semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InvariantDefinition returns InvariantDefinition
	 *
	 * Constraint:
	 *     (name=ID? oclExpression=OCLExpression)
	 */
	protected void sequence_InvariantDefinition(ISerializationContext context, InvariantDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MemberEnd returns MemberEnd
	 *
	 * Constraint:
	 *     (type=[AllClass|ID] mul=Multiplicity role=ID? ordered?='ordered'?)
	 */
	protected void sequence_MemberEnd(ISerializationContext context, MemberEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=ID packagedElement+=Enumeration* packagedElement+=Type* constraints=ConstrainsGeneral?)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationType returns OperationDeclaration
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         ownedParameter+=OwnedParameter* 
	 *         returnType=SimpleTypes? 
	 *         ((oclexpression=OCLExpression? conditions+=ConditionType*) | (operationbody=OCLExpression? conditions+=ConditionType*))
	 *     )
	 */
	protected void sequence_OperationBasic_OperationComplex_OperationDeclaration(ISerializationContext context, OperationDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationBasic returns OperationDeclaration
	 *
	 * Constraint:
	 *     (name=ID ownedParameter+=OwnedParameter* returnType=SimpleTypes? oclexpression=OCLExpression? conditions+=ConditionType*)
	 */
	protected void sequence_OperationBasic_OperationDeclaration(ISerializationContext context, OperationDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationComplex returns OperationDeclaration
	 *
	 * Constraint:
	 *     (name=ID ownedParameter+=OwnedParameter* returnType=SimpleTypes? operationbody=OCLExpression? conditions+=ConditionType*)
	 */
	protected void sequence_OperationComplex_OperationDeclaration(ISerializationContext context, OperationDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationConstraints returns OperationDeclaration
	 *
	 * Constraint:
	 *     (name=ID ownedParameter+=OwnedParameter* returnType=SimpleTypes? conditions+=ConditionType+)
	 */
	protected void sequence_OperationConstraints_OperationDeclaration(ISerializationContext context, OperationDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContextsType returns OperationContext
	 *     OperationContext returns OperationContext
	 *
	 * Constraint:
	 *     (classname=[AllClass|ID] constrains=OperationConstraints)
	 */
	protected void sequence_OperationContext(ISerializationContext context, OperationContext semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UmlPackage.Literals.CONTEXTS_TYPE__CLASSNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UmlPackage.Literals.CONTEXTS_TYPE__CLASSNAME));
			if (transientValues.isValueTransient(semanticObject, UmlPackage.Literals.OPERATION_CONTEXT__CONSTRAINS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UmlPackage.Literals.OPERATION_CONTEXT__CONSTRAINS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationContextAccess().getClassnameAllClassIDTerminalRuleCall_1_0_1(), semanticObject.eGet(UmlPackage.Literals.CONTEXTS_TYPE__CLASSNAME, false));
		feeder.accept(grammarAccess.getOperationContextAccess().getConstrainsOperationConstraintsParserRuleCall_2_0(), semanticObject.getConstrains());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OperationDeclaration returns OperationDeclaration
	 *
	 * Constraint:
	 *     (name=ID ownedParameter+=OwnedParameter* returnType=SimpleTypes?)
	 */
	protected void sequence_OperationDeclaration(ISerializationContext context, OperationDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OwnedLiteral returns OwnedLiteral
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_OwnedLiteral(ISerializationContext context, OwnedLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UmlPackage.Literals.OWNED_LITERAL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UmlPackage.Literals.OWNED_LITERAL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOwnedLiteralAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConditionType returns Postcondition
	 *     Postcondition returns Postcondition
	 *
	 * Constraint:
	 *     (name=ID? oclexpression=OCLExpression)
	 */
	protected void sequence_Postcondition(ISerializationContext context, Postcondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConditionType returns Precondition
	 *     Precondition returns Precondition
	 *
	 * Constraint:
	 *     (name=ID? oclexpression=OCLExpression)
	 */
	protected void sequence_Precondition(ISerializationContext context, Precondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleTypes returns SimpleTypes
	 *
	 * Constraint:
	 *     referended=[AllClass|ID]
	 */
	protected void sequence_SimpleTypes(ISerializationContext context, SimpleTypes semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UmlPackage.Literals.SIMPLE_TYPES__REFERENDED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UmlPackage.Literals.SIMPLE_TYPES__REFERENDED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSimpleTypesAccess().getReferendedAllClassIDTerminalRuleCall_1_0_1(), semanticObject.eGet(UmlPackage.Literals.SIMPLE_TYPES__REFERENDED, false));
		feeder.finish();
	}
	
	
}
