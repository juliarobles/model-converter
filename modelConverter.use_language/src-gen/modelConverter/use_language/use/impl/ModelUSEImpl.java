/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.use.impl;

import java.util.Collection;

import modelConverter.use_language.use.ConstrainsGeneral;
import modelConverter.use_language.use.ModelUSE;
import modelConverter.use_language.use.Type;
import modelConverter.use_language.use.UsePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model USE</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link modelConverter.use_language.use.impl.ModelUSEImpl#getName <em>Name</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.ModelUSEImpl#getEnums <em>Enums</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.ModelUSEImpl#getPackagedElement <em>Packaged Element</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.ModelUSEImpl#getConstraints <em>Constraints</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelUSEImpl extends MinimalEObjectImpl.Container implements ModelUSE
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getEnums() <em>Enums</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnums()
   * @generated
   * @ordered
   */
  protected EList<modelConverter.use_language.use.Enum> enums;

  /**
   * The cached value of the '{@link #getPackagedElement() <em>Packaged Element</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPackagedElement()
   * @generated
   * @ordered
   */
  protected EList<Type> packagedElement;

  /**
   * The cached value of the '{@link #getConstraints() <em>Constraints</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraints()
   * @generated
   * @ordered
   */
  protected ConstrainsGeneral constraints;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelUSEImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UsePackage.Literals.MODEL_USE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.MODEL_USE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<modelConverter.use_language.use.Enum> getEnums()
  {
    if (enums == null)
    {
      enums = new EObjectContainmentEList<modelConverter.use_language.use.Enum>(modelConverter.use_language.use.Enum.class, this, UsePackage.MODEL_USE__ENUMS);
    }
    return enums;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Type> getPackagedElement()
  {
    if (packagedElement == null)
    {
      packagedElement = new EObjectContainmentEList<Type>(Type.class, this, UsePackage.MODEL_USE__PACKAGED_ELEMENT);
    }
    return packagedElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstrainsGeneral getConstraints()
  {
    return constraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstraints(ConstrainsGeneral newConstraints, NotificationChain msgs)
  {
    ConstrainsGeneral oldConstraints = constraints;
    constraints = newConstraints;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.MODEL_USE__CONSTRAINTS, oldConstraints, newConstraints);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstraints(ConstrainsGeneral newConstraints)
  {
    if (newConstraints != constraints)
    {
      NotificationChain msgs = null;
      if (constraints != null)
        msgs = ((InternalEObject)constraints).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.MODEL_USE__CONSTRAINTS, null, msgs);
      if (newConstraints != null)
        msgs = ((InternalEObject)newConstraints).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.MODEL_USE__CONSTRAINTS, null, msgs);
      msgs = basicSetConstraints(newConstraints, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.MODEL_USE__CONSTRAINTS, newConstraints, newConstraints));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UsePackage.MODEL_USE__ENUMS:
        return ((InternalEList<?>)getEnums()).basicRemove(otherEnd, msgs);
      case UsePackage.MODEL_USE__PACKAGED_ELEMENT:
        return ((InternalEList<?>)getPackagedElement()).basicRemove(otherEnd, msgs);
      case UsePackage.MODEL_USE__CONSTRAINTS:
        return basicSetConstraints(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UsePackage.MODEL_USE__NAME:
        return getName();
      case UsePackage.MODEL_USE__ENUMS:
        return getEnums();
      case UsePackage.MODEL_USE__PACKAGED_ELEMENT:
        return getPackagedElement();
      case UsePackage.MODEL_USE__CONSTRAINTS:
        return getConstraints();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UsePackage.MODEL_USE__NAME:
        setName((String)newValue);
        return;
      case UsePackage.MODEL_USE__ENUMS:
        getEnums().clear();
        getEnums().addAll((Collection<? extends modelConverter.use_language.use.Enum>)newValue);
        return;
      case UsePackage.MODEL_USE__PACKAGED_ELEMENT:
        getPackagedElement().clear();
        getPackagedElement().addAll((Collection<? extends Type>)newValue);
        return;
      case UsePackage.MODEL_USE__CONSTRAINTS:
        setConstraints((ConstrainsGeneral)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.MODEL_USE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case UsePackage.MODEL_USE__ENUMS:
        getEnums().clear();
        return;
      case UsePackage.MODEL_USE__PACKAGED_ELEMENT:
        getPackagedElement().clear();
        return;
      case UsePackage.MODEL_USE__CONSTRAINTS:
        setConstraints((ConstrainsGeneral)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.MODEL_USE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case UsePackage.MODEL_USE__ENUMS:
        return enums != null && !enums.isEmpty();
      case UsePackage.MODEL_USE__PACKAGED_ELEMENT:
        return packagedElement != null && !packagedElement.isEmpty();
      case UsePackage.MODEL_USE__CONSTRAINTS:
        return constraints != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ModelUSEImpl
