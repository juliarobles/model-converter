/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.use.impl;

import modelConverter.use_language.use.AllTypes;
import modelConverter.use_language.use.Attribute;
import modelConverter.use_language.use.ExpCS;
import modelConverter.use_language.use.UsePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Attribute</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link modelConverter.use_language.use.impl.AttributeImpl#getName <em>Name</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.AttributeImpl#getType <em>Type</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.AttributeImpl#getInitOCL <em>Init OCL</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.AttributeImpl#getDeriveOCL <em>Derive OCL</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AttributeImpl extends MinimalEObjectImpl.Container implements Attribute
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected AllTypes type;

  /**
   * The cached value of the '{@link #getInitOCL() <em>Init OCL</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitOCL()
   * @generated
   * @ordered
   */
  protected ExpCS initOCL;

  /**
   * The cached value of the '{@link #getDeriveOCL() <em>Derive OCL</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeriveOCL()
   * @generated
   * @ordered
   */
  protected ExpCS deriveOCL;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AttributeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UsePackage.Literals.ATTRIBUTE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.ATTRIBUTE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AllTypes getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(AllTypes newType, NotificationChain msgs)
  {
    AllTypes oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.ATTRIBUTE__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(AllTypes newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.ATTRIBUTE__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.ATTRIBUTE__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.ATTRIBUTE__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpCS getInitOCL()
  {
    return initOCL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInitOCL(ExpCS newInitOCL, NotificationChain msgs)
  {
    ExpCS oldInitOCL = initOCL;
    initOCL = newInitOCL;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.ATTRIBUTE__INIT_OCL, oldInitOCL, newInitOCL);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInitOCL(ExpCS newInitOCL)
  {
    if (newInitOCL != initOCL)
    {
      NotificationChain msgs = null;
      if (initOCL != null)
        msgs = ((InternalEObject)initOCL).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.ATTRIBUTE__INIT_OCL, null, msgs);
      if (newInitOCL != null)
        msgs = ((InternalEObject)newInitOCL).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.ATTRIBUTE__INIT_OCL, null, msgs);
      msgs = basicSetInitOCL(newInitOCL, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.ATTRIBUTE__INIT_OCL, newInitOCL, newInitOCL));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpCS getDeriveOCL()
  {
    return deriveOCL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeriveOCL(ExpCS newDeriveOCL, NotificationChain msgs)
  {
    ExpCS oldDeriveOCL = deriveOCL;
    deriveOCL = newDeriveOCL;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.ATTRIBUTE__DERIVE_OCL, oldDeriveOCL, newDeriveOCL);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDeriveOCL(ExpCS newDeriveOCL)
  {
    if (newDeriveOCL != deriveOCL)
    {
      NotificationChain msgs = null;
      if (deriveOCL != null)
        msgs = ((InternalEObject)deriveOCL).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.ATTRIBUTE__DERIVE_OCL, null, msgs);
      if (newDeriveOCL != null)
        msgs = ((InternalEObject)newDeriveOCL).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.ATTRIBUTE__DERIVE_OCL, null, msgs);
      msgs = basicSetDeriveOCL(newDeriveOCL, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.ATTRIBUTE__DERIVE_OCL, newDeriveOCL, newDeriveOCL));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UsePackage.ATTRIBUTE__TYPE:
        return basicSetType(null, msgs);
      case UsePackage.ATTRIBUTE__INIT_OCL:
        return basicSetInitOCL(null, msgs);
      case UsePackage.ATTRIBUTE__DERIVE_OCL:
        return basicSetDeriveOCL(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UsePackage.ATTRIBUTE__NAME:
        return getName();
      case UsePackage.ATTRIBUTE__TYPE:
        return getType();
      case UsePackage.ATTRIBUTE__INIT_OCL:
        return getInitOCL();
      case UsePackage.ATTRIBUTE__DERIVE_OCL:
        return getDeriveOCL();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UsePackage.ATTRIBUTE__NAME:
        setName((String)newValue);
        return;
      case UsePackage.ATTRIBUTE__TYPE:
        setType((AllTypes)newValue);
        return;
      case UsePackage.ATTRIBUTE__INIT_OCL:
        setInitOCL((ExpCS)newValue);
        return;
      case UsePackage.ATTRIBUTE__DERIVE_OCL:
        setDeriveOCL((ExpCS)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.ATTRIBUTE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case UsePackage.ATTRIBUTE__TYPE:
        setType((AllTypes)null);
        return;
      case UsePackage.ATTRIBUTE__INIT_OCL:
        setInitOCL((ExpCS)null);
        return;
      case UsePackage.ATTRIBUTE__DERIVE_OCL:
        setDeriveOCL((ExpCS)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.ATTRIBUTE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case UsePackage.ATTRIBUTE__TYPE:
        return type != null;
      case UsePackage.ATTRIBUTE__INIT_OCL:
        return initOCL != null;
      case UsePackage.ATTRIBUTE__DERIVE_OCL:
        return deriveOCL != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //AttributeImpl
