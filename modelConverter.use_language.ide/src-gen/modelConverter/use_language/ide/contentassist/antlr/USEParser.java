/*
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import modelConverter.use_language.ide.contentassist.antlr.internal.InternalUSEParser;
import modelConverter.use_language.services.USEGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class USEParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(USEGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, USEGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMultiplicityAccess().getMinValueAlternatives_0_0(), "rule__Multiplicity__MinValueAlternatives_0_0");
			builder.put(grammarAccess.getMultiplicityAccess().getMaxValueAlternatives_1_1_0(), "rule__Multiplicity__MaxValueAlternatives_1_1_0");
			builder.put(grammarAccess.getMultiplicityAccess().getMinValueAlternatives_2_1_0(), "rule__Multiplicity__MinValueAlternatives_2_1_0");
			builder.put(grammarAccess.getMultiplicityAccess().getMaxValueAlternatives_2_2_1_0(), "rule__Multiplicity__MaxValueAlternatives_2_2_1_0");
			builder.put(grammarAccess.getIntToStringAccess().getAlternatives(), "rule__IntToString__Alternatives");
			builder.put(grammarAccess.getDefaultTypeAccess().getAlternatives(), "rule__DefaultType__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getAllClassAccess().getAlternatives(), "rule__AllClass__Alternatives");
			builder.put(grammarAccess.getSimpleTypesAccess().getAlternatives(), "rule__SimpleTypes__Alternatives");
			builder.put(grammarAccess.getAssociationAccess().getTypeAssociationAlternatives_0_0(), "rule__Association__TypeAssociationAlternatives_0_0");
			builder.put(grammarAccess.getOperationTypeAccess().getAlternatives(), "rule__OperationType__Alternatives");
			builder.put(grammarAccess.getContextsTypeAccess().getAlternatives(), "rule__ContextsType__Alternatives");
			builder.put(grammarAccess.getConditionTypeAccess().getAlternatives(), "rule__ConditionType__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getModelAccess().getGroup_2(), "rule__Model__Group_2__0");
			builder.put(grammarAccess.getMultiplicityAccess().getGroup(), "rule__Multiplicity__Group__0");
			builder.put(grammarAccess.getMultiplicityAccess().getGroup_1(), "rule__Multiplicity__Group_1__0");
			builder.put(grammarAccess.getMultiplicityAccess().getGroup_2(), "rule__Multiplicity__Group_2__0");
			builder.put(grammarAccess.getMultiplicityAccess().getGroup_2_2(), "rule__Multiplicity__Group_2_2__0");
			builder.put(grammarAccess.getEnumAccess().getGroup(), "rule__Enum__Group__0");
			builder.put(grammarAccess.getEnumElementAccess().getGroup(), "rule__EnumElement__Group__0");
			builder.put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
			builder.put(grammarAccess.getClassAccess().getGroup_3(), "rule__Class__Group_3__0");
			builder.put(grammarAccess.getGeneralizationAccess().getGroup(), "rule__Generalization__Group__0");
			builder.put(grammarAccess.getAssociationAccess().getGroup(), "rule__Association__Group__0");
			builder.put(grammarAccess.getAssociationEndAccess().getGroup(), "rule__AssociationEnd__Group__0");
			builder.put(grammarAccess.getAssociationEndAccess().getGroup_4(), "rule__AssociationEnd__Group_4__0");
			builder.put(grammarAccess.getAssociationClassAccess().getGroup(), "rule__AssociationClass__Group__0");
			builder.put(grammarAccess.getAssociationClassAccess().getGroup_3(), "rule__AssociationClass__Group_3__0");
			builder.put(grammarAccess.getAttributesBaseAccess().getGroup(), "rule__AttributesBase__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getOperationsBaseAccess().getGroup(), "rule__OperationsBase__Group__0");
			builder.put(grammarAccess.getOperationQueryAccess().getGroup(), "rule__OperationQuery__Group__0");
			builder.put(grammarAccess.getOperationComplexAccess().getGroup(), "rule__OperationComplex__Group__0");
			builder.put(grammarAccess.getOperationComplexAccess().getGroup_1(), "rule__OperationComplex__Group_1__0");
			builder.put(grammarAccess.getOperationDeclarationAccess().getGroup(), "rule__OperationDeclaration__Group__0");
			builder.put(grammarAccess.getOperationDeclarationAccess().getGroup_4(), "rule__OperationDeclaration__Group_4__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getConstraintsBaseAccess().getGroup(), "rule__ConstraintsBase__Group__0");
			builder.put(grammarAccess.getConstrainsGeneralAccess().getGroup(), "rule__ConstrainsGeneral__Group__0");
			builder.put(grammarAccess.getInvariantContextAccess().getGroup(), "rule__InvariantContext__Group__0");
			builder.put(grammarAccess.getInvariantContextAccess().getGroup_1(), "rule__InvariantContext__Group_1__0");
			builder.put(grammarAccess.getInvariantDefinitionAccess().getGroup(), "rule__InvariantDefinition__Group__0");
			builder.put(grammarAccess.getOperationContextAccess().getGroup(), "rule__OperationContext__Group__0");
			builder.put(grammarAccess.getOperationConstraintsAccess().getGroup(), "rule__OperationConstraints__Group__0");
			builder.put(grammarAccess.getPreconditionAccess().getGroup(), "rule__Precondition__Group__0");
			builder.put(grammarAccess.getPostconditionAccess().getGroup(), "rule__Postcondition__Group__0");
			builder.put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
			builder.put(grammarAccess.getModelAccess().getEnumsAssignment_2_0(), "rule__Model__EnumsAssignment_2_0");
			builder.put(grammarAccess.getModelAccess().getPackagedElementAssignment_2_1(), "rule__Model__PackagedElementAssignment_2_1");
			builder.put(grammarAccess.getModelAccess().getConstraintsAssignment_2_2(), "rule__Model__ConstraintsAssignment_2_2");
			builder.put(grammarAccess.getMultiplicityAccess().getMinValueAssignment_0(), "rule__Multiplicity__MinValueAssignment_0");
			builder.put(grammarAccess.getMultiplicityAccess().getMaxValueAssignment_1_1(), "rule__Multiplicity__MaxValueAssignment_1_1");
			builder.put(grammarAccess.getMultiplicityAccess().getMinValueAssignment_2_1(), "rule__Multiplicity__MinValueAssignment_2_1");
			builder.put(grammarAccess.getMultiplicityAccess().getMaxValueAssignment_2_2_1(), "rule__Multiplicity__MaxValueAssignment_2_2_1");
			builder.put(grammarAccess.getEnumAccess().getNameAssignment_1(), "rule__Enum__NameAssignment_1");
			builder.put(grammarAccess.getEnumAccess().getElementsAssignment_3(), "rule__Enum__ElementsAssignment_3");
			builder.put(grammarAccess.getClassAccess().getAbstractAssignment_0(), "rule__Class__AbstractAssignment_0");
			builder.put(grammarAccess.getClassAccess().getNameAssignment_2(), "rule__Class__NameAssignment_2");
			builder.put(grammarAccess.getClassAccess().getGeneralizationAssignment_3_1(), "rule__Class__GeneralizationAssignment_3_1");
			builder.put(grammarAccess.getClassAccess().getAttributesAssignment_4(), "rule__Class__AttributesAssignment_4");
			builder.put(grammarAccess.getClassAccess().getOperationsAssignment_5(), "rule__Class__OperationsAssignment_5");
			builder.put(grammarAccess.getClassAccess().getConstraintsAssignment_6(), "rule__Class__ConstraintsAssignment_6");
			builder.put(grammarAccess.getGeneralizationAccess().getGeneralAssignment_0(), "rule__Generalization__GeneralAssignment_0");
			builder.put(grammarAccess.getSimpleTypesAccess().getDefaultTypeAssignment_0(), "rule__SimpleTypes__DefaultTypeAssignment_0");
			builder.put(grammarAccess.getSimpleTypesAccess().getReferendedAssignment_1(), "rule__SimpleTypes__ReferendedAssignment_1");
			builder.put(grammarAccess.getAssociationAccess().getTypeAssociationAssignment_0(), "rule__Association__TypeAssociationAssignment_0");
			builder.put(grammarAccess.getAssociationAccess().getNameAssignment_1(), "rule__Association__NameAssignment_1");
			builder.put(grammarAccess.getAssociationAccess().getAssociationEndsAssignment_3(), "rule__Association__AssociationEndsAssignment_3");
			builder.put(grammarAccess.getAssociationEndAccess().getTypeAssignment_0(), "rule__AssociationEnd__TypeAssignment_0");
			builder.put(grammarAccess.getAssociationEndAccess().getMulAssignment_2(), "rule__AssociationEnd__MulAssignment_2");
			builder.put(grammarAccess.getAssociationEndAccess().getRoleAssignment_4_1(), "rule__AssociationEnd__RoleAssignment_4_1");
			builder.put(grammarAccess.getAssociationEndAccess().getOrderedAssignment_5(), "rule__AssociationEnd__OrderedAssignment_5");
			builder.put(grammarAccess.getAssociationClassAccess().getAbstractAssignment_0(), "rule__AssociationClass__AbstractAssignment_0");
			builder.put(grammarAccess.getAssociationClassAccess().getNameAssignment_2(), "rule__AssociationClass__NameAssignment_2");
			builder.put(grammarAccess.getAssociationClassAccess().getGeneralizationAssignment_3_1(), "rule__AssociationClass__GeneralizationAssignment_3_1");
			builder.put(grammarAccess.getAssociationClassAccess().getAssociationEndsAssignment_5(), "rule__AssociationClass__AssociationEndsAssignment_5");
			builder.put(grammarAccess.getAssociationClassAccess().getAttributesAssignment_6(), "rule__AssociationClass__AttributesAssignment_6");
			builder.put(grammarAccess.getAssociationClassAccess().getOperationsAssignment_7(), "rule__AssociationClass__OperationsAssignment_7");
			builder.put(grammarAccess.getAssociationClassAccess().getConstraintsAssignment_8(), "rule__AssociationClass__ConstraintsAssignment_8");
			builder.put(grammarAccess.getAttributesBaseAccess().getAttributesAssignment_1(), "rule__AttributesBase__AttributesAssignment_1");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
			builder.put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
			builder.put(grammarAccess.getOperationsBaseAccess().getOperationsAssignment_1(), "rule__OperationsBase__OperationsAssignment_1");
			builder.put(grammarAccess.getOperationQueryAccess().getOperationDeclarationAssignment_0(), "rule__OperationQuery__OperationDeclarationAssignment_0");
			builder.put(grammarAccess.getOperationQueryAccess().getOperationbodyAssignment_2(), "rule__OperationQuery__OperationbodyAssignment_2");
			builder.put(grammarAccess.getOperationQueryAccess().getConditionsAssignment_3(), "rule__OperationQuery__ConditionsAssignment_3");
			builder.put(grammarAccess.getOperationComplexAccess().getOperationDeclarationAssignment_0(), "rule__OperationComplex__OperationDeclarationAssignment_0");
			builder.put(grammarAccess.getOperationComplexAccess().getOperationbodyAssignment_1_1(), "rule__OperationComplex__OperationbodyAssignment_1_1");
			builder.put(grammarAccess.getOperationComplexAccess().getConditionsAssignment_2(), "rule__OperationComplex__ConditionsAssignment_2");
			builder.put(grammarAccess.getOperationDeclarationAccess().getNameAssignment_0(), "rule__OperationDeclaration__NameAssignment_0");
			builder.put(grammarAccess.getOperationDeclarationAccess().getParametersAssignment_2(), "rule__OperationDeclaration__ParametersAssignment_2");
			builder.put(grammarAccess.getOperationDeclarationAccess().getReturnTypeAssignment_4_1(), "rule__OperationDeclaration__ReturnTypeAssignment_4_1");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
			builder.put(grammarAccess.getConstraintsBaseAccess().getInvariantsAssignment_1(), "rule__ConstraintsBase__InvariantsAssignment_1");
			builder.put(grammarAccess.getConstrainsGeneralAccess().getContextsAssignment_1(), "rule__ConstrainsGeneral__ContextsAssignment_1");
			builder.put(grammarAccess.getInvariantContextAccess().getVariablenameAssignment_1_0(), "rule__InvariantContext__VariablenameAssignment_1_0");
			builder.put(grammarAccess.getInvariantContextAccess().getClassnameAssignment_2(), "rule__InvariantContext__ClassnameAssignment_2");
			builder.put(grammarAccess.getInvariantContextAccess().getInvariantsAssignment_3(), "rule__InvariantContext__InvariantsAssignment_3");
			builder.put(grammarAccess.getInvariantDefinitionAccess().getNameAssignment_1(), "rule__InvariantDefinition__NameAssignment_1");
			builder.put(grammarAccess.getInvariantDefinitionAccess().getOclexpressionAssignment_3(), "rule__InvariantDefinition__OclexpressionAssignment_3");
			builder.put(grammarAccess.getOperationContextAccess().getClassnameAssignment_1(), "rule__OperationContext__ClassnameAssignment_1");
			builder.put(grammarAccess.getOperationContextAccess().getConstrainsAssignment_2(), "rule__OperationContext__ConstrainsAssignment_2");
			builder.put(grammarAccess.getOperationConstraintsAccess().getOperationDeclarationAssignment_1(), "rule__OperationConstraints__OperationDeclarationAssignment_1");
			builder.put(grammarAccess.getOperationConstraintsAccess().getConditionsAssignment_2(), "rule__OperationConstraints__ConditionsAssignment_2");
			builder.put(grammarAccess.getPreconditionAccess().getNameAssignment_1(), "rule__Precondition__NameAssignment_1");
			builder.put(grammarAccess.getPreconditionAccess().getOclexpressionAssignment_3(), "rule__Precondition__OclexpressionAssignment_3");
			builder.put(grammarAccess.getPostconditionAccess().getNameAssignment_1(), "rule__Postcondition__NameAssignment_1");
			builder.put(grammarAccess.getPostconditionAccess().getOclexpressionAssignment_3(), "rule__Postcondition__OclexpressionAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private USEGrammarAccess grammarAccess;

	@Override
	protected InternalUSEParser createParser() {
		InternalUSEParser result = new InternalUSEParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public USEGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(USEGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
