/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.use.impl;

import java.util.Collection;

import modelConverter.use_language.use.ExpCS;
import modelConverter.use_language.use.SquareBracketedClauseCS;
import modelConverter.use_language.use.UsePackage;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Square Bracketed Clause CS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link modelConverter.use_language.use.impl.SquareBracketedClauseCSImpl#getOwnedTerms <em>Owned Terms</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SquareBracketedClauseCSImpl extends MinimalEObjectImpl.Container implements SquareBracketedClauseCS
{
  /**
   * The cached value of the '{@link #getOwnedTerms() <em>Owned Terms</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedTerms()
   * @generated
   * @ordered
   */
  protected EList<ExpCS> ownedTerms;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SquareBracketedClauseCSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UsePackage.Literals.SQUARE_BRACKETED_CLAUSE_CS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ExpCS> getOwnedTerms()
  {
    if (ownedTerms == null)
    {
      ownedTerms = new EObjectContainmentEList<ExpCS>(ExpCS.class, this, UsePackage.SQUARE_BRACKETED_CLAUSE_CS__OWNED_TERMS);
    }
    return ownedTerms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UsePackage.SQUARE_BRACKETED_CLAUSE_CS__OWNED_TERMS:
        return ((InternalEList<?>)getOwnedTerms()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UsePackage.SQUARE_BRACKETED_CLAUSE_CS__OWNED_TERMS:
        return getOwnedTerms();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UsePackage.SQUARE_BRACKETED_CLAUSE_CS__OWNED_TERMS:
        getOwnedTerms().clear();
        getOwnedTerms().addAll((Collection<? extends ExpCS>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.SQUARE_BRACKETED_CLAUSE_CS__OWNED_TERMS:
        getOwnedTerms().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.SQUARE_BRACKETED_CLAUSE_CS__OWNED_TERMS:
        return ownedTerms != null && !ownedTerms.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SquareBracketedClauseCSImpl
