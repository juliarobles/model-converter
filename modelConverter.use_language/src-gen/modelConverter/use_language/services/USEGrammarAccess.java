/*
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class USEGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEnumsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEnumsEnumParserRuleCall_2_0_0 = (RuleCall)cEnumsAssignment_2_0.eContents().get(0);
		private final Assignment cPackagedElementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPackagedElementTypeParserRuleCall_2_1_0 = (RuleCall)cPackagedElementAssignment_2_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cConstraintsConstrainsGeneralParserRuleCall_2_2_0 = (RuleCall)cConstraintsAssignment_2_2.eContents().get(0);
		
		////-------------PRINCIPAL Y TIPOS---------------
		//Model:
		//    'model' name=ID ((enums += Enum)* (packagedElement += Type)* constraints=(ConstrainsGeneral)?);
		@Override public ParserRule getRule() { return rule; }
		
		//'model' name=ID ((enums += Enum)* (packagedElement += Type)* constraints=(ConstrainsGeneral)?)
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//((enums += Enum)* (packagedElement += Type)* constraints=(ConstrainsGeneral)?)
		public Group getGroup_2() { return cGroup_2; }
		
		//(enums += Enum)*
		public Assignment getEnumsAssignment_2_0() { return cEnumsAssignment_2_0; }
		
		//Enum
		public RuleCall getEnumsEnumParserRuleCall_2_0_0() { return cEnumsEnumParserRuleCall_2_0_0; }
		
		//(packagedElement += Type)*
		public Assignment getPackagedElementAssignment_2_1() { return cPackagedElementAssignment_2_1; }
		
		//Type
		public RuleCall getPackagedElementTypeParserRuleCall_2_1_0() { return cPackagedElementTypeParserRuleCall_2_1_0; }
		
		//constraints=(ConstrainsGeneral)?
		public Assignment getConstraintsAssignment_2_2() { return cConstraintsAssignment_2_2; }
		
		//(ConstrainsGeneral)
		public RuleCall getConstraintsConstrainsGeneralParserRuleCall_2_2_0() { return cConstraintsConstrainsGeneralParserRuleCall_2_2_0; }
	}
	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.Multiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMinValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cMinValueAlternatives_0_0 = (Alternatives)cMinValueAssignment_0.eContents().get(0);
		private final Keyword cMinValueAsteriskKeyword_0_0_0 = (Keyword)cMinValueAlternatives_0_0.eContents().get(0);
		private final RuleCall cMinValueIntToStringParserRuleCall_0_0_1 = (RuleCall)cMinValueAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMaxValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cMaxValueAlternatives_1_1_0 = (Alternatives)cMaxValueAssignment_1_1.eContents().get(0);
		private final Keyword cMaxValueAsteriskKeyword_1_1_0_0 = (Keyword)cMaxValueAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cMaxValueIntToStringParserRuleCall_1_1_0_1 = (RuleCall)cMaxValueAlternatives_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMinValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cMinValueAlternatives_2_1_0 = (Alternatives)cMinValueAssignment_2_1.eContents().get(0);
		private final Keyword cMinValueAsteriskKeyword_2_1_0_0 = (Keyword)cMinValueAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cMinValueIntToStringParserRuleCall_2_1_0_1 = (RuleCall)cMinValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cMaxValueAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final Alternatives cMaxValueAlternatives_2_2_1_0 = (Alternatives)cMaxValueAssignment_2_2_1.eContents().get(0);
		private final Keyword cMaxValueAsteriskKeyword_2_2_1_0_0 = (Keyword)cMaxValueAlternatives_2_2_1_0.eContents().get(0);
		private final RuleCall cMaxValueIntToStringParserRuleCall_2_2_1_0_1 = (RuleCall)cMaxValueAlternatives_2_2_1_0.eContents().get(1);
		
		//Multiplicity:
		//    minValue+=('*' | IntToString) ('..' maxValue+=('*' | IntToString))? (',' minValue+=('*' | IntToString) ('..' maxValue+=('*' | IntToString))?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//minValue+=('*' | IntToString) ('..' maxValue+=('*' | IntToString))? (',' minValue+=('*' | IntToString) ('..' maxValue+=('*' | IntToString))?)*
		public Group getGroup() { return cGroup; }
		
		//minValue+=('*' | IntToString)
		public Assignment getMinValueAssignment_0() { return cMinValueAssignment_0; }
		
		//('*' | IntToString)
		public Alternatives getMinValueAlternatives_0_0() { return cMinValueAlternatives_0_0; }
		
		//'*'
		public Keyword getMinValueAsteriskKeyword_0_0_0() { return cMinValueAsteriskKeyword_0_0_0; }
		
		//IntToString
		public RuleCall getMinValueIntToStringParserRuleCall_0_0_1() { return cMinValueIntToStringParserRuleCall_0_0_1; }
		
		//('..' maxValue+=('*' | IntToString))?
		public Group getGroup_1() { return cGroup_1; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }
		
		//maxValue+=('*' | IntToString)
		public Assignment getMaxValueAssignment_1_1() { return cMaxValueAssignment_1_1; }
		
		//('*' | IntToString)
		public Alternatives getMaxValueAlternatives_1_1_0() { return cMaxValueAlternatives_1_1_0; }
		
		//'*'
		public Keyword getMaxValueAsteriskKeyword_1_1_0_0() { return cMaxValueAsteriskKeyword_1_1_0_0; }
		
		//IntToString
		public RuleCall getMaxValueIntToStringParserRuleCall_1_1_0_1() { return cMaxValueIntToStringParserRuleCall_1_1_0_1; }
		
		//(',' minValue+=('*' | IntToString) ('..' maxValue+=('*' | IntToString))?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//minValue+=('*' | IntToString)
		public Assignment getMinValueAssignment_2_1() { return cMinValueAssignment_2_1; }
		
		//('*' | IntToString)
		public Alternatives getMinValueAlternatives_2_1_0() { return cMinValueAlternatives_2_1_0; }
		
		//'*'
		public Keyword getMinValueAsteriskKeyword_2_1_0_0() { return cMinValueAsteriskKeyword_2_1_0_0; }
		
		//IntToString
		public RuleCall getMinValueIntToStringParserRuleCall_2_1_0_1() { return cMinValueIntToStringParserRuleCall_2_1_0_1; }
		
		//('..' maxValue+=('*' | IntToString))?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2_2_0() { return cFullStopFullStopKeyword_2_2_0; }
		
		//maxValue+=('*' | IntToString)
		public Assignment getMaxValueAssignment_2_2_1() { return cMaxValueAssignment_2_2_1; }
		
		//('*' | IntToString)
		public Alternatives getMaxValueAlternatives_2_2_1_0() { return cMaxValueAlternatives_2_2_1_0; }
		
		//'*'
		public Keyword getMaxValueAsteriskKeyword_2_2_1_0_0() { return cMaxValueAsteriskKeyword_2_2_1_0_0; }
		
		//IntToString
		public RuleCall getMaxValueIntToStringParserRuleCall_2_2_1_0_1() { return cMaxValueIntToStringParserRuleCall_2_2_1_0_1; }
	}
	public class IntToStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.IntToString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDigitZeroKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDigitOneKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDigitTwoKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDigitThreeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDigitFourKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDigitFiveKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDigitSixKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDigitSevenKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cDigitEightKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDigitNineKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//IntToString:
		//    ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')+;
		@Override public ParserRule getRule() { return rule; }
		
		//('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'0'
		public Keyword getDigitZeroKeyword_0() { return cDigitZeroKeyword_0; }
		
		//'1'
		public Keyword getDigitOneKeyword_1() { return cDigitOneKeyword_1; }
		
		//'2'
		public Keyword getDigitTwoKeyword_2() { return cDigitTwoKeyword_2; }
		
		//'3'
		public Keyword getDigitThreeKeyword_3() { return cDigitThreeKeyword_3; }
		
		//'4'
		public Keyword getDigitFourKeyword_4() { return cDigitFourKeyword_4; }
		
		//'5'
		public Keyword getDigitFiveKeyword_5() { return cDigitFiveKeyword_5; }
		
		//'6'
		public Keyword getDigitSixKeyword_6() { return cDigitSixKeyword_6; }
		
		//'7'
		public Keyword getDigitSevenKeyword_7() { return cDigitSevenKeyword_7; }
		
		//'8'
		public Keyword getDigitEightKeyword_8() { return cDigitEightKeyword_8; }
		
		//'9'
		public Keyword getDigitNineKeyword_9() { return cDigitNineKeyword_9; }
	}
	public class DefaultTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.DefaultType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntegerKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRealKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBooleanKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//DefaultType:
		//    'Integer' | 'String' | 'Real' | 'Boolean';
		@Override public ParserRule getRule() { return rule; }
		
		//'Integer' | 'String' | 'Real' | 'Boolean'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Integer'
		public Keyword getIntegerKeyword_0() { return cIntegerKeyword_0; }
		
		//'String'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//'Real'
		public Keyword getRealKeyword_2() { return cRealKeyword_2; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_3() { return cBooleanKeyword_3; }
	}
	public class AllTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.AllTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollectionTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleTypesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AllTypes:
		//    CollectionType | SimpleTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//CollectionType | SimpleTypes
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CollectionType
		public RuleCall getCollectionTypeParserRuleCall_0() { return cCollectionTypeParserRuleCall_0; }
		
		//SimpleTypes
		public RuleCall getSimpleTypesParserRuleCall_1() { return cSimpleTypesParserRuleCall_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssociationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssociationClassParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//    Class | Association | AssociationClass;
		@Override public ParserRule getRule() { return rule; }
		
		//Class | Association | AssociationClass
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }
		
		//Association
		public RuleCall getAssociationParserRuleCall_1() { return cAssociationParserRuleCall_1; }
		
		//AssociationClass
		public RuleCall getAssociationClassParserRuleCall_2() { return cAssociationClassParserRuleCall_2; }
	}
	public class CollectionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.CollectionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCollectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCollectionAlternatives_0_0 = (Alternatives)cCollectionAssignment_0.eContents().get(0);
		private final Keyword cCollectionSetKeyword_0_0_0 = (Keyword)cCollectionAlternatives_0_0.eContents().get(0);
		private final Keyword cCollectionBagKeyword_0_0_1 = (Keyword)cCollectionAlternatives_0_0.eContents().get(1);
		private final Keyword cCollectionSequenceKeyword_0_0_2 = (Keyword)cCollectionAlternatives_0_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeSimpleTypesParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CollectionType:
		//    collection=('Set' | 'Bag' | 'Sequence') '(' (type+=SimpleTypes)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//collection=('Set' | 'Bag' | 'Sequence') '(' (type+=SimpleTypes)* ')'
		public Group getGroup() { return cGroup; }
		
		//collection=('Set' | 'Bag' | 'Sequence')
		public Assignment getCollectionAssignment_0() { return cCollectionAssignment_0; }
		
		//('Set' | 'Bag' | 'Sequence')
		public Alternatives getCollectionAlternatives_0_0() { return cCollectionAlternatives_0_0; }
		
		//'Set'
		public Keyword getCollectionSetKeyword_0_0_0() { return cCollectionSetKeyword_0_0_0; }
		
		//'Bag'
		public Keyword getCollectionBagKeyword_0_0_1() { return cCollectionBagKeyword_0_0_1; }
		
		//'Sequence'
		public Keyword getCollectionSequenceKeyword_0_0_2() { return cCollectionSequenceKeyword_0_0_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(type+=SimpleTypes)*
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//SimpleTypes
		public RuleCall getTypeSimpleTypesParserRuleCall_2_0() { return cTypeSimpleTypesParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AllClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.AllClass");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssociationClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AllClass:
		//    Class|AssociationClass;
		@Override public ParserRule getRule() { return rule; }
		
		//Class|AssociationClass
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }
		
		//AssociationClass
		public RuleCall getAssociationClassParserRuleCall_1() { return cAssociationClassParserRuleCall_1; }
	}
	public class AllClassAndEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.AllClassAndEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAllClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AllClassAndEnum:
		//    AllClass | Enum;
		@Override public ParserRule getRule() { return rule; }
		
		//AllClass | Enum
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AllClass
		public RuleCall getAllClassParserRuleCall_0() { return cAllClassParserRuleCall_0; }
		
		//Enum
		public RuleCall getEnumParserRuleCall_1() { return cEnumParserRuleCall_1; }
	}
	public class SimpleTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.SimpleTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDefaultTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDefaultTypeDefaultTypeParserRuleCall_0_0 = (RuleCall)cDefaultTypeAssignment_0.eContents().get(0);
		private final Assignment cReferendedAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cReferendedAllClassAndEnumCrossReference_1_0 = (CrossReference)cReferendedAssignment_1.eContents().get(0);
		private final RuleCall cReferendedAllClassAndEnumIDTerminalRuleCall_1_0_1 = (RuleCall)cReferendedAllClassAndEnumCrossReference_1_0.eContents().get(1);
		
		//SimpleTypes:
		//    defaultType=DefaultType | referended=[AllClassAndEnum];
		@Override public ParserRule getRule() { return rule; }
		
		//defaultType=DefaultType | referended=[AllClassAndEnum]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//defaultType=DefaultType
		public Assignment getDefaultTypeAssignment_0() { return cDefaultTypeAssignment_0; }
		
		//DefaultType
		public RuleCall getDefaultTypeDefaultTypeParserRuleCall_0_0() { return cDefaultTypeDefaultTypeParserRuleCall_0_0; }
		
		//referended=[AllClassAndEnum]
		public Assignment getReferendedAssignment_1() { return cReferendedAssignment_1; }
		
		//[AllClassAndEnum]
		public CrossReference getReferendedAllClassAndEnumCrossReference_1_0() { return cReferendedAllClassAndEnumCrossReference_1_0; }
		
		//ID
		public RuleCall getReferendedAllClassAndEnumIDTerminalRuleCall_1_0_1() { return cReferendedAllClassAndEnumIDTerminalRuleCall_1_0_1; }
	}
	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsEnumElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////--------------ENUMERADO--------------
		//Enum:
		//    'enum' (name=ID)? '{' (elements+=EnumElement)+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' (name=ID)? '{' (elements+=EnumElement)+ '}'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//(name=ID)?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(elements+=EnumElement)+
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//EnumElement
		public RuleCall getElementsEnumElementParserRuleCall_3_0() { return cElementsEnumElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EnumElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.EnumElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EnumElement:
		//    ID (',')?;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (',')?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(',')?
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGeneralizationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGeneralizationGeneralizationParserRuleCall_3_1_0 = (RuleCall)cGeneralizationAssignment_3_1.eContents().get(0);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttributesBaseParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Assignment cOperationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperationsOperationsBaseParserRuleCall_5_0 = (RuleCall)cOperationsAssignment_5.eContents().get(0);
		private final Assignment cConstraintsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConstraintsConstraintsBaseParserRuleCall_6_0 = (RuleCall)cConstraintsAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////---------------CLASE-----------------
		//Class:
		//    (abstract?='abstract')? 'class' name=ID ('<' (generalization+=Generalization)+)?
		//        attributes=(AttributesBase)?
		//        operations=(OperationsBase)?
		//        constraints=(ConstraintsBase)?
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//(abstract?='abstract')? 'class' name=ID ('<' (generalization+=Generalization)+)?
		//    attributes=(AttributesBase)?
		//    operations=(OperationsBase)?
		//    constraints=(ConstraintsBase)?
		//'end'
		public Group getGroup() { return cGroup; }
		
		//(abstract?='abstract')?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('<' (generalization+=Generalization)+)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }
		
		//(generalization+=Generalization)+
		public Assignment getGeneralizationAssignment_3_1() { return cGeneralizationAssignment_3_1; }
		
		//Generalization
		public RuleCall getGeneralizationGeneralizationParserRuleCall_3_1_0() { return cGeneralizationGeneralizationParserRuleCall_3_1_0; }
		
		//attributes=(AttributesBase)?
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }
		
		//(AttributesBase)
		public RuleCall getAttributesAttributesBaseParserRuleCall_4_0() { return cAttributesAttributesBaseParserRuleCall_4_0; }
		
		//operations=(OperationsBase)?
		public Assignment getOperationsAssignment_5() { return cOperationsAssignment_5; }
		
		//(OperationsBase)
		public RuleCall getOperationsOperationsBaseParserRuleCall_5_0() { return cOperationsOperationsBaseParserRuleCall_5_0; }
		
		//constraints=(ConstraintsBase)?
		public Assignment getConstraintsAssignment_6() { return cConstraintsAssignment_6; }
		
		//(ConstraintsBase)
		public RuleCall getConstraintsConstraintsBaseParserRuleCall_6_0() { return cConstraintsConstraintsBaseParserRuleCall_6_0; }
		
		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}
	public class GeneralizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.Generalization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGeneralAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cGeneralAllClassCrossReference_0_0 = (CrossReference)cGeneralAssignment_0.eContents().get(0);
		private final RuleCall cGeneralAllClassIDTerminalRuleCall_0_0_1 = (RuleCall)cGeneralAllClassCrossReference_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Generalization:
		//    general=[AllClass] (',')?;
		@Override public ParserRule getRule() { return rule; }
		
		//general=[AllClass] (',')?
		public Group getGroup() { return cGroup; }
		
		//general=[AllClass]
		public Assignment getGeneralAssignment_0() { return cGeneralAssignment_0; }
		
		//[AllClass]
		public CrossReference getGeneralAllClassCrossReference_0_0() { return cGeneralAllClassCrossReference_0_0; }
		
		//ID
		public RuleCall getGeneralAllClassIDTerminalRuleCall_0_0_1() { return cGeneralAllClassIDTerminalRuleCall_0_0_1; }
		
		//(',')?
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssociationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAssociationAlternatives_0_0 = (Alternatives)cTypeAssociationAssignment_0.eContents().get(0);
		private final Keyword cTypeAssociationAssociationKeyword_0_0_0 = (Keyword)cTypeAssociationAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeAssociationAggregationKeyword_0_0_1 = (Keyword)cTypeAssociationAlternatives_0_0.eContents().get(1);
		private final Keyword cTypeAssociationCompositionKeyword_0_0_2 = (Keyword)cTypeAssociationAlternatives_0_0.eContents().get(2);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cBetweenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAssociationEndsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAssociationEndsAssociationEndParserRuleCall_3_0 = (RuleCall)cAssociationEndsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////-----------ASOCIACIONES-------------
		//Association:
		//    typeAssociation=('association' | 'aggregation' | 'composition') name=ID 'between'
		//        (associationEnds+=AssociationEnd)+ 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//typeAssociation=('association' | 'aggregation' | 'composition') name=ID 'between'
		//    (associationEnds+=AssociationEnd)+ 'end'
		public Group getGroup() { return cGroup; }
		
		//typeAssociation=('association' | 'aggregation' | 'composition')
		public Assignment getTypeAssociationAssignment_0() { return cTypeAssociationAssignment_0; }
		
		//('association' | 'aggregation' | 'composition')
		public Alternatives getTypeAssociationAlternatives_0_0() { return cTypeAssociationAlternatives_0_0; }
		
		//'association'
		public Keyword getTypeAssociationAssociationKeyword_0_0_0() { return cTypeAssociationAssociationKeyword_0_0_0; }
		
		//'aggregation'
		public Keyword getTypeAssociationAggregationKeyword_0_0_1() { return cTypeAssociationAggregationKeyword_0_0_1; }
		
		//'composition'
		public Keyword getTypeAssociationCompositionKeyword_0_0_2() { return cTypeAssociationCompositionKeyword_0_0_2; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'between'
		public Keyword getBetweenKeyword_2() { return cBetweenKeyword_2; }
		
		//(associationEnds+=AssociationEnd)+
		public Assignment getAssociationEndsAssignment_3() { return cAssociationEndsAssignment_3; }
		
		//AssociationEnd
		public RuleCall getAssociationEndsAssociationEndParserRuleCall_3_0() { return cAssociationEndsAssociationEndParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class AssociationEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.AssociationEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeAllClassCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeAllClassIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeAllClassCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMulAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMulMultiplicityParserRuleCall_2_0 = (RuleCall)cMulAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRoleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRoleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRoleIDTerminalRuleCall_4_1_0 = (RuleCall)cRoleAssignment_4_1.eContents().get(0);
		private final Assignment cOrderedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cOrderedOrderedKeyword_5_0 = (Keyword)cOrderedAssignment_5.eContents().get(0);
		
		//AssociationEnd:
		//    type=[AllClass] '[' mul=Multiplicity ']' ('role' role=ID)? (ordered?='ordered')?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[AllClass] '[' mul=Multiplicity ']' ('role' role=ID)? (ordered?='ordered')?
		public Group getGroup() { return cGroup; }
		
		//type=[AllClass]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[AllClass]
		public CrossReference getTypeAllClassCrossReference_0_0() { return cTypeAllClassCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeAllClassIDTerminalRuleCall_0_0_1() { return cTypeAllClassIDTerminalRuleCall_0_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//mul=Multiplicity
		public Assignment getMulAssignment_2() { return cMulAssignment_2; }
		
		//Multiplicity
		public RuleCall getMulMultiplicityParserRuleCall_2_0() { return cMulMultiplicityParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//('role' role=ID)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'role'
		public Keyword getRoleKeyword_4_0() { return cRoleKeyword_4_0; }
		
		//role=ID
		public Assignment getRoleAssignment_4_1() { return cRoleAssignment_4_1; }
		
		//ID
		public RuleCall getRoleIDTerminalRuleCall_4_1_0() { return cRoleIDTerminalRuleCall_4_1_0; }
		
		//(ordered?='ordered')?
		public Assignment getOrderedAssignment_5() { return cOrderedAssignment_5; }
		
		//'ordered'
		public Keyword getOrderedOrderedKeyword_5_0() { return cOrderedOrderedKeyword_5_0; }
	}
	public class AssociationClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.AssociationClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cAssociationclassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGeneralizationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGeneralizationGeneralizationParserRuleCall_3_1_0 = (RuleCall)cGeneralizationAssignment_3_1.eContents().get(0);
		private final Keyword cBetweenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAssociationEndsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAssociationEndsAssociationEndParserRuleCall_5_0 = (RuleCall)cAssociationEndsAssignment_5.eContents().get(0);
		private final Assignment cAttributesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAttributesAttributesBaseParserRuleCall_6_0 = (RuleCall)cAttributesAssignment_6.eContents().get(0);
		private final Assignment cOperationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOperationsOperationsBaseParserRuleCall_7_0 = (RuleCall)cOperationsAssignment_7.eContents().get(0);
		private final Assignment cConstraintsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cConstraintsConstraintsBaseParserRuleCall_8_0 = (RuleCall)cConstraintsAssignment_8.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//AssociationClass:
		//    (abstract?='abstract')? 'associationclass' name=ID ('<' (generalization+=Generalization)+)?
		//        'between' (associationEnds+=AssociationEnd)+
		//        attributes=(AttributesBase)?
		//        operations=(OperationsBase)?
		//        constraints=(ConstraintsBase)?
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//(abstract?='abstract')? 'associationclass' name=ID ('<' (generalization+=Generalization)+)?
		//    'between' (associationEnds+=AssociationEnd)+
		//    attributes=(AttributesBase)?
		//    operations=(OperationsBase)?
		//    constraints=(ConstraintsBase)?
		//'end'
		public Group getGroup() { return cGroup; }
		
		//(abstract?='abstract')?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }
		
		//'associationclass'
		public Keyword getAssociationclassKeyword_1() { return cAssociationclassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('<' (generalization+=Generalization)+)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }
		
		//(generalization+=Generalization)+
		public Assignment getGeneralizationAssignment_3_1() { return cGeneralizationAssignment_3_1; }
		
		//Generalization
		public RuleCall getGeneralizationGeneralizationParserRuleCall_3_1_0() { return cGeneralizationGeneralizationParserRuleCall_3_1_0; }
		
		//'between'
		public Keyword getBetweenKeyword_4() { return cBetweenKeyword_4; }
		
		//(associationEnds+=AssociationEnd)+
		public Assignment getAssociationEndsAssignment_5() { return cAssociationEndsAssignment_5; }
		
		//AssociationEnd
		public RuleCall getAssociationEndsAssociationEndParserRuleCall_5_0() { return cAssociationEndsAssociationEndParserRuleCall_5_0; }
		
		//attributes=(AttributesBase)?
		public Assignment getAttributesAssignment_6() { return cAttributesAssignment_6; }
		
		//(AttributesBase)
		public RuleCall getAttributesAttributesBaseParserRuleCall_6_0() { return cAttributesAttributesBaseParserRuleCall_6_0; }
		
		//operations=(OperationsBase)?
		public Assignment getOperationsAssignment_7() { return cOperationsAssignment_7; }
		
		//(OperationsBase)
		public RuleCall getOperationsOperationsBaseParserRuleCall_7_0() { return cOperationsOperationsBaseParserRuleCall_7_0; }
		
		//constraints=(ConstraintsBase)?
		public Assignment getConstraintsAssignment_8() { return cConstraintsAssignment_8; }
		
		//(ConstraintsBase)
		public RuleCall getConstraintsConstraintsBaseParserRuleCall_8_0() { return cConstraintsConstraintsBaseParserRuleCall_8_0; }
		
		//'end'
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}
	public class AttributesBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.AttributesBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		
		////-------------ATRIBUTOS---------------
		//AttributesBase:
		//    'attributes'
		//        (attributes+=Attribute)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'attributes'
		//    (attributes+=Attribute)*
		public Group getGroup() { return cGroup; }
		
		//'attributes'
		public Keyword getAttributesKeyword_0() { return cAttributesKeyword_0; }
		
		//(attributes+=Attribute)*
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_1_0() { return cAttributesAttributeParserRuleCall_1_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeAllTypesParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Attribute:
		//    name=ID ':' type=AllTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=AllTypes
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=AllTypes
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//AllTypes
		public RuleCall getTypeAllTypesParserRuleCall_2_0() { return cTypeAllTypesParserRuleCall_2_0; }
	}
	public class OperationsBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.OperationsBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationsOperationTypeParserRuleCall_1_0 = (RuleCall)cOperationsAssignment_1.eContents().get(0);
		
		////------------OPERACIONES--------------
		//OperationsBase:
		//    'operations'
		//        (operations+=OperationType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'operations'
		//    (operations+=OperationType)*
		public Group getGroup() { return cGroup; }
		
		//'operations'
		public Keyword getOperationsKeyword_0() { return cOperationsKeyword_0; }
		
		//(operations+=OperationType)*
		public Assignment getOperationsAssignment_1() { return cOperationsAssignment_1; }
		
		//OperationType
		public RuleCall getOperationsOperationTypeParserRuleCall_1_0() { return cOperationsOperationTypeParserRuleCall_1_0; }
	}
	public class OperationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.OperationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationComplexParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperationType:
		//    OperationComplex | OperationQuery;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationComplex | OperationQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationComplex
		public RuleCall getOperationComplexParserRuleCall_0() { return cOperationComplexParserRuleCall_0; }
		
		//OperationQuery
		public RuleCall getOperationQueryParserRuleCall_1() { return cOperationQueryParserRuleCall_1; }
	}
	public class OperationQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.OperationQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationDeclarationOperationDeclarationParserRuleCall_0_0 = (RuleCall)cOperationDeclarationAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperationbodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperationbodyOCLExpressionParserRuleCall_2_0 = (RuleCall)cOperationbodyAssignment_2.eContents().get(0);
		private final Assignment cConditionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionsConditionTypeParserRuleCall_3_0 = (RuleCall)cConditionsAssignment_3.eContents().get(0);
		
		//OperationQuery:
		//    operationDeclaration=OperationDeclaration '=' operationbody=OCLExpression (conditions+=ConditionType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//operationDeclaration=OperationDeclaration '=' operationbody=OCLExpression (conditions+=ConditionType)*
		public Group getGroup() { return cGroup; }
		
		//operationDeclaration=OperationDeclaration
		public Assignment getOperationDeclarationAssignment_0() { return cOperationDeclarationAssignment_0; }
		
		//OperationDeclaration
		public RuleCall getOperationDeclarationOperationDeclarationParserRuleCall_0_0() { return cOperationDeclarationOperationDeclarationParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//operationbody=OCLExpression
		public Assignment getOperationbodyAssignment_2() { return cOperationbodyAssignment_2; }
		
		//OCLExpression
		public RuleCall getOperationbodyOCLExpressionParserRuleCall_2_0() { return cOperationbodyOCLExpressionParserRuleCall_2_0; }
		
		//(conditions+=ConditionType)*
		public Assignment getConditionsAssignment_3() { return cConditionsAssignment_3; }
		
		//ConditionType
		public RuleCall getConditionsConditionTypeParserRuleCall_3_0() { return cConditionsConditionTypeParserRuleCall_3_0; }
	}
	public class OperationComplexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.OperationComplex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationDeclarationOperationDeclarationParserRuleCall_0_0 = (RuleCall)cOperationDeclarationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cBeginKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOperationbodyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperationbodyOCLExpressionParserRuleCall_1_1_0 = (RuleCall)cOperationbodyAssignment_1_1.eContents().get(0);
		private final Keyword cEndKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionsConditionTypeParserRuleCall_2_0 = (RuleCall)cConditionsAssignment_2.eContents().get(0);
		
		//OperationComplex:
		//    operationDeclaration=OperationDeclaration ('begin' (operationbody=OCLExpression)? 'end')? (conditions+=ConditionType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//operationDeclaration=OperationDeclaration ('begin' (operationbody=OCLExpression)? 'end')? (conditions+=ConditionType)*
		public Group getGroup() { return cGroup; }
		
		//operationDeclaration=OperationDeclaration
		public Assignment getOperationDeclarationAssignment_0() { return cOperationDeclarationAssignment_0; }
		
		//OperationDeclaration
		public RuleCall getOperationDeclarationOperationDeclarationParserRuleCall_0_0() { return cOperationDeclarationOperationDeclarationParserRuleCall_0_0; }
		
		//('begin' (operationbody=OCLExpression)? 'end')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'begin'
		public Keyword getBeginKeyword_1_0() { return cBeginKeyword_1_0; }
		
		//(operationbody=OCLExpression)?
		public Assignment getOperationbodyAssignment_1_1() { return cOperationbodyAssignment_1_1; }
		
		//OCLExpression
		public RuleCall getOperationbodyOCLExpressionParserRuleCall_1_1_0() { return cOperationbodyOCLExpressionParserRuleCall_1_1_0; }
		
		//'end'
		public Keyword getEndKeyword_1_2() { return cEndKeyword_1_2; }
		
		//(conditions+=ConditionType)*
		public Assignment getConditionsAssignment_2() { return cConditionsAssignment_2; }
		
		//ConditionType
		public RuleCall getConditionsConditionTypeParserRuleCall_2_0() { return cConditionsConditionTypeParserRuleCall_2_0; }
	}
	public class OperationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.OperationDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReturnTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cReturnTypeAllTypesParserRuleCall_4_1_0 = (RuleCall)cReturnTypeAssignment_4_1.eContents().get(0);
		
		//OperationDeclaration:
		//    name=ID '(' (parameters+=Parameter)* ')' (':' returnType=AllTypes)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' (parameters+=Parameter)* ')' (':' returnType=AllTypes)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameters+=Parameter)*
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0() { return cParametersParameterParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//(':' returnType=AllTypes)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//returnType=AllTypes
		public Assignment getReturnTypeAssignment_4_1() { return cReturnTypeAssignment_4_1; }
		
		//AllTypes
		public RuleCall getReturnTypeAllTypesParserRuleCall_4_1_0() { return cReturnTypeAllTypesParserRuleCall_4_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeAllTypesParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parameter:
		//    name=ID ':' type=AllTypes (',')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=AllTypes (',')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=AllTypes
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//AllTypes
		public RuleCall getTypeAllTypesParserRuleCall_2_0() { return cTypeAllTypesParserRuleCall_2_0; }
		
		//(',')?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}
	public class ConstraintsBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.ConstraintsBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInvariantsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInvariantsInvariantDefinitionParserRuleCall_1_0 = (RuleCall)cInvariantsAssignment_1.eContents().get(0);
		
		////------------CONSTRAINTS---------------
		//ConstraintsBase:
		//    'constraints'
		//        (invariants+=InvariantDefinition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'constraints'
		//    (invariants+=InvariantDefinition)*
		public Group getGroup() { return cGroup; }
		
		//'constraints'
		public Keyword getConstraintsKeyword_0() { return cConstraintsKeyword_0; }
		
		//(invariants+=InvariantDefinition)*
		public Assignment getInvariantsAssignment_1() { return cInvariantsAssignment_1; }
		
		//InvariantDefinition
		public RuleCall getInvariantsInvariantDefinitionParserRuleCall_1_0() { return cInvariantsInvariantDefinitionParserRuleCall_1_0; }
	}
	public class ConstrainsGeneralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.ConstrainsGeneral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContextsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContextsContextsTypeParserRuleCall_1_0 = (RuleCall)cContextsAssignment_1.eContents().get(0);
		
		//ConstrainsGeneral:
		//    'constraints'
		//        (contexts+=ContextsType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'constraints'
		//    (contexts+=ContextsType)*
		public Group getGroup() { return cGroup; }
		
		//'constraints'
		public Keyword getConstraintsKeyword_0() { return cConstraintsKeyword_0; }
		
		//(contexts+=ContextsType)*
		public Assignment getContextsAssignment_1() { return cContextsAssignment_1; }
		
		//ContextsType
		public RuleCall getContextsContextsTypeParserRuleCall_1_0() { return cContextsContextsTypeParserRuleCall_1_0; }
	}
	public class ContextsTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.ContextsType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInvariantContextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationContextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ContextsType:
		//    InvariantContext | OperationContext;
		@Override public ParserRule getRule() { return rule; }
		
		//InvariantContext | OperationContext
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InvariantContext
		public RuleCall getInvariantContextParserRuleCall_0() { return cInvariantContextParserRuleCall_0; }
		
		//OperationContext
		public RuleCall getOperationContextParserRuleCall_1() { return cOperationContextParserRuleCall_1; }
	}
	public class InvariantContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.InvariantContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cVariablenameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVariablenameIDTerminalRuleCall_1_0_0 = (RuleCall)cVariablenameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cClassnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cClassnameAllClassCrossReference_2_0 = (CrossReference)cClassnameAssignment_2.eContents().get(0);
		private final RuleCall cClassnameAllClassIDTerminalRuleCall_2_0_1 = (RuleCall)cClassnameAllClassCrossReference_2_0.eContents().get(1);
		private final Assignment cInvariantsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInvariantsInvariantDefinitionParserRuleCall_3_0 = (RuleCall)cInvariantsAssignment_3.eContents().get(0);
		
		//InvariantContext:
		//    'context' (variablename=ID ':')? classname=[AllClass] (invariants+=InvariantDefinition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'context' (variablename=ID ':')? classname=[AllClass] (invariants+=InvariantDefinition)*
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//(variablename=ID ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//variablename=ID
		public Assignment getVariablenameAssignment_1_0() { return cVariablenameAssignment_1_0; }
		
		//ID
		public RuleCall getVariablenameIDTerminalRuleCall_1_0_0() { return cVariablenameIDTerminalRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//classname=[AllClass]
		public Assignment getClassnameAssignment_2() { return cClassnameAssignment_2; }
		
		//[AllClass]
		public CrossReference getClassnameAllClassCrossReference_2_0() { return cClassnameAllClassCrossReference_2_0; }
		
		//ID
		public RuleCall getClassnameAllClassIDTerminalRuleCall_2_0_1() { return cClassnameAllClassIDTerminalRuleCall_2_0_1; }
		
		//(invariants+=InvariantDefinition)*
		public Assignment getInvariantsAssignment_3() { return cInvariantsAssignment_3; }
		
		//InvariantDefinition
		public RuleCall getInvariantsInvariantDefinitionParserRuleCall_3_0() { return cInvariantsInvariantDefinitionParserRuleCall_3_0; }
	}
	public class InvariantDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.InvariantDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOclexpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOclexpressionOCLExpressionParserRuleCall_3_0 = (RuleCall)cOclexpressionAssignment_3.eContents().get(0);
		
		//InvariantDefinition:
		//    'inv' (name=ID)? ':' oclexpression=OCLExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'inv' (name=ID)? ':' oclexpression=OCLExpression
		public Group getGroup() { return cGroup; }
		
		//'inv'
		public Keyword getInvKeyword_0() { return cInvKeyword_0; }
		
		//(name=ID)?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//oclexpression=OCLExpression
		public Assignment getOclexpressionAssignment_3() { return cOclexpressionAssignment_3; }
		
		//OCLExpression
		public RuleCall getOclexpressionOCLExpressionParserRuleCall_3_0() { return cOclexpressionOCLExpressionParserRuleCall_3_0; }
	}
	public class OperationContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.OperationContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClassnameAllClassCrossReference_1_0 = (CrossReference)cClassnameAssignment_1.eContents().get(0);
		private final RuleCall cClassnameAllClassIDTerminalRuleCall_1_0_1 = (RuleCall)cClassnameAllClassCrossReference_1_0.eContents().get(1);
		private final Assignment cConstrainsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstrainsOperationConstraintsParserRuleCall_2_0 = (RuleCall)cConstrainsAssignment_2.eContents().get(0);
		
		//OperationContext:
		//    'context' classname=[AllClass] constrains=OperationConstraints;
		@Override public ParserRule getRule() { return rule; }
		
		//'context' classname=[AllClass] constrains=OperationConstraints
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//classname=[AllClass]
		public Assignment getClassnameAssignment_1() { return cClassnameAssignment_1; }
		
		//[AllClass]
		public CrossReference getClassnameAllClassCrossReference_1_0() { return cClassnameAllClassCrossReference_1_0; }
		
		//ID
		public RuleCall getClassnameAllClassIDTerminalRuleCall_1_0_1() { return cClassnameAllClassIDTerminalRuleCall_1_0_1; }
		
		//constrains=OperationConstraints
		public Assignment getConstrainsAssignment_2() { return cConstrainsAssignment_2; }
		
		//OperationConstraints
		public RuleCall getConstrainsOperationConstraintsParserRuleCall_2_0() { return cConstrainsOperationConstraintsParserRuleCall_2_0; }
	}
	public class OperationConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.OperationConstraints");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperationDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationDeclarationOperationDeclarationParserRuleCall_1_0 = (RuleCall)cOperationDeclarationAssignment_1.eContents().get(0);
		private final Assignment cConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionsConditionTypeParserRuleCall_2_0 = (RuleCall)cConditionsAssignment_2.eContents().get(0);
		
		//OperationConstraints:
		//    '::' operationDeclaration=OperationDeclaration (conditions+=ConditionType)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'::' operationDeclaration=OperationDeclaration (conditions+=ConditionType)+
		public Group getGroup() { return cGroup; }
		
		//'::'
		public Keyword getColonColonKeyword_0() { return cColonColonKeyword_0; }
		
		//operationDeclaration=OperationDeclaration
		public Assignment getOperationDeclarationAssignment_1() { return cOperationDeclarationAssignment_1; }
		
		//OperationDeclaration
		public RuleCall getOperationDeclarationOperationDeclarationParserRuleCall_1_0() { return cOperationDeclarationOperationDeclarationParserRuleCall_1_0; }
		
		//(conditions+=ConditionType)+
		public Assignment getConditionsAssignment_2() { return cConditionsAssignment_2; }
		
		//ConditionType
		public RuleCall getConditionsConditionTypeParserRuleCall_2_0() { return cConditionsConditionTypeParserRuleCall_2_0; }
	}
	public class ConditionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.ConditionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPreconditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPostconditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConditionType:
		//    Precondition | Postcondition;
		@Override public ParserRule getRule() { return rule; }
		
		//Precondition | Postcondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Precondition
		public RuleCall getPreconditionParserRuleCall_0() { return cPreconditionParserRuleCall_0; }
		
		//Postcondition
		public RuleCall getPostconditionParserRuleCall_1() { return cPostconditionParserRuleCall_1; }
	}
	public class PreconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.Precondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOclexpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOclexpressionOCLExpressionParserRuleCall_3_0 = (RuleCall)cOclexpressionAssignment_3.eContents().get(0);
		
		//Precondition:
		//    'pre' (name=ID)? ':' oclexpression=OCLExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'pre' (name=ID)? ':' oclexpression=OCLExpression
		public Group getGroup() { return cGroup; }
		
		//'pre'
		public Keyword getPreKeyword_0() { return cPreKeyword_0; }
		
		//(name=ID)?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//oclexpression=OCLExpression
		public Assignment getOclexpressionAssignment_3() { return cOclexpressionAssignment_3; }
		
		//OCLExpression
		public RuleCall getOclexpressionOCLExpressionParserRuleCall_3_0() { return cOclexpressionOCLExpressionParserRuleCall_3_0; }
	}
	public class PostconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.Postcondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOclexpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOclexpressionOCLExpressionParserRuleCall_3_0 = (RuleCall)cOclexpressionAssignment_3.eContents().get(0);
		
		//Postcondition:
		//    'post' (name=ID)? ':' oclexpression=OCLExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'post' (name=ID)? ':' oclexpression=OCLExpression
		public Group getGroup() { return cGroup; }
		
		//'post'
		public Keyword getPostKeyword_0() { return cPostKeyword_0; }
		
		//(name=ID)?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//oclexpression=OCLExpression
		public Assignment getOclexpressionAssignment_3() { return cOclexpressionAssignment_3; }
		
		//OCLExpression
		public RuleCall getOclexpressionOCLExpressionParserRuleCall_3_0() { return cOclexpressionOCLExpressionParserRuleCall_3_0; }
	}
	public class OCLExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.OCLExpression");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OCLExpression hidden (SL_COMMENT):
		//    STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final MultiplicityElements pMultiplicity;
	private final IntToStringElements pIntToString;
	private final DefaultTypeElements pDefaultType;
	private final AllTypesElements pAllTypes;
	private final TypeElements pType;
	private final CollectionTypeElements pCollectionType;
	private final AllClassElements pAllClass;
	private final AllClassAndEnumElements pAllClassAndEnum;
	private final SimpleTypesElements pSimpleTypes;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tML_COMMENT;
	private final EnumElements pEnum;
	private final EnumElementElements pEnumElement;
	private final ClassElements pClass;
	private final GeneralizationElements pGeneralization;
	private final AssociationElements pAssociation;
	private final AssociationEndElements pAssociationEnd;
	private final AssociationClassElements pAssociationClass;
	private final AttributesBaseElements pAttributesBase;
	private final AttributeElements pAttribute;
	private final OperationsBaseElements pOperationsBase;
	private final OperationTypeElements pOperationType;
	private final OperationQueryElements pOperationQuery;
	private final OperationComplexElements pOperationComplex;
	private final OperationDeclarationElements pOperationDeclaration;
	private final ParameterElements pParameter;
	private final ConstraintsBaseElements pConstraintsBase;
	private final ConstrainsGeneralElements pConstrainsGeneral;
	private final ContextsTypeElements pContextsType;
	private final InvariantContextElements pInvariantContext;
	private final InvariantDefinitionElements pInvariantDefinition;
	private final OperationContextElements pOperationContext;
	private final OperationConstraintsElements pOperationConstraints;
	private final ConditionTypeElements pConditionType;
	private final PreconditionElements pPrecondition;
	private final PostconditionElements pPostcondition;
	private final OCLExpressionElements pOCLExpression;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public USEGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pMultiplicity = new MultiplicityElements();
		this.pIntToString = new IntToStringElements();
		this.pDefaultType = new DefaultTypeElements();
		this.pAllTypes = new AllTypesElements();
		this.pType = new TypeElements();
		this.pCollectionType = new CollectionTypeElements();
		this.pAllClass = new AllClassElements();
		this.pAllClassAndEnum = new AllClassAndEnumElements();
		this.pSimpleTypes = new SimpleTypesElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.SL_COMMENT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "modelConverter.use_language.USE.ML_COMMENT");
		this.pEnum = new EnumElements();
		this.pEnumElement = new EnumElementElements();
		this.pClass = new ClassElements();
		this.pGeneralization = new GeneralizationElements();
		this.pAssociation = new AssociationElements();
		this.pAssociationEnd = new AssociationEndElements();
		this.pAssociationClass = new AssociationClassElements();
		this.pAttributesBase = new AttributesBaseElements();
		this.pAttribute = new AttributeElements();
		this.pOperationsBase = new OperationsBaseElements();
		this.pOperationType = new OperationTypeElements();
		this.pOperationQuery = new OperationQueryElements();
		this.pOperationComplex = new OperationComplexElements();
		this.pOperationDeclaration = new OperationDeclarationElements();
		this.pParameter = new ParameterElements();
		this.pConstraintsBase = new ConstraintsBaseElements();
		this.pConstrainsGeneral = new ConstrainsGeneralElements();
		this.pContextsType = new ContextsTypeElements();
		this.pInvariantContext = new InvariantContextElements();
		this.pInvariantDefinition = new InvariantDefinitionElements();
		this.pOperationContext = new OperationContextElements();
		this.pOperationConstraints = new OperationConstraintsElements();
		this.pConditionType = new ConditionTypeElements();
		this.pPrecondition = new PreconditionElements();
		this.pPostcondition = new PostconditionElements();
		this.pOCLExpression = new OCLExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("modelConverter.use_language.USE".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////-------------PRINCIPAL Y TIPOS---------------
	//Model:
	//    'model' name=ID ((enums += Enum)* (packagedElement += Type)* constraints=(ConstrainsGeneral)?);
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Multiplicity:
	//    minValue+=('*' | IntToString) ('..' maxValue+=('*' | IntToString))? (',' minValue+=('*' | IntToString) ('..' maxValue+=('*' | IntToString))?)*;
	public MultiplicityElements getMultiplicityAccess() {
		return pMultiplicity;
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}
	
	//IntToString:
	//    ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')+;
	public IntToStringElements getIntToStringAccess() {
		return pIntToString;
	}
	
	public ParserRule getIntToStringRule() {
		return getIntToStringAccess().getRule();
	}
	
	//DefaultType:
	//    'Integer' | 'String' | 'Real' | 'Boolean';
	public DefaultTypeElements getDefaultTypeAccess() {
		return pDefaultType;
	}
	
	public ParserRule getDefaultTypeRule() {
		return getDefaultTypeAccess().getRule();
	}
	
	//AllTypes:
	//    CollectionType | SimpleTypes;
	public AllTypesElements getAllTypesAccess() {
		return pAllTypes;
	}
	
	public ParserRule getAllTypesRule() {
		return getAllTypesAccess().getRule();
	}
	
	//Type:
	//    Class | Association | AssociationClass;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//CollectionType:
	//    collection=('Set' | 'Bag' | 'Sequence') '(' (type+=SimpleTypes)* ')';
	public CollectionTypeElements getCollectionTypeAccess() {
		return pCollectionType;
	}
	
	public ParserRule getCollectionTypeRule() {
		return getCollectionTypeAccess().getRule();
	}
	
	//AllClass:
	//    Class|AssociationClass;
	public AllClassElements getAllClassAccess() {
		return pAllClass;
	}
	
	public ParserRule getAllClassRule() {
		return getAllClassAccess().getRule();
	}
	
	//AllClassAndEnum:
	//    AllClass | Enum;
	public AllClassAndEnumElements getAllClassAndEnumAccess() {
		return pAllClassAndEnum;
	}
	
	public ParserRule getAllClassAndEnumRule() {
		return getAllClassAndEnumAccess().getRule();
	}
	
	//SimpleTypes:
	//    defaultType=DefaultType | referended=[AllClassAndEnum];
	public SimpleTypesElements getSimpleTypesAccess() {
		return pSimpleTypes;
	}
	
	public ParserRule getSimpleTypesRule() {
		return getSimpleTypesAccess().getRule();
	}
	
	// //https://www.eclipse.org/forums/index.php/m/553266/?srch=Cannot+call+enum+rule+without+assignment.#msg_553266
	//@Override
	//terminal SL_COMMENT:
	//    '--' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//@Override
	//terminal ML_COMMENT:
	//    '--' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	////--------------ENUMERADO--------------
	//Enum:
	//    'enum' (name=ID)? '{' (elements+=EnumElement)+ '}';
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}
	
	//EnumElement:
	//    ID (',')?;
	public EnumElementElements getEnumElementAccess() {
		return pEnumElement;
	}
	
	public ParserRule getEnumElementRule() {
		return getEnumElementAccess().getRule();
	}
	
	////---------------CLASE-----------------
	//Class:
	//    (abstract?='abstract')? 'class' name=ID ('<' (generalization+=Generalization)+)?
	//        attributes=(AttributesBase)?
	//        operations=(OperationsBase)?
	//        constraints=(ConstraintsBase)?
	//    'end';
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Generalization:
	//    general=[AllClass] (',')?;
	public GeneralizationElements getGeneralizationAccess() {
		return pGeneralization;
	}
	
	public ParserRule getGeneralizationRule() {
		return getGeneralizationAccess().getRule();
	}
	
	////-----------ASOCIACIONES-------------
	//Association:
	//    typeAssociation=('association' | 'aggregation' | 'composition') name=ID 'between'
	//        (associationEnds+=AssociationEnd)+ 'end';
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//AssociationEnd:
	//    type=[AllClass] '[' mul=Multiplicity ']' ('role' role=ID)? (ordered?='ordered')?;
	public AssociationEndElements getAssociationEndAccess() {
		return pAssociationEnd;
	}
	
	public ParserRule getAssociationEndRule() {
		return getAssociationEndAccess().getRule();
	}
	
	//AssociationClass:
	//    (abstract?='abstract')? 'associationclass' name=ID ('<' (generalization+=Generalization)+)?
	//        'between' (associationEnds+=AssociationEnd)+
	//        attributes=(AttributesBase)?
	//        operations=(OperationsBase)?
	//        constraints=(ConstraintsBase)?
	//    'end';
	public AssociationClassElements getAssociationClassAccess() {
		return pAssociationClass;
	}
	
	public ParserRule getAssociationClassRule() {
		return getAssociationClassAccess().getRule();
	}
	
	////-------------ATRIBUTOS---------------
	//AttributesBase:
	//    'attributes'
	//        (attributes+=Attribute)*;
	public AttributesBaseElements getAttributesBaseAccess() {
		return pAttributesBase;
	}
	
	public ParserRule getAttributesBaseRule() {
		return getAttributesBaseAccess().getRule();
	}
	
	//Attribute:
	//    name=ID ':' type=AllTypes;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	////------------OPERACIONES--------------
	//OperationsBase:
	//    'operations'
	//        (operations+=OperationType)*;
	public OperationsBaseElements getOperationsBaseAccess() {
		return pOperationsBase;
	}
	
	public ParserRule getOperationsBaseRule() {
		return getOperationsBaseAccess().getRule();
	}
	
	//OperationType:
	//    OperationComplex | OperationQuery;
	public OperationTypeElements getOperationTypeAccess() {
		return pOperationType;
	}
	
	public ParserRule getOperationTypeRule() {
		return getOperationTypeAccess().getRule();
	}
	
	//OperationQuery:
	//    operationDeclaration=OperationDeclaration '=' operationbody=OCLExpression (conditions+=ConditionType)*;
	public OperationQueryElements getOperationQueryAccess() {
		return pOperationQuery;
	}
	
	public ParserRule getOperationQueryRule() {
		return getOperationQueryAccess().getRule();
	}
	
	//OperationComplex:
	//    operationDeclaration=OperationDeclaration ('begin' (operationbody=OCLExpression)? 'end')? (conditions+=ConditionType)*;
	public OperationComplexElements getOperationComplexAccess() {
		return pOperationComplex;
	}
	
	public ParserRule getOperationComplexRule() {
		return getOperationComplexAccess().getRule();
	}
	
	//OperationDeclaration:
	//    name=ID '(' (parameters+=Parameter)* ')' (':' returnType=AllTypes)?;
	public OperationDeclarationElements getOperationDeclarationAccess() {
		return pOperationDeclaration;
	}
	
	public ParserRule getOperationDeclarationRule() {
		return getOperationDeclarationAccess().getRule();
	}
	
	//Parameter:
	//    name=ID ':' type=AllTypes (',')?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	////------------CONSTRAINTS---------------
	//ConstraintsBase:
	//    'constraints'
	//        (invariants+=InvariantDefinition)*;
	public ConstraintsBaseElements getConstraintsBaseAccess() {
		return pConstraintsBase;
	}
	
	public ParserRule getConstraintsBaseRule() {
		return getConstraintsBaseAccess().getRule();
	}
	
	//ConstrainsGeneral:
	//    'constraints'
	//        (contexts+=ContextsType)*;
	public ConstrainsGeneralElements getConstrainsGeneralAccess() {
		return pConstrainsGeneral;
	}
	
	public ParserRule getConstrainsGeneralRule() {
		return getConstrainsGeneralAccess().getRule();
	}
	
	//ContextsType:
	//    InvariantContext | OperationContext;
	public ContextsTypeElements getContextsTypeAccess() {
		return pContextsType;
	}
	
	public ParserRule getContextsTypeRule() {
		return getContextsTypeAccess().getRule();
	}
	
	//InvariantContext:
	//    'context' (variablename=ID ':')? classname=[AllClass] (invariants+=InvariantDefinition)*;
	public InvariantContextElements getInvariantContextAccess() {
		return pInvariantContext;
	}
	
	public ParserRule getInvariantContextRule() {
		return getInvariantContextAccess().getRule();
	}
	
	//InvariantDefinition:
	//    'inv' (name=ID)? ':' oclexpression=OCLExpression;
	public InvariantDefinitionElements getInvariantDefinitionAccess() {
		return pInvariantDefinition;
	}
	
	public ParserRule getInvariantDefinitionRule() {
		return getInvariantDefinitionAccess().getRule();
	}
	
	//OperationContext:
	//    'context' classname=[AllClass] constrains=OperationConstraints;
	public OperationContextElements getOperationContextAccess() {
		return pOperationContext;
	}
	
	public ParserRule getOperationContextRule() {
		return getOperationContextAccess().getRule();
	}
	
	//OperationConstraints:
	//    '::' operationDeclaration=OperationDeclaration (conditions+=ConditionType)+;
	public OperationConstraintsElements getOperationConstraintsAccess() {
		return pOperationConstraints;
	}
	
	public ParserRule getOperationConstraintsRule() {
		return getOperationConstraintsAccess().getRule();
	}
	
	//ConditionType:
	//    Precondition | Postcondition;
	public ConditionTypeElements getConditionTypeAccess() {
		return pConditionType;
	}
	
	public ParserRule getConditionTypeRule() {
		return getConditionTypeAccess().getRule();
	}
	
	//Precondition:
	//    'pre' (name=ID)? ':' oclexpression=OCLExpression;
	public PreconditionElements getPreconditionAccess() {
		return pPrecondition;
	}
	
	public ParserRule getPreconditionRule() {
		return getPreconditionAccess().getRule();
	}
	
	//Postcondition:
	//    'post' (name=ID)? ':' oclexpression=OCLExpression;
	public PostconditionElements getPostconditionAccess() {
		return pPostcondition;
	}
	
	public ParserRule getPostconditionRule() {
		return getPostconditionAccess().getRule();
	}
	
	//OCLExpression hidden (SL_COMMENT):
	//    STRING;
	public OCLExpressionElements getOCLExpressionAccess() {
		return pOCLExpression;
	}
	
	public ParserRule getOCLExpressionRule() {
		return getOCLExpressionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
