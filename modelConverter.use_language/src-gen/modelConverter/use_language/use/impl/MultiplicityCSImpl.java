/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.use.impl;

import modelConverter.use_language.use.MultiplicityCS;
import modelConverter.use_language.use.UsePackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Multiplicity CS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link modelConverter.use_language.use.impl.MultiplicityCSImpl#isIsNullFree <em>Is Null Free</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MultiplicityCSImpl extends MinimalEObjectImpl.Container implements MultiplicityCS
{
  /**
   * The default value of the '{@link #isIsNullFree() <em>Is Null Free</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsNullFree()
   * @generated
   * @ordered
   */
  protected static final boolean IS_NULL_FREE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsNullFree() <em>Is Null Free</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsNullFree()
   * @generated
   * @ordered
   */
  protected boolean isNullFree = IS_NULL_FREE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MultiplicityCSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UsePackage.Literals.MULTIPLICITY_CS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIsNullFree()
  {
    return isNullFree;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsNullFree(boolean newIsNullFree)
  {
    boolean oldIsNullFree = isNullFree;
    isNullFree = newIsNullFree;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.MULTIPLICITY_CS__IS_NULL_FREE, oldIsNullFree, isNullFree));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UsePackage.MULTIPLICITY_CS__IS_NULL_FREE:
        return isIsNullFree();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UsePackage.MULTIPLICITY_CS__IS_NULL_FREE:
        setIsNullFree((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.MULTIPLICITY_CS__IS_NULL_FREE:
        setIsNullFree(IS_NULL_FREE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.MULTIPLICITY_CS__IS_NULL_FREE:
        return isNullFree != IS_NULL_FREE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (isNullFree: ");
    result.append(isNullFree);
    result.append(')');
    return result.toString();
  }

} //MultiplicityCSImpl
