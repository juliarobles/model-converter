/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.use.impl;

import java.util.Collection;

import modelConverter.use_language.use.ConditionType;
import modelConverter.use_language.use.OperationDeclaration;
import modelConverter.use_language.use.OperationType;
import modelConverter.use_language.use.UsePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Operation Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link modelConverter.use_language.use.impl.OperationTypeImpl#getOperationDeclaration <em>Operation Declaration</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.OperationTypeImpl#getConditions <em>Conditions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OperationTypeImpl extends MinimalEObjectImpl.Container implements OperationType
{
  /**
   * The cached value of the '{@link #getOperationDeclaration() <em>Operation Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperationDeclaration()
   * @generated
   * @ordered
   */
  protected OperationDeclaration operationDeclaration;

  /**
   * The cached value of the '{@link #getConditions() <em>Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditions()
   * @generated
   * @ordered
   */
  protected EList<ConditionType> conditions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OperationTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UsePackage.Literals.OPERATION_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationDeclaration getOperationDeclaration()
  {
    return operationDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOperationDeclaration(OperationDeclaration newOperationDeclaration, NotificationChain msgs)
  {
    OperationDeclaration oldOperationDeclaration = operationDeclaration;
    operationDeclaration = newOperationDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.OPERATION_TYPE__OPERATION_DECLARATION, oldOperationDeclaration, newOperationDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperationDeclaration(OperationDeclaration newOperationDeclaration)
  {
    if (newOperationDeclaration != operationDeclaration)
    {
      NotificationChain msgs = null;
      if (operationDeclaration != null)
        msgs = ((InternalEObject)operationDeclaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.OPERATION_TYPE__OPERATION_DECLARATION, null, msgs);
      if (newOperationDeclaration != null)
        msgs = ((InternalEObject)newOperationDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.OPERATION_TYPE__OPERATION_DECLARATION, null, msgs);
      msgs = basicSetOperationDeclaration(newOperationDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.OPERATION_TYPE__OPERATION_DECLARATION, newOperationDeclaration, newOperationDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConditionType> getConditions()
  {
    if (conditions == null)
    {
      conditions = new EObjectContainmentEList<ConditionType>(ConditionType.class, this, UsePackage.OPERATION_TYPE__CONDITIONS);
    }
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UsePackage.OPERATION_TYPE__OPERATION_DECLARATION:
        return basicSetOperationDeclaration(null, msgs);
      case UsePackage.OPERATION_TYPE__CONDITIONS:
        return ((InternalEList<?>)getConditions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UsePackage.OPERATION_TYPE__OPERATION_DECLARATION:
        return getOperationDeclaration();
      case UsePackage.OPERATION_TYPE__CONDITIONS:
        return getConditions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UsePackage.OPERATION_TYPE__OPERATION_DECLARATION:
        setOperationDeclaration((OperationDeclaration)newValue);
        return;
      case UsePackage.OPERATION_TYPE__CONDITIONS:
        getConditions().clear();
        getConditions().addAll((Collection<? extends ConditionType>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.OPERATION_TYPE__OPERATION_DECLARATION:
        setOperationDeclaration((OperationDeclaration)null);
        return;
      case UsePackage.OPERATION_TYPE__CONDITIONS:
        getConditions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.OPERATION_TYPE__OPERATION_DECLARATION:
        return operationDeclaration != null;
      case UsePackage.OPERATION_TYPE__CONDITIONS:
        return conditions != null && !conditions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //OperationTypeImpl
