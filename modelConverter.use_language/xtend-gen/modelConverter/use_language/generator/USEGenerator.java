/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.List;
import modelConverter.use_language.use.AllClass;
import modelConverter.use_language.use.AllTypes;
import modelConverter.use_language.use.Association;
import modelConverter.use_language.use.AssociationClass;
import modelConverter.use_language.use.AssociationEnd;
import modelConverter.use_language.use.Attribute;
import modelConverter.use_language.use.AttributesBase;
import modelConverter.use_language.use.BooleanLiteralExpCS;
import modelConverter.use_language.use.CollectionLiteralExpCS;
import modelConverter.use_language.use.CollectionLiteralPartCS;
import modelConverter.use_language.use.CollectionPatternCS;
import modelConverter.use_language.use.CollectionType;
import modelConverter.use_language.use.CollectionTypeCS;
import modelConverter.use_language.use.ConditionType;
import modelConverter.use_language.use.ConstrainsGeneral;
import modelConverter.use_language.use.ConstraintsBase;
import modelConverter.use_language.use.ContextsType;
import modelConverter.use_language.use.CurlyBracketedClauseCS;
import modelConverter.use_language.use.ExpCS;
import modelConverter.use_language.use.Generalization;
import modelConverter.use_language.use.IfExpCS;
import modelConverter.use_language.use.IfThenExpCS;
import modelConverter.use_language.use.InfixExpCS;
import modelConverter.use_language.use.InvalidLiteralExpCS;
import modelConverter.use_language.use.InvariantContext;
import modelConverter.use_language.use.InvariantDefinition;
import modelConverter.use_language.use.LambdaLiteralExpCS;
import modelConverter.use_language.use.LetExpCS;
import modelConverter.use_language.use.LetVariableCS;
import modelConverter.use_language.use.MapLiteralExpCS;
import modelConverter.use_language.use.MapLiteralPartCS;
import modelConverter.use_language.use.MapTypeCS;
import modelConverter.use_language.use.ModelUSE;
import modelConverter.use_language.use.MultiplicityBoundsCS;
import modelConverter.use_language.use.MultiplicityCS;
import modelConverter.use_language.use.MultiplicityStringCS;
import modelConverter.use_language.use.NameExpCS;
import modelConverter.use_language.use.NavigatingArgCS;
import modelConverter.use_language.use.NestedExpCS;
import modelConverter.use_language.use.NullLiteralExpCS;
import modelConverter.use_language.use.NumberLiteralExpCS;
import modelConverter.use_language.use.OperationComplex;
import modelConverter.use_language.use.OperationConstraints;
import modelConverter.use_language.use.OperationContext;
import modelConverter.use_language.use.OperationDeclaration;
import modelConverter.use_language.use.OperationQuery;
import modelConverter.use_language.use.OperationType;
import modelConverter.use_language.use.OperationsBase;
import modelConverter.use_language.use.Parameter;
import modelConverter.use_language.use.PathNameCS;
import modelConverter.use_language.use.PatternExpCS;
import modelConverter.use_language.use.Postcondition;
import modelConverter.use_language.use.Precondition;
import modelConverter.use_language.use.PrefixExpCS;
import modelConverter.use_language.use.PrimitiveLiteralExpCS;
import modelConverter.use_language.use.PrimitiveTypeRefCS;
import modelConverter.use_language.use.RoundBracketedClauseCS;
import modelConverter.use_language.use.ShadowPartCS;
import modelConverter.use_language.use.SimpleTypes;
import modelConverter.use_language.use.SquareBracketedClauseCS;
import modelConverter.use_language.use.State;
import modelConverter.use_language.use.StateMachine;
import modelConverter.use_language.use.StateMachinesBase;
import modelConverter.use_language.use.StringLiteralExpCS;
import modelConverter.use_language.use.Transition;
import modelConverter.use_language.use.TupleLiteralExpCS;
import modelConverter.use_language.use.TupleLiteralPartCS;
import modelConverter.use_language.use.TuplePartCS;
import modelConverter.use_language.use.TupleTypeCS;
import modelConverter.use_language.use.Type;
import modelConverter.use_language.use.TypeLiteralExpCS;
import modelConverter.use_language.use.TypeNameExpCS;
import modelConverter.use_language.use.TypedRefCS;
import modelConverter.use_language.use.UnlimitedNaturalLiteralExpCS;
import modelConverter.use_language.use.VariableCS;
import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class USEGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<ModelUSE> _filter = Iterables.<ModelUSE>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), ModelUSE.class);
    for (final ModelUSE e : _filter) {
      String _name = e.getName();
      String _plus = ("modelConverter_" + _name);
      fsa.generateFile(FileNameCheck.getFileNameAvailable(fsa, _plus, ".uml"), this.compileModel(e));
    }
  }
  
  private CharSequence compileModel(final ModelUSE e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<xmi:XMI xmi:version=\"20131001\" xmlns:xmi=\"http://www.omg.org/spec/XMI/20131001\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:MagicDrawProfile=\"http://www.omg.org/spec/UML/20131001/MagicDrawProfile\" xmlns:ecore=\"http://www.eclipse.org/emf/2002/Ecore\" xmlns:uml=\"http://www.eclipse.org/uml2/5.0.0/UML\" xsi:schemaLocation=\"http://www.omg.org/spec/UML/20131001/MagicDrawProfile UML_Standard_Profile.MagicDraw_Profile.profile.uml#_nPVN7YtIEeuebcn5BqfCXQ\">");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("<uml:Model xmi:id=\"");
    int _identityHashCode = System.identityHashCode(e);
    _builder.append(_identityHashCode, "   ");
    _builder.append("\" name=\"");
    String _name = e.getName();
    _builder.append(_name, "   ");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      EList<modelConverter.use_language.use.Enum> _enums = e.getEnums();
      for(final modelConverter.use_language.use.Enum f : _enums) {
        _builder.append("\t");
        CharSequence _compileEnum = this.compileEnum(f);
        _builder.append(_compileEnum, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Type> _packagedElement = e.getPackagedElement();
      for(final Type f_1 : _packagedElement) {
        {
          ConstrainsGeneral _constraints = e.getConstraints();
          boolean _tripleNotEquals = (_constraints != null);
          if (_tripleNotEquals) {
            _builder.append("\t");
            CharSequence _compileType = this.compileType(f_1, e.getPackagedElement(), e.getConstraints().getContexts());
            _builder.append(_compileType, "\t");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            EList<Type> _packagedElement_1 = e.getPackagedElement();
            BasicEList<ContextsType> _basicEList = new BasicEList<ContextsType>();
            CharSequence _compileType_1 = this.compileType(f_1, _packagedElement_1, _basicEList);
            _builder.append(_compileType_1, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    final Function1<modelConverter.use_language.use.Class, StateMachinesBase> _function = (modelConverter.use_language.use.Class it) -> {
      return it.getStatemachines();
    };
    CharSequence _compileEventStateMachines = this.compileEventStateMachines(IterableExtensions.<StateMachinesBase>toList(IterableExtensions.<modelConverter.use_language.use.Class, StateMachinesBase>map(Iterables.<modelConverter.use_language.use.Class>filter(e.getPackagedElement(), modelConverter.use_language.use.Class.class), _function)));
    _builder.append(_compileEventStateMachines, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</uml:Model>");
    _builder.newLine();
    _builder.append("</xmi:XMI>");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compileEnum(final modelConverter.use_language.use.Enum e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<packagedElement xmi:type=\"uml:Enumeration\" xmi:id=\"");
    int _identityHashCode = System.identityHashCode(e);
    _builder.append(_identityHashCode);
    _builder.append("\" name=\"");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("\" visibility=\"public\">");
    _builder.newLineIfNotEmpty();
    {
      EList<String> _elements = e.getElements();
      for(final String enumElement : _elements) {
        _builder.append("<ownedLiteral xmi:id=\"");
        int _identityHashCode_1 = System.identityHashCode(enumElement);
        _builder.append(_identityHashCode_1);
        _builder.append("\" name=\"");
        String _replaceAll = enumElement.replaceAll(",", "");
        _builder.append(_replaceAll);
        _builder.append("\" visibility=\"public\"/>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</packagedElement>");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compileType(final Type e, final EList<Type> elementos, final EList<ContextsType> constrains) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof modelConverter.use_language.use.Class)) {
        final Function1<Type, Boolean> _function = (Type a) -> {
          return Boolean.valueOf(((a instanceof Association) || (a instanceof AssociationClass)));
        };
        final Function1<ContextsType, Boolean> _function_1 = (ContextsType a) -> {
          AllClass _classname = a.getClassname();
          return Boolean.valueOf(Objects.equal(_classname, e));
        };
        CharSequence _compileClass = this.compileClass(((modelConverter.use_language.use.Class)e), IterableExtensions.<Type>filter(elementos, _function), IterableExtensions.<ContextsType>filter(constrains, _function_1));
        _builder.append(_compileClass);
        _builder.newLineIfNotEmpty();
      } else {
        if ((e instanceof Association)) {
          CharSequence _compileAssociation = this.compileAssociation(((Association)e));
          _builder.append(_compileAssociation);
          _builder.newLineIfNotEmpty();
        } else {
          if ((e instanceof AssociationClass)) {
            final Function1<Type, Boolean> _function_2 = (Type a) -> {
              return Boolean.valueOf(((a instanceof Association) || (a instanceof AssociationClass)));
            };
            final Function1<ContextsType, Boolean> _function_3 = (ContextsType a) -> {
              AllClass _classname = a.getClassname();
              return Boolean.valueOf(Objects.equal(_classname, e));
            };
            CharSequence _compileAssociationClass = this.compileAssociationClass(((AssociationClass)e), IterableExtensions.<Type>filter(elementos, _function_2), IterableExtensions.<ContextsType>filter(constrains, _function_3));
            _builder.append(_compileAssociationClass);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence compileClass(final modelConverter.use_language.use.Class e, final Iterable<Type> associations, final Iterable<ContextsType> constraints) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<packagedElement xmi:type=\"uml:Class\" xmi:id=\"");
    int _identityHashCode = System.identityHashCode(e);
    _builder.append(_identityHashCode);
    _builder.append("\" ");
    {
      boolean _isAbstract = e.isAbstract();
      if (_isAbstract) {
        _builder.append("isAbstract=\"true\" ");
      }
    }
    _builder.append("name=\"");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      ConstraintsBase _constraints = e.getConstraints();
      boolean _tripleNotEquals = (_constraints != null);
      if (_tripleNotEquals) {
        CharSequence _compileConstraintsBase = this.compileConstraintsBase(e.getConstraints().getInvariants(), System.identityHashCode(e));
        _builder.append(_compileConstraintsBase);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((constraints != null)) {
        {
          Iterable<InvariantContext> _filter = Iterables.<InvariantContext>filter(constraints, InvariantContext.class);
          for(final InvariantContext invContext : _filter) {
            CharSequence _compileConstraintsBase_1 = this.compileConstraintsBase(invContext.getInvariants(), System.identityHashCode(e));
            _builder.append(_compileConstraintsBase_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EList<Generalization> _generalization = e.getGeneralization();
      for(final Generalization generalization : _generalization) {
        CharSequence _compileGeneralization = this.compileGeneralization(generalization);
        _builder.append(_compileGeneralization);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      AttributesBase _attributes = e.getAttributes();
      boolean _tripleNotEquals_1 = (_attributes != null);
      if (_tripleNotEquals_1) {
        CharSequence _compileAttributesBase = this.compileAttributesBase(e.getAttributes());
        _builder.append(_compileAttributesBase);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      final Function1<Association, Boolean> _function = (Association a) -> {
        final Function1<AssociationEnd, AllClass> _function_1 = (AssociationEnd it) -> {
          return it.getType();
        };
        return Boolean.valueOf(ListExtensions.<AssociationEnd, AllClass>map(a.getAssociationEnds(), _function_1).contains(e));
      };
      Iterable<Association> _filter_1 = IterableExtensions.<Association>filter(Iterables.<Association>filter(associations, Association.class), _function);
      for(final Association association : _filter_1) {
        {
          final Function1<AssociationEnd, AllClass> _function_1 = (AssociationEnd it) -> {
            return it.getType();
          };
          int _length = ((Object[])Conversions.unwrapArray(IterableExtensions.<AllClass>toSet(ListExtensions.<AssociationEnd, AllClass>map(association.getAssociationEnds(), _function_1)), Object.class)).length;
          int _length_1 = ((Object[])Conversions.unwrapArray(association.getAssociationEnds(), Object.class)).length;
          boolean _equals = (_length == _length_1);
          if (_equals) {
            CharSequence _compileAssociationEnd = this.compileAssociationEnd(e, association.getAssociationEnds(), System.identityHashCode(association), this.getTypeAssociation(association).toString(), Boolean.valueOf(false));
            _builder.append(_compileAssociationEnd);
            _builder.newLineIfNotEmpty();
          } else {
            CharSequence _compileAssociationEnd_1 = this.compileAssociationEnd(e, association.getAssociationEnds(), System.identityHashCode(association), this.getTypeAssociation(association).toString(), Boolean.valueOf(true));
            _builder.append(_compileAssociationEnd_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      final Function1<AssociationClass, Boolean> _function_2 = (AssociationClass a) -> {
        final Function1<AssociationEnd, AllClass> _function_3 = (AssociationEnd it) -> {
          return it.getType();
        };
        return Boolean.valueOf(ListExtensions.<AssociationEnd, AllClass>map(a.getAssociationEnds(), _function_3).contains(e));
      };
      Iterable<AssociationClass> _filter_2 = IterableExtensions.<AssociationClass>filter(Iterables.<AssociationClass>filter(associations, AssociationClass.class), _function_2);
      for(final AssociationClass association_1 : _filter_2) {
        {
          final Function1<AssociationEnd, AllClass> _function_3 = (AssociationEnd it) -> {
            return it.getType();
          };
          int _length_2 = ((Object[])Conversions.unwrapArray(IterableExtensions.<AllClass>toSet(ListExtensions.<AssociationEnd, AllClass>map(association_1.getAssociationEnds(), _function_3)), Object.class)).length;
          int _length_3 = ((Object[])Conversions.unwrapArray(association_1.getAssociationEnds(), Object.class)).length;
          boolean _equals_1 = (_length_2 == _length_3);
          if (_equals_1) {
            CharSequence _compileAssociationEnd_2 = this.compileAssociationEnd(e, association_1.getAssociationEnds(), System.identityHashCode(association_1), "", Boolean.valueOf(false));
            _builder.append(_compileAssociationEnd_2);
            _builder.newLineIfNotEmpty();
          } else {
            CharSequence _compileAssociationEnd_3 = this.compileAssociationEnd(e, association_1.getAssociationEnds(), System.identityHashCode(association_1), "", Boolean.valueOf(true));
            _builder.append(_compileAssociationEnd_3);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      OperationsBase _operations = e.getOperations();
      boolean _tripleNotEquals_2 = (_operations != null);
      if (_tripleNotEquals_2) {
        CharSequence _compileOperationsBase = this.compileOperationsBase(e.getOperations(), Iterables.<OperationContext>filter(constraints, OperationContext.class));
        _builder.append(_compileOperationsBase);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      StateMachinesBase _statemachines = e.getStatemachines();
      boolean _tripleNotEquals_3 = (_statemachines != null);
      if (_tripleNotEquals_3) {
        CharSequence _compileStateMachinesBase = this.compileStateMachinesBase(e.getStatemachines());
        _builder.append(_compileStateMachinesBase);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</packagedElement>");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compileStateMachinesBase(final StateMachinesBase e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<StateMachine> _statemachines = e.getStatemachines();
      for(final StateMachine statemachine : _statemachines) {
        _builder.append("<ownedBehavior xmi:type=\"uml:ProtocolStateMachine\" xmi:id=\"");
        int _identityHashCode = System.identityHashCode(statemachine);
        _builder.append(_identityHashCode);
        _builder.append("\" name=\"");
        String _name = statemachine.getName();
        _builder.append(_name);
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("<region xmi:id=\"");
        int _identityHashCode_1 = System.identityHashCode(statemachine);
        String _plus = (Integer.valueOf(_identityHashCode_1) + "_01");
        _builder.append(_plus, "\t");
        _builder.append("\" name=\"\" visibility=\"public\">");
        _builder.newLineIfNotEmpty();
        {
          EList<Transition> _transitions = statemachine.getTransitions();
          for(final Transition transition : _transitions) {
            _builder.append("\t\t");
            CharSequence _compileTransition = this.compileTransition(transition);
            _builder.append(_compileTransition, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EList<State> _states = statemachine.getStates();
          for(final State state : _states) {
            _builder.append("\t\t");
            CharSequence _compileState = this.compileState(state);
            _builder.append(_compileState, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("</region>");
        _builder.newLine();
        _builder.append("</ownedBehavior>");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  private CharSequence compileState(final State e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isIsInitial = e.isIsInitial();
      if (_isIsInitial) {
        _builder.append("<subvertex xmi:type=\"uml:Pseudostate\" xmi:id=\"");
        int _identityHashCode = System.identityHashCode(e);
        _builder.append(_identityHashCode);
        _builder.append("\" name=\"");
        String _name = e.getName();
        _builder.append(_name);
        _builder.append("\"/>");
        _builder.newLineIfNotEmpty();
      } else {
        boolean _isIsFinal = e.isIsFinal();
        if (_isIsFinal) {
          _builder.append("<subvertex xmi:type=\"uml:FinalState\" xmi:id=\"");
          int _identityHashCode_1 = System.identityHashCode(e);
          _builder.append(_identityHashCode_1);
          _builder.append("\" name=\"");
          String _name_1 = e.getName();
          _builder.append(_name_1);
          _builder.append("\"/>");
          _builder.newLineIfNotEmpty();
        } else {
          _builder.append("<subvertex xmi:type=\"uml:State\" xmi:id=\"");
          int _identityHashCode_2 = System.identityHashCode(e);
          _builder.append(_identityHashCode_2);
          _builder.append("\" name=\"");
          String _name_2 = e.getName();
          _builder.append(_name_2);
          _builder.append("\" ");
          {
            ExpCS _invariant = e.getInvariant();
            boolean _tripleNotEquals = (_invariant != null);
            if (_tripleNotEquals) {
              _builder.append(" stateInvariant=\"");
              int _identityHashCode_3 = System.identityHashCode(e.getInvariant());
              _builder.append(_identityHashCode_3);
              _builder.append("\"");
            }
          }
          _builder.append(">");
          _builder.newLineIfNotEmpty();
          {
            ExpCS _invariant_1 = e.getInvariant();
            boolean _tripleNotEquals_1 = (_invariant_1 != null);
            if (_tripleNotEquals_1) {
              CharSequence _compileOwnedRule = this.compileOwnedRule(e.getInvariant(), Integer.valueOf(System.identityHashCode(e.getInvariant())).toString(), "", "");
              _builder.append(_compileOwnedRule);
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("</subvertex>");
          _builder.newLine();
        }
      }
    }
    return _builder;
  }
  
  private CharSequence compileTransition(final Transition e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<transition xmi:type=\"uml:ProtocolTransition\" xmi:id=\"");
    int _identityHashCode = System.identityHashCode(e);
    _builder.append(_identityHashCode);
    _builder.append("\" name=\"\"");
    {
      ExpCS _precondition = e.getPrecondition();
      boolean _tripleNotEquals = (_precondition != null);
      if (_tripleNotEquals) {
        _builder.append(" guard=\"");
        int _identityHashCode_1 = System.identityHashCode(e.getPrecondition());
        _builder.append(_identityHashCode_1);
        _builder.append("\"");
      }
    }
    _builder.append(" source=\"");
    int _identityHashCode_2 = System.identityHashCode(e.getSource());
    _builder.append(_identityHashCode_2);
    _builder.append("\" target=\"");
    int _identityHashCode_3 = System.identityHashCode(e.getTarget());
    _builder.append(_identityHashCode_3);
    _builder.append("\"");
    {
      ExpCS _postcondition = e.getPostcondition();
      boolean _tripleNotEquals_1 = (_postcondition != null);
      if (_tripleNotEquals_1) {
        _builder.append(" postCondition=\"");
        int _identityHashCode_4 = System.identityHashCode(e.getPostcondition());
        _builder.append(_identityHashCode_4);
        _builder.append("\"");
      }
    }
    {
      ExpCS _precondition_1 = e.getPrecondition();
      boolean _tripleNotEquals_2 = (_precondition_1 != null);
      if (_tripleNotEquals_2) {
        _builder.append(" preCondition=\"");
        int _identityHashCode_5 = System.identityHashCode(e.getPrecondition());
        _builder.append(_identityHashCode_5);
        _builder.append("\"");
      }
    }
    _builder.append(">");
    _builder.newLineIfNotEmpty();
    {
      ExpCS _precondition_2 = e.getPrecondition();
      boolean _tripleNotEquals_3 = (_precondition_2 != null);
      if (_tripleNotEquals_3) {
        _builder.append("\t");
        CharSequence _compileOwnedRule = this.compileOwnedRule(e.getPrecondition(), Integer.valueOf(System.identityHashCode(e.getPrecondition())).toString(), "", "");
        _builder.append(_compileOwnedRule, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ExpCS _postcondition_1 = e.getPostcondition();
      boolean _tripleNotEquals_4 = (_postcondition_1 != null);
      if (_tripleNotEquals_4) {
        _builder.append("\t");
        CharSequence _compileOwnedRule_1 = this.compileOwnedRule(e.getPostcondition(), Integer.valueOf(System.identityHashCode(e.getPostcondition())).toString(), "", "");
        _builder.append(_compileOwnedRule_1, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      OperationDeclaration _operation = e.getOperation();
      boolean _tripleNotEquals_5 = (_operation != null);
      if (_tripleNotEquals_5) {
        _builder.append("\t");
        _builder.append("<trigger xmi:id=\"");
        int _identityHashCode_6 = System.identityHashCode(e);
        String _plus = (Integer.valueOf(_identityHashCode_6) + "_01");
        _builder.append(_plus, "\t");
        _builder.append("\" name=\"\" visibility=\"public\" event=\"");
        int _identityHashCode_7 = System.identityHashCode(e);
        String _plus_1 = (Integer.valueOf(_identityHashCode_7) + "_02");
        _builder.append(_plus_1, "\t");
        _builder.append("\"/>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</transition>");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compileEventStateMachines(final List<StateMachinesBase> statemachines) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final StateMachinesBase statemachinebase : statemachines) {
        {
          if ((statemachinebase != null)) {
            {
              EList<StateMachine> _statemachines = statemachinebase.getStatemachines();
              for(final StateMachine statemachine : _statemachines) {
                {
                  EList<Transition> _transitions = statemachine.getTransitions();
                  for(final Transition transition : _transitions) {
                    {
                      OperationDeclaration _operation = transition.getOperation();
                      boolean _tripleNotEquals = (_operation != null);
                      if (_tripleNotEquals) {
                        _builder.append("<packagedElement xmi:type=\"uml:CallEvent\" xmi:id=\"");
                        int _identityHashCode = System.identityHashCode(transition);
                        String _plus = (Integer.valueOf(_identityHashCode) + "_02");
                        _builder.append(_plus);
                        _builder.append("\" name=\"\" operation=\"");
                        int _identityHashCode_1 = System.identityHashCode(transition.getOperation());
                        _builder.append(_identityHashCode_1);
                        _builder.append("\"/>");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence compileAssociationEnd(final AllClass e, final Iterable<AssociationEnd> list, final int id, final String aggregation, final Boolean reflexive) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final AssociationEnd end : list) {
        {
          if (((reflexive).booleanValue() || (!Objects.equal(end.getType(), e)))) {
            _builder.append("<ownedAttribute xmi:id=\"");
            int _identityHashCode = System.identityHashCode(end);
            _builder.append(_identityHashCode);
            _builder.append("\" name=\"");
            String _role = end.getRole();
            _builder.append(_role);
            _builder.append("\" type=\"");
            int _identityHashCode_1 = System.identityHashCode(end.getType());
            _builder.append(_identityHashCode_1);
            _builder.append("\" association=\"");
            _builder.append(id);
            _builder.append("\" ");
            {
              int _size = Iterables.size(list);
              int _minus = (_size - 1);
              Object _get = ((Object[])Conversions.unwrapArray(list, Object.class))[_minus];
              boolean _equals = Objects.equal(end, _get);
              if (_equals) {
                _builder.append(aggregation);
              }
            }
            _builder.append(">");
            _builder.newLineIfNotEmpty();
            {
              if ((((end.getMul() != null) && (end.getMul().getMinValue() != null)) && (((Object[])Conversions.unwrapArray(end.getMul().getMinValue(), Object.class)).length > 0))) {
                {
                  boolean _equals_1 = end.getMul().getMinValue().get(0).equals("*");
                  boolean _not = (!_equals_1);
                  if (_not) {
                    _builder.append("<lowerValue xmi:type=\"");
                    CharSequence _typeMul = this.getTypeMul(end.getMul().getMinValue().get(0));
                    _builder.append(_typeMul);
                    _builder.append("\" xmi:id=\"");
                    String _string = Integer.valueOf(System.identityHashCode(end.getType())).toString();
                    String _plus = (_string + Integer.valueOf(id));
                    String _plus_1 = (_plus + "1");
                    _builder.append(_plus_1);
                    _builder.append("\" name=\"\" value=\"");
                    String _get_1 = end.getMul().getMinValue().get(0);
                    _builder.append(_get_1);
                    _builder.append("\"/>");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("<lowerValue xmi:type=\"uml:LiteralUnlimitedNatural\" xmi:id=\"");
                    String _string_1 = Integer.valueOf(System.identityHashCode(end.getType())).toString();
                    String _plus_2 = (_string_1 + Integer.valueOf(id));
                    String _plus_3 = (_plus_2 + "2");
                    _builder.append(_plus_3);
                    _builder.append("\" name=\"\"/>");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  if (((end.getMul().getMaxValue() != null) && (((Object[])Conversions.unwrapArray(end.getMul().getMaxValue(), Object.class)).length > 0))) {
                    _builder.append("<upperValue xmi:type=\"");
                    CharSequence _typeMul_1 = this.getTypeMul(end.getMul().getMaxValue().get(0));
                    _builder.append(_typeMul_1);
                    _builder.append("\" xmi:id=\"");
                    String _string_2 = Integer.valueOf(System.identityHashCode(end.getType())).toString();
                    String _plus_4 = (_string_2 + Integer.valueOf(id));
                    String _plus_5 = (_plus_4 + "2");
                    _builder.append(_plus_5);
                    _builder.append("\" name=\"\" value=\"");
                    String _get_2 = end.getMul().getMaxValue().get(0);
                    _builder.append(_get_2);
                    _builder.append("\"/>");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("<upperValue xmi:type=\"");
                    CharSequence _typeMul_2 = this.getTypeMul(end.getMul().getMinValue().get(0));
                    _builder.append(_typeMul_2);
                    _builder.append("\" xmi:id=\"");
                    String _string_3 = Integer.valueOf(System.identityHashCode(end.getType())).toString();
                    String _plus_6 = (_string_3 + Integer.valueOf(id));
                    String _plus_7 = (_plus_6 + "2");
                    _builder.append(_plus_7);
                    _builder.append("\" name=\"\" value=\"");
                    String _get_3 = end.getMul().getMinValue().get(0);
                    _builder.append(_get_3);
                    _builder.append("\"/>");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("\t");
            _builder.append("</ownedAttribute>");
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence getTypeMul(final String s) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equals = s.equals("*");
      if (_equals) {
        _builder.append("uml:LiteralUnlimitedNatural");
      } else {
        _builder.append("uml:LiteralInteger");
      }
    }
    return _builder;
  }
  
  private CharSequence getTypeAssociation(final Association ab) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _typeAssociation = ab.getTypeAssociation();
      boolean _equals = Objects.equal(_typeAssociation, "aggregation");
      if (_equals) {
        _builder.append("aggregation=\"shared\"");
      } else {
        String _typeAssociation_1 = ab.getTypeAssociation();
        boolean _equals_1 = Objects.equal(_typeAssociation_1, "composition");
        if (_equals_1) {
          _builder.append("aggregation=\"composite\"");
        }
      }
    }
    return _builder;
  }
  
  private CharSequence compileGeneralization(final Generalization e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<generalization xmi:id=\"");
    int _identityHashCode = System.identityHashCode(e);
    _builder.append(_identityHashCode);
    _builder.append("\" general=\"");
    int _identityHashCode_1 = System.identityHashCode(e.getGeneral());
    _builder.append(_identityHashCode_1);
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence compileConstraintsBase(final EList<InvariantDefinition> list, final int idClass) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final InvariantDefinition inv : list) {
        CharSequence _compileOwnedRule = this.compileOwnedRule(inv.getOclexpression(), Integer.valueOf(System.identityHashCode(inv)).toString(), inv.getName(), (("constrainedElement=\"" + Integer.valueOf(idClass)) + "\""));
        _builder.append(_compileOwnedRule);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  private CharSequence compileAttributesBase(final AttributesBase e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Attribute> _attributes = e.getAttributes();
      for(final Attribute attribute : _attributes) {
        _builder.append("<ownedAttribute xmi:id=\"");
        int _identityHashCode = System.identityHashCode(attribute);
        _builder.append(_identityHashCode);
        _builder.append("\" name=\"");
        String _name = attribute.getName();
        _builder.append(_name);
        _builder.append("\" ");
        {
          ExpCS _deriveOCL = attribute.getDeriveOCL();
          boolean _tripleNotEquals = (_deriveOCL != null);
          if (_tripleNotEquals) {
            _builder.append("isDerived=\"true\" ");
          }
        }
        {
          if ((((attribute.getType() != null) && (attribute.getType() instanceof SimpleTypes)) && (((SimpleTypes) attribute.getType()).getReferended() != null))) {
            _builder.append("type=\"");
            AllTypes _type = attribute.getType();
            int _identityHashCode_1 = System.identityHashCode(((SimpleTypes) _type).getReferended());
            _builder.append(_identityHashCode_1);
            _builder.append("\"");
          } else {
            if (((((((attribute.getType() != null) && (attribute.getType() instanceof CollectionType)) && (((CollectionType) attribute.getType()).getType() != null)) && (((Object[])Conversions.unwrapArray(((CollectionType) attribute.getType()).getType(), Object.class)).length > 0)) && (((CollectionType) attribute.getType()).getType().get(0) instanceof SimpleTypes)) && (((SimpleTypes) ((CollectionType) attribute.getType()).getType().get(0)).getReferended() != null))) {
              _builder.append("type=\"");
              AllTypes _type_1 = attribute.getType();
              SimpleTypes _get = ((CollectionType) _type_1).getType().get(0);
              int _identityHashCode_2 = System.identityHashCode(((SimpleTypes) _get).getReferended());
              _builder.append(_identityHashCode_2);
              _builder.append("\"");
            }
          }
        }
        {
          if (((attribute.getType() != null) && (attribute.getType() instanceof CollectionType))) {
            AllTypes _type_2 = attribute.getType();
            CharSequence _compileCollection = this.compileCollection(((CollectionType) _type_2).getCollection());
            _builder.append(_compileCollection);
          }
        }
        _builder.append(">");
        _builder.newLineIfNotEmpty();
        {
          if ((((attribute.getType() != null) && (attribute.getType() instanceof SimpleTypes)) && (((SimpleTypes) attribute.getType()).getDefaultType() != null))) {
            AllTypes _type_3 = attribute.getType();
            CharSequence _compileDefaultType = this.compileDefaultType(((SimpleTypes) _type_3).getDefaultType());
            _builder.append(_compileDefaultType);
            _builder.newLineIfNotEmpty();
          } else {
            if (((((((attribute.getType() != null) && (attribute.getType() instanceof CollectionType)) && (((CollectionType) attribute.getType()).getType() != null)) && (((Object[])Conversions.unwrapArray(((CollectionType) attribute.getType()).getType(), Object.class)).length > 0)) && (((CollectionType) attribute.getType()).getType().get(0) instanceof SimpleTypes)) && (((SimpleTypes) ((CollectionType) attribute.getType()).getType().get(0)).getDefaultType() != null))) {
              AllTypes _type_4 = attribute.getType();
              SimpleTypes _get_1 = ((CollectionType) _type_4).getType().get(0);
              CharSequence _compileDefaultType_1 = this.compileDefaultType(((SimpleTypes) _get_1).getDefaultType());
              _builder.append(_compileDefaultType_1);
              _builder.newLineIfNotEmpty();
              _builder.append("<lowerValue xmi:type=\"uml:LiteralUnlimitedNatural\" xmi:id=\"");
              int _identityHashCode_3 = System.identityHashCode(attribute);
              String _plus = (Integer.valueOf(_identityHashCode_3) + "_01");
              _builder.append(_plus);
              _builder.append("\" name=\"\" visibility=\"public\"/>");
              _builder.newLineIfNotEmpty();
              _builder.append("<upperValue xmi:type=\"uml:LiteralUnlimitedNatural\" xmi:id=\"");
              int _identityHashCode_4 = System.identityHashCode(attribute);
              String _plus_1 = (Integer.valueOf(_identityHashCode_4) + "_02");
              _builder.append(_plus_1);
              _builder.append("\" name=\"\" visibility=\"public\" value=\"*\"/>");
              _builder.newLineIfNotEmpty();
            } else {
              if (((((((attribute.getType() != null) && (attribute.getType() instanceof CollectionType)) && (((CollectionType) attribute.getType()).getType() != null)) && (((Object[])Conversions.unwrapArray(((CollectionType) attribute.getType()).getType(), Object.class)).length > 0)) && (((CollectionType) attribute.getType()).getType().get(0) instanceof SimpleTypes)) && (((SimpleTypes) ((CollectionType) attribute.getType()).getType().get(0)).getReferended() != null))) {
                _builder.append("<lowerValue xmi:type=\"uml:LiteralUnlimitedNatural\" xmi:id=\"");
                int _identityHashCode_5 = System.identityHashCode(attribute);
                String _plus_2 = (Integer.valueOf(_identityHashCode_5) + "_01");
                _builder.append(_plus_2);
                _builder.append("\" name=\"\" visibility=\"public\"/>");
                _builder.newLineIfNotEmpty();
                _builder.append("<upperValue xmi:type=\"uml:LiteralUnlimitedNatural\" xmi:id=\"");
                int _identityHashCode_6 = System.identityHashCode(attribute);
                String _plus_3 = (Integer.valueOf(_identityHashCode_6) + "_02");
                _builder.append(_plus_3);
                _builder.append("\" name=\"\" visibility=\"public\" value=\"*\"/>\t");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          ExpCS _deriveOCL_1 = attribute.getDeriveOCL();
          boolean _tripleNotEquals_1 = (_deriveOCL_1 != null);
          if (_tripleNotEquals_1) {
            _builder.append("<defaultValue xmi:type=\"uml:LiteralString\" xmi:id=\"");
            int _identityHashCode_7 = System.identityHashCode(attribute);
            String _plus_4 = (Integer.valueOf(_identityHashCode_7) + "_03");
            _builder.append(_plus_4);
            _builder.append("\" name=\"\" visibility=\"public\" value=\"");
            CharSequence _compileExpCSToShow = this.compileExpCSToShow(attribute.getDeriveOCL());
            _builder.append(_compileExpCSToShow);
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
          } else {
            ExpCS _initOCL = attribute.getInitOCL();
            boolean _tripleNotEquals_2 = (_initOCL != null);
            if (_tripleNotEquals_2) {
              _builder.append("<defaultValue xmi:type=\"uml:LiteralString\" xmi:id=\"");
              int _identityHashCode_8 = System.identityHashCode(attribute);
              String _plus_5 = (Integer.valueOf(_identityHashCode_8) + "_03");
              _builder.append(_plus_5);
              _builder.append("\" name=\"\" visibility=\"public\" value=\"");
              CharSequence _compileExpCSToShow_1 = this.compileExpCSToShow(attribute.getInitOCL());
              _builder.append(_compileExpCSToShow_1);
              _builder.append("\"/>");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append("</ownedAttribute>");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  private CharSequence compileCollection(final String collection) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equalsIgnoreCase = collection.equalsIgnoreCase("Sequence");
      if (_equalsIgnoreCase) {
        _builder.append(" isOrdered=\"true\" isUnique=\"false\"");
      } else {
        boolean _equalsIgnoreCase_1 = collection.equalsIgnoreCase("Bag");
        if (_equalsIgnoreCase_1) {
          _builder.append(" isUnique=\"false\"");
        }
      }
    }
    return _builder;
  }
  
  private CharSequence compileOperationsBase(final OperationsBase e, final Iterable<OperationContext> conditions) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<OperationType> _operations = e.getOperations();
      for(final OperationType op : _operations) {
        final Function1<OperationContext, OperationConstraints> _function = (OperationContext it) -> {
          return it.getConstrains();
        };
        final Function1<OperationConstraints, Boolean> _function_1 = (OperationConstraints c) -> {
          return Boolean.valueOf((c.getOperationDeclaration().getName().equals(op.getOperationDeclaration().getName()) && ((((c.getOperationDeclaration().getReturnType() instanceof SimpleTypes) && (op.getOperationDeclaration().getReturnType() instanceof SimpleTypes)) && (Objects.equal(((SimpleTypes) c.getOperationDeclaration().getReturnType()).getReferended(), ((SimpleTypes) op.getOperationDeclaration().getReturnType()).getReferended()) || Objects.equal(((SimpleTypes) c.getOperationDeclaration().getReturnType()).getDefaultType(), ((SimpleTypes) op.getOperationDeclaration().getReturnType()).getDefaultType()))) || (((((c.getOperationDeclaration().getReturnType() instanceof CollectionType) && (op.getOperationDeclaration().getReturnType() instanceof CollectionType)) && (((Object[])Conversions.unwrapArray(((CollectionType) c.getOperationDeclaration().getReturnType()).getType(), Object.class)).length == ((Object[])Conversions.unwrapArray(((CollectionType) op.getOperationDeclaration().getReturnType()).getType(), Object.class)).length)) && Objects.equal(((CollectionType) c.getOperationDeclaration().getReturnType()).getCollection(), ((CollectionType) op.getOperationDeclaration().getReturnType()).getCollection())) && (((((Object[])Conversions.unwrapArray(((CollectionType) c.getOperationDeclaration().getReturnType()).getType(), Object.class)).length == 0) || ((((((CollectionType) c.getOperationDeclaration().getReturnType()).getType().get(0) instanceof SimpleTypes) && (((CollectionType) op.getOperationDeclaration().getReturnType()).getType().get(0) instanceof SimpleTypes)) && Objects.equal(((SimpleTypes) ((CollectionType) c.getOperationDeclaration().getReturnType()).getType().get(0)).getReferended(), ((SimpleTypes) ((CollectionType) op.getOperationDeclaration().getReturnType()).getType().get(0)).getReferended())) || Objects.equal(((SimpleTypes) ((CollectionType) c.getOperationDeclaration().getReturnType()).getType().get(0)).getDefaultType(), ((SimpleTypes) ((CollectionType) op.getOperationDeclaration().getReturnType()).getType().get(0)).getDefaultType()))) || (((((CollectionType) c.getOperationDeclaration().getReturnType()).getType().get(0) instanceof CollectionType) && (((CollectionType) op.getOperationDeclaration().getReturnType()).getType().get(0) instanceof CollectionType)) && Objects.equal(((CollectionType) ((CollectionType) c.getOperationDeclaration().getReturnType()).getType().get(0)).getCollection(), ((CollectionType) ((CollectionType) op.getOperationDeclaration().getReturnType()).getType().get(0)).getCollection())))))));
        };
        CharSequence _compileOperation = this.compileOperation(op, IterableExtensions.<OperationConstraints>filter(IterableExtensions.<OperationContext, OperationConstraints>map(conditions, _function), _function_1));
        _builder.append(_compileOperation);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  private CharSequence compileOperation(final OperationType op, final Iterable<OperationConstraints> conditions) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<ownedOperation xmi:id=\"");
    int _identityHashCode = System.identityHashCode(op.getOperationDeclaration());
    _builder.append(_identityHashCode);
    _builder.append("\" name=\"");
    String _name = op.getOperationDeclaration().getName();
    _builder.append(_name);
    _builder.append("\" ");
    {
      if (((op instanceof OperationQuery) && (((OperationQuery) op).getOperationbody() != null))) {
        _builder.append("bodyCondition=\"");
        String _string = Integer.valueOf(System.identityHashCode(op)).toString();
        int _identityHashCode_1 = System.identityHashCode(((OperationQuery) op).getOperationbody());
        String _plus = (_string + Integer.valueOf(_identityHashCode_1));
        _builder.append(_plus);
        _builder.append("\"");
      } else {
        if (((op instanceof OperationComplex) && (((OperationComplex) op).getOperationbody() != null))) {
          _builder.append("bodyCondition=\"");
          String _string_1 = Integer.valueOf(System.identityHashCode(op)).toString();
          int _identityHashCode_2 = System.identityHashCode(((OperationComplex) op).getOperationbody());
          String _plus_1 = (_string_1 + Integer.valueOf(_identityHashCode_2));
          _builder.append(_plus_1);
          _builder.append("\"");
        }
      }
    }
    _builder.append(" postcondition=\"");
    {
      Iterable<Postcondition> _filter = Iterables.<Postcondition>filter(op.getConditions(), Postcondition.class);
      for(final Postcondition post : _filter) {
        int _identityHashCode_3 = System.identityHashCode(post);
        _builder.append(_identityHashCode_3);
        _builder.append(" ");
      }
    }
    {
      for(final OperationConstraints context : conditions) {
        {
          Iterable<Postcondition> _filter_1 = Iterables.<Postcondition>filter(context.getConditions(), Postcondition.class);
          for(final Postcondition post_1 : _filter_1) {
            int _identityHashCode_4 = System.identityHashCode(post_1);
            _builder.append(_identityHashCode_4);
            _builder.append(" ");
          }
        }
      }
    }
    _builder.append("\" precondition=\"");
    {
      Iterable<Precondition> _filter_2 = Iterables.<Precondition>filter(op.getConditions(), Precondition.class);
      for(final Precondition pre : _filter_2) {
        int _identityHashCode_5 = System.identityHashCode(pre);
        _builder.append(_identityHashCode_5);
        _builder.append(" ");
      }
    }
    {
      for(final OperationConstraints context_1 : conditions) {
        {
          Iterable<Precondition> _filter_3 = Iterables.<Precondition>filter(context_1.getConditions(), Precondition.class);
          for(final Precondition pre_1 : _filter_3) {
            int _identityHashCode_6 = System.identityHashCode(pre_1);
            _builder.append(_identityHashCode_6);
            _builder.append(" ");
          }
        }
      }
    }
    _builder.append("\" ");
    {
      if ((op instanceof OperationQuery)) {
        _builder.append("isQuery=\"true\"");
      }
    }
    _builder.append(">");
    _builder.newLineIfNotEmpty();
    {
      if (((op instanceof OperationQuery) && (((OperationQuery) op).getOperationbody() != null))) {
        _builder.append("\t");
        ExpCS _operationbody = ((OperationQuery) op).getOperationbody();
        String _string_2 = Integer.valueOf(System.identityHashCode(op)).toString();
        int _identityHashCode_7 = System.identityHashCode(((OperationQuery) op).getOperationbody());
        String _plus_2 = (_string_2 + Integer.valueOf(_identityHashCode_7));
        CharSequence _compileOwnedRule = this.compileOwnedRule(_operationbody, _plus_2, "", "");
        _builder.append(_compileOwnedRule, "\t");
        _builder.newLineIfNotEmpty();
      } else {
        if (((op instanceof OperationComplex) && (((OperationComplex) op).getOperationbody() != null))) {
          _builder.append("\t");
          String _operationbody_1 = ((OperationComplex) op).getOperationbody();
          String _string_3 = Integer.valueOf(System.identityHashCode(op)).toString();
          int _identityHashCode_8 = System.identityHashCode(((OperationComplex) op).getOperationbody());
          String _plus_3 = (_string_3 + Integer.valueOf(_identityHashCode_8));
          CharSequence _compileOwnedRuleString = this.compileOwnedRuleString(_operationbody_1, _plus_3, "", "");
          _builder.append(_compileOwnedRuleString, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    {
      EList<ConditionType> _conditions = op.getConditions();
      for(final ConditionType cond : _conditions) {
        _builder.append("\t");
        CharSequence _compileOwnedRule_1 = this.compileOwnedRule(cond.getOclexpression(), Integer.valueOf(System.identityHashCode(cond)).toString(), cond.getName(), "");
        _builder.append(_compileOwnedRule_1, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      for(final OperationConstraints context_2 : conditions) {
        {
          EList<ConditionType> _conditions_1 = context_2.getConditions();
          for(final ConditionType cond_1 : _conditions_1) {
            _builder.append("\t");
            CharSequence _compileOwnedRule_2 = this.compileOwnedRule(cond_1.getOclexpression(), Integer.valueOf(System.identityHashCode(cond_1)).toString(), cond_1.getName(), "");
            _builder.append(_compileOwnedRule_2, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      AllTypes _returnType = op.getOperationDeclaration().getReturnType();
      boolean _tripleNotEquals = (_returnType != null);
      if (_tripleNotEquals) {
        _builder.append("\t");
        CharSequence _compileReturnType = this.compileReturnType(op.getOperationDeclaration().getReturnType(), System.identityHashCode(op));
        _builder.append(_compileReturnType, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Parameter> _parameters = op.getOperationDeclaration().getParameters();
      for(final Parameter parameter : _parameters) {
        _builder.append("\t");
        CharSequence _compileParameter = this.compileParameter(parameter);
        _builder.append(_compileParameter, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</ownedOperation>\t");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compileOwnedRule(final ExpCS e, final String id, final String name, final String constrainedElement) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<ownedRule xmi:id=\"");
    _builder.append(id);
    _builder.append("\" name=\"");
    _builder.append(name);
    _builder.append("\" ");
    _builder.append(constrainedElement);
    _builder.append(">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<specification xmi:type=\"uml:OpaqueExpression\" xmi:id=\"");
    String _string = Integer.valueOf(System.identityHashCode(e)).toString();
    String _plus = (_string + id);
    _builder.append(_plus, "\t");
    _builder.append("\" name=\"");
    _builder.append(name, "\t");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t   \t");
    _builder.append("<language>OCL2.0</language>");
    _builder.newLine();
    _builder.append("\t   \t  \t");
    _builder.append("<body>");
    CharSequence _compileExpCSToShow = this.compileExpCSToShow(e);
    _builder.append(_compileExpCSToShow, "\t   \t  \t");
    _builder.append("</body>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t  \t");
    _builder.append("</specification>");
    _builder.newLine();
    _builder.append("</ownedRule>");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compileExpCSToShow(final ExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    String _replaceAll = this.compileExpCS(e).toString().replaceAll(System.getProperty("line.separator"), "").replaceAll("<", "&lt;").replaceAll(">", "&gt;");
    _builder.append(_replaceAll);
    return _builder;
  }
  
  private CharSequence compileOwnedRuleString(final String e, final String id, final String name, final String constrainedElement) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<ownedRule xmi:id=\"");
    _builder.append(id);
    _builder.append("\" name=\"");
    _builder.append(name);
    _builder.append("\" ");
    _builder.append(constrainedElement);
    _builder.append(">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<specification xmi:type=\"uml:OpaqueExpression\" xmi:id=\"");
    String _string = Integer.valueOf(System.identityHashCode(e)).toString();
    String _plus = (_string + id);
    _builder.append(_plus, "\t");
    _builder.append("\" name=\"");
    _builder.append(name, "\t");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t   \t");
    _builder.append("<language>OCL2.0</language>");
    _builder.newLine();
    _builder.append("\t   \t  \t");
    _builder.append("<body>");
    int _length = e.length();
    int _minus = (_length - 1);
    String _substring = e.substring(1, _minus);
    _builder.append(_substring, "\t   \t  \t");
    _builder.append("</body>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t  \t");
    _builder.append("</specification>");
    _builder.newLine();
    _builder.append("</ownedRule>");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compileReturnType(final AllTypes e, final int idOp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<ownedParameter xmi:id=\"");
    String _string = Integer.valueOf(System.identityHashCode(e)).toString();
    String _plus = (_string + Integer.valueOf(idOp));
    _builder.append(_plus);
    _builder.append("\" name=\"\" ");
    {
      if ((((e != null) && (e instanceof SimpleTypes)) && (((SimpleTypes) e).getReferended() != null))) {
        _builder.append("type=\"");
        int _identityHashCode = System.identityHashCode(((SimpleTypes) e).getReferended());
        _builder.append(_identityHashCode);
        _builder.append("\"");
      } else {
        if (((((((e != null) && (e instanceof CollectionType)) && (((CollectionType) e).getType() != null)) && (((Object[])Conversions.unwrapArray(((CollectionType) e).getType(), Object.class)).length > 0)) && (((CollectionType) e).getType().get(0) instanceof SimpleTypes)) && (((SimpleTypes) ((CollectionType) e).getType().get(0)).getReferended() != null))) {
          _builder.append("type=\"");
          SimpleTypes _get = ((CollectionType) e).getType().get(0);
          int _identityHashCode_1 = System.identityHashCode(((SimpleTypes) _get).getReferended());
          _builder.append(_identityHashCode_1);
          _builder.append("\"");
        }
      }
    }
    _builder.append(" direction=\"return\"");
    {
      if (((e != null) && (e instanceof CollectionType))) {
        CharSequence _compileCollection = this.compileCollection(((CollectionType) e).getCollection());
        _builder.append(_compileCollection);
      }
    }
    _builder.append(">");
    _builder.newLineIfNotEmpty();
    {
      if ((((e != null) && (e instanceof SimpleTypes)) && (((SimpleTypes) e).getDefaultType() != null))) {
        CharSequence _compileDefaultType = this.compileDefaultType(((SimpleTypes) e).getDefaultType());
        _builder.append(_compileDefaultType);
        _builder.newLineIfNotEmpty();
      } else {
        if (((((((e != null) && (e instanceof CollectionType)) && (((CollectionType) e).getType() != null)) && (((Object[])Conversions.unwrapArray(((CollectionType) e).getType(), Object.class)).length > 0)) && (((CollectionType) e).getType().get(0) instanceof SimpleTypes)) && (((SimpleTypes) ((CollectionType) e).getType().get(0)).getDefaultType() != null))) {
          SimpleTypes _get_1 = ((CollectionType) e).getType().get(0);
          CharSequence _compileDefaultType_1 = this.compileDefaultType(((SimpleTypes) _get_1).getDefaultType());
          _builder.append(_compileDefaultType_1);
          _builder.newLineIfNotEmpty();
          _builder.append("<lowerValue xmi:type=\"uml:LiteralUnlimitedNatural\" xmi:id=\"");
          String _string_1 = Integer.valueOf(System.identityHashCode(e)).toString();
          String _plus_1 = (_string_1 + Integer.valueOf(idOp));
          String _plus_2 = (_plus_1 + "_01");
          _builder.append(_plus_2);
          _builder.append("\" name=\"\" visibility=\"public\"/>");
          _builder.newLineIfNotEmpty();
          _builder.append("<upperValue xmi:type=\"uml:LiteralUnlimitedNatural\" xmi:id=\"");
          String _string_2 = Integer.valueOf(System.identityHashCode(e)).toString();
          String _plus_3 = (_string_2 + Integer.valueOf(idOp));
          String _plus_4 = (_plus_3 + "_02");
          _builder.append(_plus_4);
          _builder.append("\" name=\"\" visibility=\"public\" value=\"*\"/>");
          _builder.newLineIfNotEmpty();
        } else {
          if (((((((e != null) && (e instanceof CollectionType)) && (((CollectionType) e).getType() != null)) && (((Object[])Conversions.unwrapArray(((CollectionType) e).getType(), Object.class)).length > 0)) && (((CollectionType) e).getType().get(0) instanceof SimpleTypes)) && (((SimpleTypes) ((CollectionType) e).getType().get(0)).getReferended() != null))) {
            _builder.append("<lowerValue xmi:type=\"uml:LiteralUnlimitedNatural\" xmi:id=\"");
            String _string_3 = Integer.valueOf(System.identityHashCode(e)).toString();
            String _plus_5 = (_string_3 + Integer.valueOf(idOp));
            String _plus_6 = (_plus_5 + "_01");
            _builder.append(_plus_6);
            _builder.append("\" name=\"\" visibility=\"public\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<upperValue xmi:type=\"uml:LiteralUnlimitedNatural\" xmi:id=\"");
            String _string_4 = Integer.valueOf(System.identityHashCode(e)).toString();
            String _plus_7 = (_string_4 + Integer.valueOf(idOp));
            String _plus_8 = (_plus_7 + "_02");
            _builder.append(_plus_8);
            _builder.append("\" name=\"\" visibility=\"public\" value=\"*\"/>");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("</ownedParameter>");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compileParameter(final Parameter e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<ownedParameter xmi:id=\"");
    int _identityHashCode = System.identityHashCode(e);
    _builder.append(_identityHashCode);
    _builder.append("\" name=\"");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("\" ");
    {
      if ((((e.getType() != null) && (e.getType() instanceof SimpleTypes)) && (((SimpleTypes) e.getType()).getReferended() != null))) {
        _builder.append("type=\"");
        AllTypes _type = e.getType();
        int _identityHashCode_1 = System.identityHashCode(((SimpleTypes) _type).getReferended());
        _builder.append(_identityHashCode_1);
        _builder.append("\"");
      } else {
        if (((((((e.getType() != null) && (e.getType() instanceof CollectionType)) && (((CollectionType) e.getType()).getType() != null)) && (((Object[])Conversions.unwrapArray(((CollectionType) e.getType()).getType(), Object.class)).length > 0)) && (((CollectionType) e.getType()).getType().get(0) instanceof SimpleTypes)) && (((SimpleTypes) ((CollectionType) e.getType()).getType().get(0)).getReferended() != null))) {
          _builder.append("type=\"");
          AllTypes _type_1 = e.getType();
          SimpleTypes _get = ((CollectionType) _type_1).getType().get(0);
          int _identityHashCode_2 = System.identityHashCode(((SimpleTypes) _get).getReferended());
          _builder.append(_identityHashCode_2);
          _builder.append("\"");
        }
      }
    }
    {
      if (((e.getType() != null) && (e.getType() instanceof CollectionType))) {
        AllTypes _type_2 = e.getType();
        CharSequence _compileCollection = this.compileCollection(((CollectionType) _type_2).getCollection());
        _builder.append(_compileCollection);
      }
    }
    _builder.append(">");
    _builder.newLineIfNotEmpty();
    {
      if ((((e.getType() != null) && (e.getType() instanceof SimpleTypes)) && (((SimpleTypes) e.getType()).getDefaultType() != null))) {
        AllTypes _type_3 = e.getType();
        CharSequence _compileDefaultType = this.compileDefaultType(((SimpleTypes) _type_3).getDefaultType());
        _builder.append(_compileDefaultType);
        _builder.newLineIfNotEmpty();
      } else {
        if (((((((e.getType() != null) && (e.getType() instanceof CollectionType)) && (((CollectionType) e.getType()).getType() != null)) && (((Object[])Conversions.unwrapArray(((CollectionType) e.getType()).getType(), Object.class)).length > 0)) && (((CollectionType) e.getType()).getType().get(0) instanceof SimpleTypes)) && (((SimpleTypes) ((CollectionType) e.getType()).getType().get(0)).getDefaultType() != null))) {
          AllTypes _type_4 = e.getType();
          SimpleTypes _get_1 = ((CollectionType) _type_4).getType().get(0);
          CharSequence _compileDefaultType_1 = this.compileDefaultType(((SimpleTypes) _get_1).getDefaultType());
          _builder.append(_compileDefaultType_1);
          _builder.newLineIfNotEmpty();
          _builder.append("<lowerValue xmi:type=\"uml:LiteralUnlimitedNatural\" xmi:id=\"");
          int _identityHashCode_3 = System.identityHashCode(e);
          String _plus = (Integer.valueOf(_identityHashCode_3) + "_01");
          _builder.append(_plus);
          _builder.append("\" name=\"\" visibility=\"public\"/>");
          _builder.newLineIfNotEmpty();
          _builder.append("<upperValue xmi:type=\"uml:LiteralUnlimitedNatural\" xmi:id=\"");
          int _identityHashCode_4 = System.identityHashCode(e);
          String _plus_1 = (Integer.valueOf(_identityHashCode_4) + "_02");
          _builder.append(_plus_1);
          _builder.append("\" name=\"\" visibility=\"public\" value=\"*\"/>");
          _builder.newLineIfNotEmpty();
        } else {
          if (((((((e.getType() != null) && (e.getType() instanceof CollectionType)) && (((CollectionType) e.getType()).getType() != null)) && (((Object[])Conversions.unwrapArray(((CollectionType) e.getType()).getType(), Object.class)).length > 0)) && (((CollectionType) e.getType()).getType().get(0) instanceof SimpleTypes)) && (((SimpleTypes) ((CollectionType) e.getType()).getType().get(0)).getReferended() != null))) {
            _builder.append("<lowerValue xmi:type=\"uml:LiteralUnlimitedNatural\" xmi:id=\"");
            int _identityHashCode_5 = System.identityHashCode(e);
            String _plus_2 = (Integer.valueOf(_identityHashCode_5) + "_01");
            _builder.append(_plus_2);
            _builder.append("\" name=\"\" visibility=\"public\"/>");
            _builder.newLineIfNotEmpty();
            _builder.append("<upperValue xmi:type=\"uml:LiteralUnlimitedNatural\" xmi:id=\"");
            int _identityHashCode_6 = System.identityHashCode(e);
            String _plus_3 = (Integer.valueOf(_identityHashCode_6) + "_02");
            _builder.append(_plus_3);
            _builder.append("\" name=\"\" visibility=\"public\" value=\"*\"/>\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("</ownedParameter>");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compileDefaultType(final String e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equalsIgnoreCase = e.equalsIgnoreCase("String");
      if (_equalsIgnoreCase) {
        _builder.append("<type xmi:type=\"uml:PrimitiveType\" href=\"pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String\"/>");
        _builder.newLine();
      } else {
        boolean _equalsIgnoreCase_1 = e.equalsIgnoreCase("Integer");
        if (_equalsIgnoreCase_1) {
          _builder.append("<type xmi:type=\"uml:PrimitiveType\" href=\"pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer\"/>");
          _builder.newLine();
        } else {
          boolean _equalsIgnoreCase_2 = e.equalsIgnoreCase("Real");
          if (_equalsIgnoreCase_2) {
            _builder.append("<type xmi:type=\"uml:PrimitiveType\" href=\"pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double\"/>");
            _builder.newLine();
          } else {
            boolean _equalsIgnoreCase_3 = e.equalsIgnoreCase("Boolean");
            if (_equalsIgnoreCase_3) {
              _builder.append("<type xmi:type=\"uml:PrimitiveType\" href=\"pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean\"/>");
              _builder.newLine();
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence compileAssociationClass(final AssociationClass e, final Iterable<Type> associations, final Iterable<ContextsType> constraints) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<packagedElement xmi:type=\"uml:AssociationClass\" xmi:id=\"");
    int _identityHashCode = System.identityHashCode(e);
    _builder.append(_identityHashCode);
    _builder.append("\" name=\"");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("\"");
    {
      boolean _isAbstract = e.isAbstract();
      if (_isAbstract) {
        _builder.append(" isAbstract=\"true\"");
      }
    }
    _builder.append(" memberEnd=\"");
    {
      EList<AssociationEnd> _associationEnds = e.getAssociationEnds();
      for(final AssociationEnd end : _associationEnds) {
        int _identityHashCode_1 = System.identityHashCode(end);
        _builder.append(_identityHashCode_1);
        _builder.append(" ");
      }
    }
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      ConstraintsBase _constraints = e.getConstraints();
      boolean _tripleNotEquals = (_constraints != null);
      if (_tripleNotEquals) {
        CharSequence _compileConstraintsBase = this.compileConstraintsBase(e.getConstraints().getInvariants(), System.identityHashCode(e));
        _builder.append(_compileConstraintsBase);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((constraints != null)) {
        {
          Iterable<InvariantContext> _filter = Iterables.<InvariantContext>filter(constraints, InvariantContext.class);
          for(final InvariantContext invContext : _filter) {
            CharSequence _compileConstraintsBase_1 = this.compileConstraintsBase(invContext.getInvariants(), System.identityHashCode(e));
            _builder.append(_compileConstraintsBase_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EList<Generalization> _generalization = e.getGeneralization();
      for(final Generalization generalization : _generalization) {
        CharSequence _compileGeneralization = this.compileGeneralization(generalization);
        _builder.append(_compileGeneralization);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      AttributesBase _attributes = e.getAttributes();
      boolean _tripleNotEquals_1 = (_attributes != null);
      if (_tripleNotEquals_1) {
        CharSequence _compileAttributesBase = this.compileAttributesBase(e.getAttributes());
        _builder.append(_compileAttributesBase);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      final Function1<Association, Boolean> _function = (Association a) -> {
        final Function1<AssociationEnd, AllClass> _function_1 = (AssociationEnd it) -> {
          return it.getType();
        };
        return Boolean.valueOf(ListExtensions.<AssociationEnd, AllClass>map(a.getAssociationEnds(), _function_1).contains(e));
      };
      Iterable<Association> _filter_1 = IterableExtensions.<Association>filter(Iterables.<Association>filter(associations, Association.class), _function);
      for(final Association association : _filter_1) {
        {
          final Function1<AssociationEnd, AllClass> _function_1 = (AssociationEnd it) -> {
            return it.getType();
          };
          int _length = ((Object[])Conversions.unwrapArray(IterableExtensions.<AllClass>toSet(ListExtensions.<AssociationEnd, AllClass>map(association.getAssociationEnds(), _function_1)), Object.class)).length;
          int _length_1 = ((Object[])Conversions.unwrapArray(association.getAssociationEnds(), Object.class)).length;
          boolean _equals = (_length == _length_1);
          if (_equals) {
            CharSequence _compileAssociationEnd = this.compileAssociationEnd(e, association.getAssociationEnds(), System.identityHashCode(association), this.getTypeAssociation(association).toString(), Boolean.valueOf(false));
            _builder.append(_compileAssociationEnd);
            _builder.newLineIfNotEmpty();
          } else {
            CharSequence _compileAssociationEnd_1 = this.compileAssociationEnd(e, association.getAssociationEnds(), System.identityHashCode(association), this.getTypeAssociation(association).toString(), Boolean.valueOf(true));
            _builder.append(_compileAssociationEnd_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      final Function1<AssociationClass, Boolean> _function_2 = (AssociationClass a) -> {
        final Function1<AssociationEnd, AllClass> _function_3 = (AssociationEnd it) -> {
          return it.getType();
        };
        return Boolean.valueOf(ListExtensions.<AssociationEnd, AllClass>map(a.getAssociationEnds(), _function_3).contains(e));
      };
      Iterable<AssociationClass> _filter_2 = IterableExtensions.<AssociationClass>filter(Iterables.<AssociationClass>filter(associations, AssociationClass.class), _function_2);
      for(final AssociationClass association_1 : _filter_2) {
        {
          final Function1<AssociationEnd, AllClass> _function_3 = (AssociationEnd it) -> {
            return it.getType();
          };
          int _length_2 = ((Object[])Conversions.unwrapArray(IterableExtensions.<AllClass>toSet(ListExtensions.<AssociationEnd, AllClass>map(association_1.getAssociationEnds(), _function_3)), Object.class)).length;
          int _length_3 = ((Object[])Conversions.unwrapArray(association_1.getAssociationEnds(), Object.class)).length;
          boolean _equals_1 = (_length_2 == _length_3);
          if (_equals_1) {
            CharSequence _compileAssociationEnd_2 = this.compileAssociationEnd(e, association_1.getAssociationEnds(), System.identityHashCode(association_1), "", Boolean.valueOf(false));
            _builder.append(_compileAssociationEnd_2);
            _builder.newLineIfNotEmpty();
          } else {
            CharSequence _compileAssociationEnd_3 = this.compileAssociationEnd(e, association_1.getAssociationEnds(), System.identityHashCode(association_1), "", Boolean.valueOf(true));
            _builder.append(_compileAssociationEnd_3);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      OperationsBase _operations = e.getOperations();
      boolean _tripleNotEquals_2 = (_operations != null);
      if (_tripleNotEquals_2) {
        CharSequence _compileOperationsBase = this.compileOperationsBase(e.getOperations(), Iterables.<OperationContext>filter(constraints, OperationContext.class));
        _builder.append(_compileOperationsBase);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      StateMachinesBase _statemachines = e.getStatemachines();
      boolean _tripleNotEquals_3 = (_statemachines != null);
      if (_tripleNotEquals_3) {
        CharSequence _compileStateMachinesBase = this.compileStateMachinesBase(e.getStatemachines());
        _builder.append(_compileStateMachinesBase);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</packagedElement>\t\t");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compileAssociation(final Association e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<packagedElement xmi:type=\"uml:Association\" xmi:id=\"");
    int _identityHashCode = System.identityHashCode(e);
    _builder.append(_identityHashCode);
    _builder.append("\" name=\"");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("\" memberEnd=\"");
    {
      EList<AssociationEnd> _associationEnds = e.getAssociationEnds();
      for(final AssociationEnd end : _associationEnds) {
        int _identityHashCode_1 = System.identityHashCode(end);
        _builder.append(_identityHashCode_1);
        _builder.append(" ");
      }
    }
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence compileExpCS(final ExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof CollectionLiteralExpCS)) {
        CharSequence _compileCollectionLiteralExpCS = this.compileCollectionLiteralExpCS(((CollectionLiteralExpCS)e));
        _builder.append(_compileCollectionLiteralExpCS);
        _builder.newLineIfNotEmpty();
      } else {
        if ((e instanceof IfExpCS)) {
          CharSequence _compileIfExpCS = this.compileIfExpCS(((IfExpCS)e));
          _builder.append(_compileIfExpCS);
          _builder.newLineIfNotEmpty();
        } else {
          if ((e instanceof InfixExpCS)) {
            CharSequence _compileInfixExpCS = this.compileInfixExpCS(((InfixExpCS)e));
            _builder.append(_compileInfixExpCS);
            _builder.newLineIfNotEmpty();
          } else {
            if ((e instanceof LambdaLiteralExpCS)) {
              CharSequence _compileLambdaLiteralExpCS = this.compileLambdaLiteralExpCS(((LambdaLiteralExpCS)e));
              _builder.append(_compileLambdaLiteralExpCS);
              _builder.newLineIfNotEmpty();
            } else {
              if ((e instanceof LetExpCS)) {
                CharSequence _compileLetExpCS = this.compileLetExpCS(((LetExpCS)e));
                _builder.append(_compileLetExpCS);
                _builder.newLineIfNotEmpty();
              } else {
                if ((e instanceof MapLiteralExpCS)) {
                  CharSequence _compileMapLiteralExpCS = this.compileMapLiteralExpCS(((MapLiteralExpCS)e));
                  _builder.append(_compileMapLiteralExpCS);
                  _builder.newLineIfNotEmpty();
                } else {
                  if ((e instanceof NameExpCS)) {
                    CharSequence _compileNameExpCS = this.compileNameExpCS(((NameExpCS)e));
                    _builder.append(_compileNameExpCS);
                    _builder.newLineIfNotEmpty();
                  } else {
                    if ((e instanceof NestedExpCS)) {
                      CharSequence _compileNestedExpCS = this.compileNestedExpCS(((NestedExpCS)e));
                      _builder.append(_compileNestedExpCS);
                      _builder.newLineIfNotEmpty();
                    } else {
                      if ((e instanceof PrefixExpCS)) {
                        CharSequence _compilePrefixExpCS = this.compilePrefixExpCS(((PrefixExpCS)e));
                        _builder.append(_compilePrefixExpCS);
                        _builder.newLineIfNotEmpty();
                      } else {
                        if ((e instanceof PrimitiveLiteralExpCS)) {
                          CharSequence _compilePrimitiveLiteralExpCS = this.compilePrimitiveLiteralExpCS(((PrimitiveLiteralExpCS)e));
                          _builder.append(_compilePrimitiveLiteralExpCS);
                          _builder.newLineIfNotEmpty();
                        } else {
                          if ((e instanceof TupleLiteralExpCS)) {
                            CharSequence _compileTupleLiteralExpCS = this.compileTupleLiteralExpCS(((TupleLiteralExpCS)e));
                            _builder.append(_compileTupleLiteralExpCS);
                            _builder.newLineIfNotEmpty();
                          } else {
                            if ((e instanceof TypeLiteralExpCS)) {
                              CharSequence _compileTypeLiteralExpCS = this.compileTypeLiteralExpCS(((TypeLiteralExpCS)e));
                              _builder.append(_compileTypeLiteralExpCS);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence compileTypedRefCS(final TypedRefCS e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof CollectionPatternCS)) {
        CharSequence _compileCollectionPatternCS = this.compileCollectionPatternCS(((CollectionPatternCS)e));
        _builder.append(_compileCollectionPatternCS);
        _builder.append(" ");
        {
          MultiplicityCS _ownedMultiplicity = ((CollectionPatternCS)e).getOwnedMultiplicity();
          boolean _tripleNotEquals = (_ownedMultiplicity != null);
          if (_tripleNotEquals) {
            _builder.append(" ");
            CharSequence _compileMultiplicityCS = this.compileMultiplicityCS(((CollectionPatternCS)e).getOwnedMultiplicity());
            _builder.append(_compileMultiplicityCS);
          }
        }
        _builder.newLineIfNotEmpty();
      } else {
        if ((e instanceof CollectionTypeCS)) {
          Object _compileCollectionTypeCS = this.compileCollectionTypeCS(((CollectionTypeCS)e));
          _builder.append(_compileCollectionTypeCS);
          _builder.append(" ");
          {
            MultiplicityCS _ownedMultiplicity_1 = ((CollectionTypeCS)e).getOwnedMultiplicity();
            boolean _tripleNotEquals_1 = (_ownedMultiplicity_1 != null);
            if (_tripleNotEquals_1) {
              _builder.append(" ");
              CharSequence _compileMultiplicityCS_1 = this.compileMultiplicityCS(((CollectionTypeCS)e).getOwnedMultiplicity());
              _builder.append(_compileMultiplicityCS_1);
            }
          }
          _builder.newLineIfNotEmpty();
        } else {
          if ((e instanceof MapTypeCS)) {
            CharSequence _compileMapTypeCS = this.compileMapTypeCS(((MapTypeCS)e));
            _builder.append(_compileMapTypeCS);
            _builder.append(" ");
            {
              MultiplicityCS _ownedMultiplicity_2 = ((MapTypeCS)e).getOwnedMultiplicity();
              boolean _tripleNotEquals_2 = (_ownedMultiplicity_2 != null);
              if (_tripleNotEquals_2) {
                _builder.append(" ");
                CharSequence _compileMultiplicityCS_2 = this.compileMultiplicityCS(((MapTypeCS)e).getOwnedMultiplicity());
                _builder.append(_compileMultiplicityCS_2);
              }
            }
            _builder.newLineIfNotEmpty();
          } else {
            if ((e instanceof PrimitiveTypeRefCS)) {
              CharSequence _compilePrimitiveTypeRefCS = this.compilePrimitiveTypeRefCS(((PrimitiveTypeRefCS)e));
              _builder.append(_compilePrimitiveTypeRefCS);
              _builder.append(" ");
              {
                MultiplicityCS _ownedMultiplicity_3 = ((PrimitiveTypeRefCS)e).getOwnedMultiplicity();
                boolean _tripleNotEquals_3 = (_ownedMultiplicity_3 != null);
                if (_tripleNotEquals_3) {
                  _builder.append(" ");
                  CharSequence _compileMultiplicityCS_3 = this.compileMultiplicityCS(((PrimitiveTypeRefCS)e).getOwnedMultiplicity());
                  _builder.append(_compileMultiplicityCS_3);
                }
              }
              _builder.newLineIfNotEmpty();
            } else {
              if ((e instanceof TupleTypeCS)) {
                CharSequence _compileTupleTypeCS = this.compileTupleTypeCS(((TupleTypeCS)e));
                _builder.append(_compileTupleTypeCS);
                _builder.append(" ");
                {
                  MultiplicityCS _ownedMultiplicity_4 = ((TupleTypeCS)e).getOwnedMultiplicity();
                  boolean _tripleNotEquals_4 = (_ownedMultiplicity_4 != null);
                  if (_tripleNotEquals_4) {
                    _builder.append(" ");
                    CharSequence _compileMultiplicityCS_4 = this.compileMultiplicityCS(((TupleTypeCS)e).getOwnedMultiplicity());
                    _builder.append(_compileMultiplicityCS_4);
                  }
                }
                _builder.newLineIfNotEmpty();
              } else {
                if ((e instanceof TypeNameExpCS)) {
                  CharSequence _compileTypeNameExpCS = this.compileTypeNameExpCS(((TypeNameExpCS)e));
                  _builder.append(_compileTypeNameExpCS);
                  _builder.append(" ");
                  {
                    MultiplicityCS _ownedMultiplicity_5 = ((TypeNameExpCS)e).getOwnedMultiplicity();
                    boolean _tripleNotEquals_5 = (_ownedMultiplicity_5 != null);
                    if (_tripleNotEquals_5) {
                      _builder.append(" ");
                      CharSequence _compileMultiplicityCS_5 = this.compileMultiplicityCS(((TypeNameExpCS)e).getOwnedMultiplicity());
                      _builder.append(_compileMultiplicityCS_5);
                    }
                  }
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence compileMultiplicityCS(final MultiplicityCS e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof MultiplicityBoundsCS)) {
        _builder.append("[");
        String _lowerBound = ((MultiplicityBoundsCS)e).getLowerBound();
        _builder.append(_lowerBound);
        {
          String _upperBound = ((MultiplicityBoundsCS)e).getUpperBound();
          boolean _tripleNotEquals = (_upperBound != null);
          if (_tripleNotEquals) {
            _builder.append("..");
            String _upperBound_1 = ((MultiplicityBoundsCS)e).getUpperBound();
            _builder.append(_upperBound_1);
          }
        }
        {
          String _symbol = ((MultiplicityBoundsCS)e).getSymbol();
          boolean _tripleNotEquals_1 = (_symbol != null);
          if (_tripleNotEquals_1) {
            _builder.append(" ");
            String _symbol_1 = ((MultiplicityBoundsCS)e).getSymbol();
            _builder.append(_symbol_1);
          }
        }
        _builder.append("]");
        _builder.newLineIfNotEmpty();
      } else {
        if ((e instanceof MultiplicityStringCS)) {
          _builder.append("[");
          String _stringBounds = ((MultiplicityStringCS)e).getStringBounds();
          _builder.append(_stringBounds);
          {
            String _symbol_2 = ((MultiplicityStringCS)e).getSymbol();
            boolean _tripleNotEquals_2 = (_symbol_2 != null);
            if (_tripleNotEquals_2) {
              _builder.append(" ");
              String _symbol_3 = ((MultiplicityStringCS)e).getSymbol();
              _builder.append(_symbol_3);
            }
          }
          _builder.append("]");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  private CharSequence compileCollectionTypeCS(final CollectionTypeCS e) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = e.getName();
    _builder.append(_name);
    {
      TypedRefCS _ownedType = e.getOwnedType();
      boolean _tripleNotEquals = (_ownedType != null);
      if (_tripleNotEquals) {
        _builder.append("(");
        CharSequence _compileTypedRefCS = this.compileTypedRefCS(e.getOwnedType());
        _builder.append(_compileTypedRefCS);
        {
          MultiplicityCS _ownedCollectionMultiplicity = e.getOwnedCollectionMultiplicity();
          boolean _tripleNotEquals_1 = (_ownedCollectionMultiplicity != null);
          if (_tripleNotEquals_1) {
            _builder.append(" ");
            CharSequence _compileMultiplicityCS = this.compileMultiplicityCS(e.getOwnedCollectionMultiplicity());
            _builder.append(_compileMultiplicityCS);
          }
        }
        _builder.append(")");
      }
    }
    return _builder;
  }
  
  private CharSequence compileCollectionLiteralExpCS(final CollectionLiteralExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compileCollectionTypeCS = this.compileCollectionTypeCS(e.getOwnedType());
    _builder.append(_compileCollectionTypeCS);
    _builder.append("{");
    {
      int _length = ((Object[])Conversions.unwrapArray(e.getOwnedParts(), Object.class)).length;
      boolean _greaterThan = (_length > 0);
      if (_greaterThan) {
        CharSequence _compileCollectionLiteralPartCS = this.compileCollectionLiteralPartCS(e.getOwnedParts().get(0));
        _builder.append(_compileCollectionLiteralPartCS);
        {
          List<CollectionLiteralPartCS> _subList = e.getOwnedParts().subList(1, ((Object[])Conversions.unwrapArray(e.getOwnedParts(), Object.class)).length);
          for(final CollectionLiteralPartCS part : _subList) {
            _builder.append(", ");
            CharSequence _compileCollectionLiteralPartCS_1 = this.compileCollectionLiteralPartCS(part);
            _builder.append(_compileCollectionLiteralPartCS_1);
          }
        }
      }
    }
    _builder.append("}");
    return _builder;
  }
  
  private CharSequence compileCollectionLiteralPartCS(final CollectionLiteralPartCS e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _ownedExpression = e.getOwnedExpression();
      if ((_ownedExpression instanceof ExpCS)) {
        EObject _ownedExpression_1 = e.getOwnedExpression();
        Object _compileExpCS = this.compileExpCS(((ExpCS) _ownedExpression_1));
        _builder.append(_compileExpCS);
        {
          ExpCS _ownedLastExpression = e.getOwnedLastExpression();
          boolean _tripleNotEquals = (_ownedLastExpression != null);
          if (_tripleNotEquals) {
            _builder.append("..");
            Object _compileExpCS_1 = this.compileExpCS(e.getOwnedLastExpression());
            _builder.append(_compileExpCS_1);
          }
        }
        _builder.newLineIfNotEmpty();
      } else {
        EObject _ownedExpression_2 = e.getOwnedExpression();
        if ((_ownedExpression_2 instanceof PatternExpCS)) {
          EObject _ownedExpression_3 = e.getOwnedExpression();
          CharSequence _compilePatternExpCS = this.compilePatternExpCS(((PatternExpCS) _ownedExpression_3));
          _builder.append(_compilePatternExpCS);
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  private CharSequence compilePatternExpCS(final PatternExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _patternVariableName = e.getPatternVariableName();
      boolean _tripleNotEquals = (_patternVariableName != null);
      if (_tripleNotEquals) {
        String _patternVariableName_1 = e.getPatternVariableName();
        _builder.append(_patternVariableName_1);
      }
    }
    _builder.append(" : ");
    Object _compileTypedRefCS = this.compileTypedRefCS(e.getOwnedPatternType());
    _builder.append(_compileTypedRefCS);
    return _builder;
  }
  
  private CharSequence compileIfExpCS(final IfExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _ownedCondition = e.getOwnedCondition();
      if ((_ownedCondition instanceof ExpCS)) {
        _builder.append("if ");
        EObject _ownedCondition_1 = e.getOwnedCondition();
        Object _compileExpCS = this.compileExpCS(((ExpCS) _ownedCondition_1));
        _builder.append(_compileExpCS);
        _builder.append(" then ");
        Object _compileExpCS_1 = this.compileExpCS(e.getOwnedThenExpression());
        _builder.append(_compileExpCS_1);
        _builder.append(" ");
        {
          EList<IfThenExpCS> _ownedIfThenExpressions = e.getOwnedIfThenExpressions();
          for(final IfThenExpCS i : _ownedIfThenExpressions) {
            _builder.append(" ");
            CharSequence _compileIfThenExpCS = this.compileIfThenExpCS(i);
            _builder.append(_compileIfThenExpCS);
          }
        }
        _builder.append(" else ");
        Object _compileExpCS_2 = this.compileExpCS(e.getOwnedElseExpression());
        _builder.append(_compileExpCS_2);
        _builder.append(" endif");
        _builder.newLineIfNotEmpty();
      } else {
        EObject _ownedCondition_2 = e.getOwnedCondition();
        if ((_ownedCondition_2 instanceof PatternExpCS)) {
          _builder.append("if ");
          EObject _ownedCondition_3 = e.getOwnedCondition();
          CharSequence _compilePatternExpCS = this.compilePatternExpCS(((PatternExpCS) _ownedCondition_3));
          _builder.append(_compilePatternExpCS);
          _builder.append(" then ");
          Object _compileExpCS_3 = this.compileExpCS(e.getOwnedThenExpression());
          _builder.append(_compileExpCS_3);
          _builder.append(" ");
          {
            EList<IfThenExpCS> _ownedIfThenExpressions_1 = e.getOwnedIfThenExpressions();
            for(final IfThenExpCS i_1 : _ownedIfThenExpressions_1) {
              _builder.append(" ");
              CharSequence _compileIfThenExpCS_1 = this.compileIfThenExpCS(i_1);
              _builder.append(_compileIfThenExpCS_1);
            }
          }
          _builder.append(" else ");
          Object _compileExpCS_4 = this.compileExpCS(e.getOwnedElseExpression());
          _builder.append(_compileExpCS_4);
          _builder.append(" endif");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  private CharSequence compileIfThenExpCS(final IfThenExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("elseif ");
    Object _compileExpCS = this.compileExpCS(e.getOwnedCondition());
    _builder.append(_compileExpCS);
    _builder.append(" then ");
    Object _compileExpCS_1 = this.compileExpCS(e.getOwnedThenExpression());
    _builder.append(_compileExpCS_1);
    return _builder;
  }
  
  private CharSequence compileInfixExpCS(final InfixExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    Object _compileExpCS = this.compileExpCS(e.getOwnedLeft());
    _builder.append(_compileExpCS);
    {
      boolean _equals = e.getOperator().equals(".");
      boolean _not = (!_equals);
      if (_not) {
        _builder.append(" ");
      }
    }
    String _operator = e.getOperator();
    _builder.append(_operator);
    {
      boolean _equals_1 = e.getOperator().equals(".");
      boolean _not_1 = (!_equals_1);
      if (_not_1) {
        _builder.append(" ");
      }
    }
    Object _compileExpCS_1 = this.compileExpCS(e.getOwnedRight());
    _builder.append(_compileExpCS_1);
    return _builder;
  }
  
  private CharSequence compileLambdaLiteralExpCS(final LambdaLiteralExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Lambda { ");
    Object _compileExpCS = this.compileExpCS(e.getOwnedExpressionCS());
    _builder.append(_compileExpCS);
    _builder.append(" }");
    return _builder;
  }
  
  private CharSequence compileLetExpCS(final LetExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("let ");
    {
      int _length = ((Object[])Conversions.unwrapArray(e.getOwnedVariables(), Object.class)).length;
      boolean _greaterThan = (_length > 0);
      if (_greaterThan) {
        CharSequence _compileLetVariableCS = this.compileLetVariableCS(e.getOwnedVariables().get(0));
        _builder.append(_compileLetVariableCS);
        {
          List<LetVariableCS> _subList = e.getOwnedVariables().subList(1, ((Object[])Conversions.unwrapArray(e.getOwnedVariables(), Object.class)).length);
          for(final LetVariableCS part : _subList) {
            _builder.append(", ");
            CharSequence _compileLetVariableCS_1 = this.compileLetVariableCS(part);
            _builder.append(_compileLetVariableCS_1);
          }
        }
      }
    }
    _builder.append(" in ");
    Object _compileExpCS = this.compileExpCS(e.getOwnedInExpression());
    _builder.append(_compileExpCS);
    return _builder;
  }
  
  private CharSequence compileLetVariableCS(final LetVariableCS e) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = e.getName();
    _builder.append(_name);
    {
      RoundBracketedClauseCS _ownedRoundBracketedClause = e.getOwnedRoundBracketedClause();
      boolean _tripleNotEquals = (_ownedRoundBracketedClause != null);
      if (_tripleNotEquals) {
        _builder.append(" ");
        CharSequence _compileRoundBracketedClauseCS = this.compileRoundBracketedClauseCS(e.getOwnedRoundBracketedClause());
        _builder.append(_compileRoundBracketedClauseCS);
      }
    }
    {
      TypedRefCS _ownedType = e.getOwnedType();
      boolean _tripleNotEquals_1 = (_ownedType != null);
      if (_tripleNotEquals_1) {
        _builder.append(" : ");
        CharSequence _compileTypedRefCS = this.compileTypedRefCS(e.getOwnedType());
        _builder.append(_compileTypedRefCS);
      }
    }
    _builder.append(" = ");
    Object _compileExpCS = this.compileExpCS(e.getOwnedInitExpression());
    _builder.append(_compileExpCS);
    return _builder;
  }
  
  private CharSequence compileRoundBracketedClauseCS(final RoundBracketedClauseCS e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    {
      int _length = ((Object[])Conversions.unwrapArray(e.getOwnedArguments(), Object.class)).length;
      boolean _greaterThan = (_length > 0);
      if (_greaterThan) {
        CharSequence _compileNavigatingArgCS = this.compileNavigatingArgCS(e.getOwnedArguments().get(0));
        _builder.append(_compileNavigatingArgCS);
        {
          List<NavigatingArgCS> _subList = e.getOwnedArguments().subList(1, ((Object[])Conversions.unwrapArray(e.getOwnedArguments(), Object.class)).length);
          for(final NavigatingArgCS part : _subList) {
            CharSequence _compileNavigatingArgCS_1 = this.compileNavigatingArgCS(part);
            _builder.append(_compileNavigatingArgCS_1);
          }
        }
      }
    }
    _builder.append(")");
    return _builder;
  }
  
  private CharSequence compileNavigatingArgCS(final NavigatingArgCS e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _prefix = e.getPrefix();
      boolean _tripleNotEquals = (_prefix != null);
      if (_tripleNotEquals) {
        String _prefix_1 = e.getPrefix();
        _builder.append(_prefix_1);
      }
    }
    {
      ExpCS _ownedNameExpression = e.getOwnedNameExpression();
      boolean _tripleNotEquals_1 = (_ownedNameExpression != null);
      if (_tripleNotEquals_1) {
        Object _compileExpCS = this.compileExpCS(e.getOwnedNameExpression());
        _builder.append(_compileExpCS);
      }
    }
    {
      TypedRefCS _ownedType = e.getOwnedType();
      boolean _tripleNotEquals_2 = (_ownedType != null);
      if (_tripleNotEquals_2) {
        _builder.append(" ");
        String _symbolT = e.getSymbolT();
        _builder.append(_symbolT);
        _builder.append(" ");
        CharSequence _compileTypedRefCS = this.compileTypedRefCS(e.getOwnedType());
        _builder.append(_compileTypedRefCS);
      }
    }
    {
      VariableCS _ownedCoIterator = e.getOwnedCoIterator();
      boolean _tripleNotEquals_3 = (_ownedCoIterator != null);
      if (_tripleNotEquals_3) {
        _builder.append(" ");
        String _symbolCI = e.getSymbolCI();
        _builder.append(_symbolCI);
        _builder.append(" ");
        CharSequence _compileVariableCS = this.compileVariableCS(e.getOwnedCoIterator());
        _builder.append(_compileVariableCS);
      }
    }
    {
      ExpCS _ownedInitExpression = e.getOwnedInitExpression();
      boolean _tripleNotEquals_4 = (_ownedInitExpression != null);
      if (_tripleNotEquals_4) {
        _builder.append(" ");
        String _symbolIE = e.getSymbolIE();
        _builder.append(_symbolIE);
        _builder.append(" ");
        Object _compileExpCS_1 = this.compileExpCS(e.getOwnedInitExpression());
        _builder.append(_compileExpCS_1);
      }
    }
    return _builder;
  }
  
  private CharSequence compileVariableCS(final VariableCS e) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = e.getName();
    _builder.append(_name);
    {
      TypedRefCS _ownedType = e.getOwnedType();
      boolean _tripleNotEquals = (_ownedType != null);
      if (_tripleNotEquals) {
        _builder.append(" ");
        CharSequence _compileTypedRefCS = this.compileTypedRefCS(e.getOwnedType());
        _builder.append(_compileTypedRefCS);
      }
    }
    return _builder;
  }
  
  private CharSequence compileSquareBracketedClauseCS(final SquareBracketedClauseCS e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[");
    {
      int _length = ((Object[])Conversions.unwrapArray(e.getOwnedTerms(), Object.class)).length;
      boolean _greaterThan = (_length > 0);
      if (_greaterThan) {
        Object _compileExpCS = this.compileExpCS(e.getOwnedTerms().get(0));
        _builder.append(_compileExpCS);
        {
          List<ExpCS> _subList = e.getOwnedTerms().subList(1, ((Object[])Conversions.unwrapArray(e.getOwnedTerms(), Object.class)).length);
          for(final ExpCS part : _subList) {
            _builder.append(", ");
            Object _compileExpCS_1 = this.compileExpCS(part);
            _builder.append(_compileExpCS_1);
          }
        }
      }
    }
    _builder.append("]");
    return _builder;
  }
  
  private CharSequence compileCurlyBracketedClauseCS(final CurlyBracketedClauseCS e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    {
      int _length = ((Object[])Conversions.unwrapArray(e.getOwnedParts(), Object.class)).length;
      boolean _greaterThan = (_length > 0);
      if (_greaterThan) {
        CharSequence _compileShadowPartCS = this.compileShadowPartCS(e.getOwnedParts().get(0));
        _builder.append(_compileShadowPartCS);
        {
          List<ShadowPartCS> _subList = e.getOwnedParts().subList(1, ((Object[])Conversions.unwrapArray(e.getOwnedParts(), Object.class)).length);
          for(final ShadowPartCS part : _subList) {
            _builder.append(", ");
            CharSequence _compileShadowPartCS_1 = this.compileShadowPartCS(part);
            _builder.append(_compileShadowPartCS_1);
          }
        }
      }
    }
    _builder.append("}");
    return _builder;
  }
  
  private CharSequence compileShadowPartCS(final ShadowPartCS e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _ownedInitExpression = e.getOwnedInitExpression();
      if ((_ownedInitExpression instanceof ExpCS)) {
        String _referredProperty = e.getReferredProperty();
        _builder.append(_referredProperty);
        _builder.append(" = ");
        EObject _ownedInitExpression_1 = e.getOwnedInitExpression();
        Object _compileExpCS = this.compileExpCS(((ExpCS) _ownedInitExpression_1));
        _builder.append(_compileExpCS);
        _builder.newLineIfNotEmpty();
      } else {
        EObject _ownedInitExpression_2 = e.getOwnedInitExpression();
        if ((_ownedInitExpression_2 instanceof PatternExpCS)) {
          String _referredProperty_1 = e.getReferredProperty();
          _builder.append(_referredProperty_1);
          _builder.append(" = ");
          EObject _ownedInitExpression_3 = e.getOwnedInitExpression();
          CharSequence _compilePatternExpCS = this.compilePatternExpCS(((PatternExpCS) _ownedInitExpression_3));
          _builder.append(_compilePatternExpCS);
          _builder.newLineIfNotEmpty();
        } else {
          EObject _ownedInitExpression_4 = e.getOwnedInitExpression();
          if ((_ownedInitExpression_4 instanceof StringLiteralExpCS)) {
            EObject _ownedInitExpression_5 = e.getOwnedInitExpression();
            CharSequence _compileStringLiteralExpCS = this.compileStringLiteralExpCS(((StringLiteralExpCS) _ownedInitExpression_5));
            _builder.append(_compileStringLiteralExpCS);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence compileMapLiteralExpCS(final MapLiteralExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compileMapTypeCS = this.compileMapTypeCS(e.getOwnedType());
    _builder.append(_compileMapTypeCS);
    _builder.append(" { ");
    {
      int _length = ((Object[])Conversions.unwrapArray(e.getOwnedParts(), Object.class)).length;
      boolean _greaterThan = (_length > 0);
      if (_greaterThan) {
        CharSequence _compileMapLiteralPartCS = this.compileMapLiteralPartCS(e.getOwnedParts().get(0));
        _builder.append(_compileMapLiteralPartCS);
        {
          List<MapLiteralPartCS> _subList = e.getOwnedParts().subList(1, ((Object[])Conversions.unwrapArray(e.getOwnedParts(), Object.class)).length);
          for(final MapLiteralPartCS part : _subList) {
            _builder.append(", ");
            CharSequence _compileMapLiteralPartCS_1 = this.compileMapLiteralPartCS(part);
            _builder.append(_compileMapLiteralPartCS_1);
          }
        }
      }
    }
    _builder.append(" }");
    return _builder;
  }
  
  private CharSequence compileMapLiteralPartCS(final MapLiteralPartCS e) {
    StringConcatenation _builder = new StringConcatenation();
    Object _compileExpCS = this.compileExpCS(e.getOwnedKey());
    _builder.append(_compileExpCS);
    _builder.append(" <- ");
    Object _compileExpCS_1 = this.compileExpCS(e.getOwnedValue());
    _builder.append(_compileExpCS_1);
    return _builder;
  }
  
  private CharSequence compileNameExpCS(final NameExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compilePathNameCS = this.compilePathNameCS(e.getOwnedPathName());
    _builder.append(_compilePathNameCS);
    {
      EList<SquareBracketedClauseCS> _ownedSquareBracketedClauses = e.getOwnedSquareBracketedClauses();
      for(final SquareBracketedClauseCS part : _ownedSquareBracketedClauses) {
        CharSequence _compileSquareBracketedClauseCS = this.compileSquareBracketedClauseCS(part);
        _builder.append(_compileSquareBracketedClauseCS);
      }
    }
    {
      RoundBracketedClauseCS _ownedRoundBracketedClause = e.getOwnedRoundBracketedClause();
      boolean _tripleNotEquals = (_ownedRoundBracketedClause != null);
      if (_tripleNotEquals) {
        CharSequence _compileRoundBracketedClauseCS = this.compileRoundBracketedClauseCS(e.getOwnedRoundBracketedClause());
        _builder.append(_compileRoundBracketedClauseCS);
      }
    }
    {
      CurlyBracketedClauseCS _ownedCurlyBracketedClause = e.getOwnedCurlyBracketedClause();
      boolean _tripleNotEquals_1 = (_ownedCurlyBracketedClause != null);
      if (_tripleNotEquals_1) {
        CharSequence _compileCurlyBracketedClauseCS = this.compileCurlyBracketedClauseCS(e.getOwnedCurlyBracketedClause());
        _builder.append(_compileCurlyBracketedClauseCS);
      }
    }
    {
      boolean _isIsPre = e.isIsPre();
      if (_isIsPre) {
        _builder.append("@");
      }
    }
    {
      boolean _isPre = e.isPre();
      if (_isPre) {
        _builder.append("pre");
      }
    }
    return _builder;
  }
  
  private CharSequence compilePathNameCS(final PathNameCS e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _length = ((Object[])Conversions.unwrapArray(e.getOwnedPathElements(), Object.class)).length;
      boolean _greaterThan = (_length > 0);
      if (_greaterThan) {
        String _get = e.getOwnedPathElements().get(0);
        _builder.append(_get);
        {
          List<String> _subList = e.getOwnedPathElements().subList(1, ((Object[])Conversions.unwrapArray(e.getOwnedPathElements(), Object.class)).length);
          for(final String part : _subList) {
            _builder.append(" :: ");
            _builder.append(part);
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence compileNestedExpCS(final NestedExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    Object _compileExpCS = this.compileExpCS(e.getOwnedExpression());
    _builder.append(_compileExpCS);
    _builder.append(")");
    return _builder;
  }
  
  private CharSequence compilePrefixExpCS(final PrefixExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = e.getName();
    _builder.append(_name);
    _builder.append(" ");
    Object _compileExpCS = this.compileExpCS(e.getOwnedRight());
    _builder.append(_compileExpCS);
    return _builder;
  }
  
  private CharSequence compilePrimitiveLiteralExpCS(final PrimitiveLiteralExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof NumberLiteralExpCS)) {
        CharSequence _compileNumberLiteralExpCS = this.compileNumberLiteralExpCS(((NumberLiteralExpCS)e));
        _builder.append(_compileNumberLiteralExpCS);
        _builder.newLineIfNotEmpty();
      } else {
        if ((e instanceof StringLiteralExpCS)) {
          CharSequence _compileStringLiteralExpCS = this.compileStringLiteralExpCS(((StringLiteralExpCS)e));
          _builder.append(_compileStringLiteralExpCS);
          _builder.newLineIfNotEmpty();
        } else {
          if ((e instanceof BooleanLiteralExpCS)) {
            CharSequence _compileBooleanLiteralExpCS = this.compileBooleanLiteralExpCS(((BooleanLiteralExpCS)e));
            _builder.append(_compileBooleanLiteralExpCS);
            _builder.newLineIfNotEmpty();
          } else {
            if ((e instanceof UnlimitedNaturalLiteralExpCS)) {
              CharSequence _compileUnlimitedNaturalLiteralExpCS = this.compileUnlimitedNaturalLiteralExpCS(((UnlimitedNaturalLiteralExpCS)e));
              _builder.append(_compileUnlimitedNaturalLiteralExpCS);
              _builder.newLineIfNotEmpty();
            } else {
              if ((e instanceof InvalidLiteralExpCS)) {
                CharSequence _compileInvalidLiteralExpCS = this.compileInvalidLiteralExpCS(((InvalidLiteralExpCS)e));
                _builder.append(_compileInvalidLiteralExpCS);
                _builder.newLineIfNotEmpty();
              } else {
                if ((e instanceof NullLiteralExpCS)) {
                  CharSequence _compileNullLiteralExpCS = this.compileNullLiteralExpCS(((NullLiteralExpCS)e));
                  _builder.append(_compileNullLiteralExpCS);
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence compileNumberLiteralExpCS(final NumberLiteralExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    String _value = e.getValue();
    _builder.append(_value);
    return _builder;
  }
  
  private CharSequence compileStringLiteralExpCS(final StringLiteralExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<String> _segments = e.getSegments();
      for(final String part : _segments) {
        _builder.append(" ");
        _builder.append(part);
      }
    }
    return _builder;
  }
  
  private CharSequence compileBooleanLiteralExpCS(final BooleanLiteralExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    String _symbol = e.getSymbol();
    _builder.append(_symbol);
    return _builder;
  }
  
  private CharSequence compileUnlimitedNaturalLiteralExpCS(final UnlimitedNaturalLiteralExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("*");
    return _builder;
  }
  
  private CharSequence compileInvalidLiteralExpCS(final InvalidLiteralExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("invalid");
    return _builder;
  }
  
  private CharSequence compileNullLiteralExpCS(final NullLiteralExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("null");
    return _builder;
  }
  
  private CharSequence compileTupleLiteralExpCS(final TupleLiteralExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Tuple { ");
    {
      int _length = ((Object[])Conversions.unwrapArray(e.getOwnedParts(), Object.class)).length;
      boolean _greaterThan = (_length > 0);
      if (_greaterThan) {
        CharSequence _compileTupleLiteralPartCS = this.compileTupleLiteralPartCS(e.getOwnedParts().get(0));
        _builder.append(_compileTupleLiteralPartCS);
        {
          List<TupleLiteralPartCS> _subList = e.getOwnedParts().subList(1, ((Object[])Conversions.unwrapArray(e.getOwnedParts(), Object.class)).length);
          for(final TupleLiteralPartCS part : _subList) {
            _builder.append(", ");
            CharSequence _compileTupleLiteralPartCS_1 = this.compileTupleLiteralPartCS(part);
            _builder.append(_compileTupleLiteralPartCS_1);
          }
        }
      }
    }
    _builder.append(" }");
    return _builder;
  }
  
  private CharSequence compileTupleLiteralPartCS(final TupleLiteralPartCS e) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = e.getName();
    _builder.append(_name);
    _builder.append(" ");
    {
      TypedRefCS _ownedType = e.getOwnedType();
      boolean _tripleNotEquals = (_ownedType != null);
      if (_tripleNotEquals) {
        _builder.append(": ");
        CharSequence _compileTypedRefCS = this.compileTypedRefCS(e.getOwnedType());
        _builder.append(_compileTypedRefCS);
      }
    }
    _builder.append("= ");
    Object _compileExpCS = this.compileExpCS(e.getOwnedInitExpression());
    _builder.append(_compileExpCS);
    return _builder;
  }
  
  private CharSequence compileTypeLiteralExpCS(final TypeLiteralExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compileTypedRefCS = this.compileTypedRefCS(e.getOwnedType());
    _builder.append(_compileTypedRefCS);
    return _builder;
  }
  
  private CharSequence compileCollectionPatternCS(final CollectionPatternCS e) {
    StringConcatenation _builder = new StringConcatenation();
    Object _compileCollectionTypeCS = this.compileCollectionTypeCS(e.getOwnedType());
    _builder.append(_compileCollectionTypeCS);
    _builder.append(" { ");
    {
      int _length = ((Object[])Conversions.unwrapArray(e.getOwnedParts(), Object.class)).length;
      boolean _greaterThan = (_length > 0);
      if (_greaterThan) {
        CharSequence _compilePatternExpCS = this.compilePatternExpCS(e.getOwnedParts().get(0));
        _builder.append(_compilePatternExpCS);
        {
          List<PatternExpCS> _subList = e.getOwnedParts().subList(1, ((Object[])Conversions.unwrapArray(e.getOwnedParts(), Object.class)).length);
          for(final PatternExpCS part : _subList) {
            _builder.append(", ");
            CharSequence _compilePatternExpCS_1 = this.compilePatternExpCS(part);
            _builder.append(_compilePatternExpCS_1);
          }
        }
        _builder.append(" ++ ");
        String _restVariableName = e.getRestVariableName();
        _builder.append(_restVariableName);
      }
    }
    _builder.append("}");
    return _builder;
  }
  
  private CharSequence compileMapTypeCS(final MapTypeCS e) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = e.getName();
    _builder.append(_name);
    _builder.append(" ");
    {
      if (((e.getOwnedKeyType() != null) && (e.getOwnedValueType() != null))) {
        _builder.append("(");
        Object _compileTypedRefCS = this.compileTypedRefCS(e.getOwnedKeyType());
        _builder.append(_compileTypedRefCS);
        _builder.append(", ");
        Object _compileTypedRefCS_1 = this.compileTypedRefCS(e.getOwnedValueType());
        _builder.append(_compileTypedRefCS_1);
        _builder.append(")");
      }
    }
    return _builder;
  }
  
  private CharSequence compilePrimitiveTypeRefCS(final PrimitiveTypeRefCS e) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = e.getName();
    _builder.append(_name);
    return _builder;
  }
  
  private CharSequence compileTupleTypeCS(final TupleTypeCS e) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = e.getName();
    _builder.append(_name);
    _builder.append(" ");
    {
      int _length = ((Object[])Conversions.unwrapArray(e.getOwnedParts(), Object.class)).length;
      boolean _greaterThan = (_length > 0);
      if (_greaterThan) {
        _builder.append("(");
        CharSequence _compileTuplePartCS = this.compileTuplePartCS(e.getOwnedParts().get(0));
        _builder.append(_compileTuplePartCS);
        {
          List<TuplePartCS> _subList = e.getOwnedParts().subList(1, ((Object[])Conversions.unwrapArray(e.getOwnedParts(), Object.class)).length);
          for(final TuplePartCS part : _subList) {
            _builder.append(", ");
            CharSequence _compileTuplePartCS_1 = this.compileTuplePartCS(part);
            _builder.append(_compileTuplePartCS_1);
          }
        }
        _builder.append(")");
      }
    }
    return _builder;
  }
  
  private CharSequence compileTuplePartCS(final TuplePartCS e) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = e.getName();
    _builder.append(_name);
    _builder.append(" : ");
    Object _compileTypedRefCS = this.compileTypedRefCS(e.getOwnedType());
    _builder.append(_compileTypedRefCS);
    return _builder;
  }
  
  private CharSequence compileTypeNameExpCS(final TypeNameExpCS e) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compilePathNameCS = this.compilePathNameCS(e.getOwnedPathName());
    _builder.append(_compilePathNameCS);
    _builder.append(" ");
    {
      CurlyBracketedClauseCS _ownedCurlyBracketedClause = e.getOwnedCurlyBracketedClause();
      boolean _tripleNotEquals = (_ownedCurlyBracketedClause != null);
      if (_tripleNotEquals) {
        CharSequence _compileCurlyBracketedClauseCS = this.compileCurlyBracketedClauseCS(e.getOwnedCurlyBracketedClause());
        _builder.append(_compileCurlyBracketedClauseCS);
        _builder.append(" ");
        {
          ExpCS _ownedPatternGuard = e.getOwnedPatternGuard();
          boolean _tripleNotEquals_1 = (_ownedPatternGuard != null);
          if (_tripleNotEquals_1) {
            _builder.append("{");
            Object _compileExpCS = this.compileExpCS(e.getOwnedPatternGuard());
            _builder.append(_compileExpCS);
            _builder.append("}");
          }
        }
      }
    }
    return _builder;
  }
}
