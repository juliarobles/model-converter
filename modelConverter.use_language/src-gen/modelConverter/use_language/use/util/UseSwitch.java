/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.use.util;

import modelConverter.use_language.use.AllClass;
import modelConverter.use_language.use.AllClassAndEnum;
import modelConverter.use_language.use.AllTypes;
import modelConverter.use_language.use.Association;
import modelConverter.use_language.use.AssociationClass;
import modelConverter.use_language.use.AssociationEnd;
import modelConverter.use_language.use.Attribute;
import modelConverter.use_language.use.AttributesBase;
import modelConverter.use_language.use.BooleanLiteralExpCS;
import modelConverter.use_language.use.CollectionLiteralExpCS;
import modelConverter.use_language.use.CollectionLiteralPartCS;
import modelConverter.use_language.use.CollectionPatternCS;
import modelConverter.use_language.use.CollectionType;
import modelConverter.use_language.use.CollectionTypeCS;
import modelConverter.use_language.use.ConditionType;
import modelConverter.use_language.use.ConstrainsGeneral;
import modelConverter.use_language.use.ConstraintsBase;
import modelConverter.use_language.use.ContextsType;
import modelConverter.use_language.use.CurlyBracketedClauseCS;
import modelConverter.use_language.use.ExpCS;
import modelConverter.use_language.use.Generalization;
import modelConverter.use_language.use.IfExpCS;
import modelConverter.use_language.use.IfThenExpCS;
import modelConverter.use_language.use.InfixExpCS;
import modelConverter.use_language.use.InvalidLiteralExpCS;
import modelConverter.use_language.use.InvariantContext;
import modelConverter.use_language.use.InvariantDefinition;
import modelConverter.use_language.use.LambdaLiteralExpCS;
import modelConverter.use_language.use.LetExpCS;
import modelConverter.use_language.use.LetVariableCS;
import modelConverter.use_language.use.MapLiteralExpCS;
import modelConverter.use_language.use.MapLiteralPartCS;
import modelConverter.use_language.use.MapTypeCS;
import modelConverter.use_language.use.ModelUSE;
import modelConverter.use_language.use.Multiplicity;
import modelConverter.use_language.use.MultiplicityBoundsCS;
import modelConverter.use_language.use.MultiplicityCS;
import modelConverter.use_language.use.MultiplicityStringCS;
import modelConverter.use_language.use.NameExpCS;
import modelConverter.use_language.use.NavigatingArgCS;
import modelConverter.use_language.use.NestedExpCS;
import modelConverter.use_language.use.NullLiteralExpCS;
import modelConverter.use_language.use.NumberLiteralExpCS;
import modelConverter.use_language.use.OperationComplex;
import modelConverter.use_language.use.OperationConstraints;
import modelConverter.use_language.use.OperationContext;
import modelConverter.use_language.use.OperationDeclaration;
import modelConverter.use_language.use.OperationQuery;
import modelConverter.use_language.use.OperationType;
import modelConverter.use_language.use.OperationsBase;
import modelConverter.use_language.use.Parameter;
import modelConverter.use_language.use.PathNameCS;
import modelConverter.use_language.use.PatternExpCS;
import modelConverter.use_language.use.Postcondition;
import modelConverter.use_language.use.Precondition;
import modelConverter.use_language.use.PrefixExpCS;
import modelConverter.use_language.use.PrimitiveLiteralExpCS;
import modelConverter.use_language.use.PrimitiveTypeRefCS;
import modelConverter.use_language.use.RoundBracketedClauseCS;
import modelConverter.use_language.use.SelfExpCS;
import modelConverter.use_language.use.ShadowPartCS;
import modelConverter.use_language.use.SimpleTypes;
import modelConverter.use_language.use.SquareBracketedClauseCS;
import modelConverter.use_language.use.State;
import modelConverter.use_language.use.StateMachine;
import modelConverter.use_language.use.StateMachinesBase;
import modelConverter.use_language.use.StringLiteralExpCS;
import modelConverter.use_language.use.Transition;
import modelConverter.use_language.use.TupleLiteralExpCS;
import modelConverter.use_language.use.TupleLiteralPartCS;
import modelConverter.use_language.use.TuplePartCS;
import modelConverter.use_language.use.TupleTypeCS;
import modelConverter.use_language.use.Type;
import modelConverter.use_language.use.TypeLiteralExpCS;
import modelConverter.use_language.use.TypeNameExpCS;
import modelConverter.use_language.use.TypedRefCS;
import modelConverter.use_language.use.UnlimitedNaturalLiteralExpCS;
import modelConverter.use_language.use.UsePackage;
import modelConverter.use_language.use.VariableCS;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see modelConverter.use_language.use.UsePackage
 * @generated
 */
public class UseSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static UsePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UseSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = UsePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case UsePackage.MODEL_USE:
      {
        ModelUSE modelUSE = (ModelUSE)theEObject;
        T result = caseModelUSE(modelUSE);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.MULTIPLICITY:
      {
        Multiplicity multiplicity = (Multiplicity)theEObject;
        T result = caseMultiplicity(multiplicity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.ALL_TYPES:
      {
        AllTypes allTypes = (AllTypes)theEObject;
        T result = caseAllTypes(allTypes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.COLLECTION_TYPE:
      {
        CollectionType collectionType = (CollectionType)theEObject;
        T result = caseCollectionType(collectionType);
        if (result == null) result = caseAllTypes(collectionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.ALL_CLASS:
      {
        AllClass allClass = (AllClass)theEObject;
        T result = caseAllClass(allClass);
        if (result == null) result = caseAllClassAndEnum(allClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.ALL_CLASS_AND_ENUM:
      {
        AllClassAndEnum allClassAndEnum = (AllClassAndEnum)theEObject;
        T result = caseAllClassAndEnum(allClassAndEnum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.SIMPLE_TYPES:
      {
        SimpleTypes simpleTypes = (SimpleTypes)theEObject;
        T result = caseSimpleTypes(simpleTypes);
        if (result == null) result = caseAllTypes(simpleTypes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.ENUM:
      {
        modelConverter.use_language.use.Enum enum_ = (modelConverter.use_language.use.Enum)theEObject;
        T result = caseEnum(enum_);
        if (result == null) result = caseAllClassAndEnum(enum_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.CLASS:
      {
        modelConverter.use_language.use.Class class_ = (modelConverter.use_language.use.Class)theEObject;
        T result = caseClass(class_);
        if (result == null) result = caseType(class_);
        if (result == null) result = caseAllClass(class_);
        if (result == null) result = caseAllClassAndEnum(class_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.GENERALIZATION:
      {
        Generalization generalization = (Generalization)theEObject;
        T result = caseGeneralization(generalization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.ASSOCIATION:
      {
        Association association = (Association)theEObject;
        T result = caseAssociation(association);
        if (result == null) result = caseType(association);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.ASSOCIATION_END:
      {
        AssociationEnd associationEnd = (AssociationEnd)theEObject;
        T result = caseAssociationEnd(associationEnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.ASSOCIATION_CLASS:
      {
        AssociationClass associationClass = (AssociationClass)theEObject;
        T result = caseAssociationClass(associationClass);
        if (result == null) result = caseType(associationClass);
        if (result == null) result = caseAllClass(associationClass);
        if (result == null) result = caseAllClassAndEnum(associationClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.ATTRIBUTES_BASE:
      {
        AttributesBase attributesBase = (AttributesBase)theEObject;
        T result = caseAttributesBase(attributesBase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.OPERATIONS_BASE:
      {
        OperationsBase operationsBase = (OperationsBase)theEObject;
        T result = caseOperationsBase(operationsBase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.OPERATION_TYPE:
      {
        OperationType operationType = (OperationType)theEObject;
        T result = caseOperationType(operationType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.OPERATION_QUERY:
      {
        OperationQuery operationQuery = (OperationQuery)theEObject;
        T result = caseOperationQuery(operationQuery);
        if (result == null) result = caseOperationType(operationQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.OPERATION_COMPLEX:
      {
        OperationComplex operationComplex = (OperationComplex)theEObject;
        T result = caseOperationComplex(operationComplex);
        if (result == null) result = caseOperationType(operationComplex);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.OPERATION_DECLARATION:
      {
        OperationDeclaration operationDeclaration = (OperationDeclaration)theEObject;
        T result = caseOperationDeclaration(operationDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.PARAMETER:
      {
        Parameter parameter = (Parameter)theEObject;
        T result = caseParameter(parameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.STATE_MACHINES_BASE:
      {
        StateMachinesBase stateMachinesBase = (StateMachinesBase)theEObject;
        T result = caseStateMachinesBase(stateMachinesBase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.STATE_MACHINE:
      {
        StateMachine stateMachine = (StateMachine)theEObject;
        T result = caseStateMachine(stateMachine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.STATE:
      {
        State state = (State)theEObject;
        T result = caseState(state);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.TRANSITION:
      {
        Transition transition = (Transition)theEObject;
        T result = caseTransition(transition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.CONSTRAINTS_BASE:
      {
        ConstraintsBase constraintsBase = (ConstraintsBase)theEObject;
        T result = caseConstraintsBase(constraintsBase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.CONSTRAINS_GENERAL:
      {
        ConstrainsGeneral constrainsGeneral = (ConstrainsGeneral)theEObject;
        T result = caseConstrainsGeneral(constrainsGeneral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.CONTEXTS_TYPE:
      {
        ContextsType contextsType = (ContextsType)theEObject;
        T result = caseContextsType(contextsType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.INVARIANT_CONTEXT:
      {
        InvariantContext invariantContext = (InvariantContext)theEObject;
        T result = caseInvariantContext(invariantContext);
        if (result == null) result = caseContextsType(invariantContext);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.INVARIANT_DEFINITION:
      {
        InvariantDefinition invariantDefinition = (InvariantDefinition)theEObject;
        T result = caseInvariantDefinition(invariantDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.OPERATION_CONTEXT:
      {
        OperationContext operationContext = (OperationContext)theEObject;
        T result = caseOperationContext(operationContext);
        if (result == null) result = caseContextsType(operationContext);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.OPERATION_CONSTRAINTS:
      {
        OperationConstraints operationConstraints = (OperationConstraints)theEObject;
        T result = caseOperationConstraints(operationConstraints);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.CONDITION_TYPE:
      {
        ConditionType conditionType = (ConditionType)theEObject;
        T result = caseConditionType(conditionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.PRECONDITION:
      {
        Precondition precondition = (Precondition)theEObject;
        T result = casePrecondition(precondition);
        if (result == null) result = caseConditionType(precondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.POSTCONDITION:
      {
        Postcondition postcondition = (Postcondition)theEObject;
        T result = casePostcondition(postcondition);
        if (result == null) result = caseConditionType(postcondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.PRIMITIVE_TYPE_REF_CS:
      {
        PrimitiveTypeRefCS primitiveTypeRefCS = (PrimitiveTypeRefCS)theEObject;
        T result = casePrimitiveTypeRefCS(primitiveTypeRefCS);
        if (result == null) result = caseTypedRefCS(primitiveTypeRefCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.COLLECTION_TYPE_CS:
      {
        CollectionTypeCS collectionTypeCS = (CollectionTypeCS)theEObject;
        T result = caseCollectionTypeCS(collectionTypeCS);
        if (result == null) result = caseTypedRefCS(collectionTypeCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.MAP_TYPE_CS:
      {
        MapTypeCS mapTypeCS = (MapTypeCS)theEObject;
        T result = caseMapTypeCS(mapTypeCS);
        if (result == null) result = caseTypedRefCS(mapTypeCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.TUPLE_TYPE_CS:
      {
        TupleTypeCS tupleTypeCS = (TupleTypeCS)theEObject;
        T result = caseTupleTypeCS(tupleTypeCS);
        if (result == null) result = caseTypedRefCS(tupleTypeCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.TUPLE_PART_CS:
      {
        TuplePartCS tuplePartCS = (TuplePartCS)theEObject;
        T result = caseTuplePartCS(tuplePartCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.COLLECTION_PATTERN_CS:
      {
        CollectionPatternCS collectionPatternCS = (CollectionPatternCS)theEObject;
        T result = caseCollectionPatternCS(collectionPatternCS);
        if (result == null) result = caseTypedRefCS(collectionPatternCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.PATTERN_EXP_CS:
      {
        PatternExpCS patternExpCS = (PatternExpCS)theEObject;
        T result = casePatternExpCS(patternExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.TYPED_REF_CS:
      {
        TypedRefCS typedRefCS = (TypedRefCS)theEObject;
        T result = caseTypedRefCS(typedRefCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.TYPE_LITERAL_EXP_CS:
      {
        TypeLiteralExpCS typeLiteralExpCS = (TypeLiteralExpCS)theEObject;
        T result = caseTypeLiteralExpCS(typeLiteralExpCS);
        if (result == null) result = caseExpCS(typeLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.TYPE_NAME_EXP_CS:
      {
        TypeNameExpCS typeNameExpCS = (TypeNameExpCS)theEObject;
        T result = caseTypeNameExpCS(typeNameExpCS);
        if (result == null) result = caseTypedRefCS(typeNameExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.CURLY_BRACKETED_CLAUSE_CS:
      {
        CurlyBracketedClauseCS curlyBracketedClauseCS = (CurlyBracketedClauseCS)theEObject;
        T result = caseCurlyBracketedClauseCS(curlyBracketedClauseCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.SHADOW_PART_CS:
      {
        ShadowPartCS shadowPartCS = (ShadowPartCS)theEObject;
        T result = caseShadowPartCS(shadowPartCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.STRING_LITERAL_EXP_CS:
      {
        StringLiteralExpCS stringLiteralExpCS = (StringLiteralExpCS)theEObject;
        T result = caseStringLiteralExpCS(stringLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(stringLiteralExpCS);
        if (result == null) result = caseExpCS(stringLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.MULTIPLICITY_BOUNDS_CS:
      {
        MultiplicityBoundsCS multiplicityBoundsCS = (MultiplicityBoundsCS)theEObject;
        T result = caseMultiplicityBoundsCS(multiplicityBoundsCS);
        if (result == null) result = caseMultiplicityCS(multiplicityBoundsCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.MULTIPLICITY_CS:
      {
        MultiplicityCS multiplicityCS = (MultiplicityCS)theEObject;
        T result = caseMultiplicityCS(multiplicityCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.MULTIPLICITY_STRING_CS:
      {
        MultiplicityStringCS multiplicityStringCS = (MultiplicityStringCS)theEObject;
        T result = caseMultiplicityStringCS(multiplicityStringCS);
        if (result == null) result = caseMultiplicityCS(multiplicityStringCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.PATH_NAME_CS:
      {
        PathNameCS pathNameCS = (PathNameCS)theEObject;
        T result = casePathNameCS(pathNameCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.EXP_CS:
      {
        ExpCS expCS = (ExpCS)theEObject;
        T result = caseExpCS(expCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.PRIMITIVE_LITERAL_EXP_CS:
      {
        PrimitiveLiteralExpCS primitiveLiteralExpCS = (PrimitiveLiteralExpCS)theEObject;
        T result = casePrimitiveLiteralExpCS(primitiveLiteralExpCS);
        if (result == null) result = caseExpCS(primitiveLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.NAME_EXP_CS:
      {
        NameExpCS nameExpCS = (NameExpCS)theEObject;
        T result = caseNameExpCS(nameExpCS);
        if (result == null) result = caseExpCS(nameExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.SQUARE_BRACKETED_CLAUSE_CS:
      {
        SquareBracketedClauseCS squareBracketedClauseCS = (SquareBracketedClauseCS)theEObject;
        T result = caseSquareBracketedClauseCS(squareBracketedClauseCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.COLLECTION_LITERAL_EXP_CS:
      {
        CollectionLiteralExpCS collectionLiteralExpCS = (CollectionLiteralExpCS)theEObject;
        T result = caseCollectionLiteralExpCS(collectionLiteralExpCS);
        if (result == null) result = caseExpCS(collectionLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.COLLECTION_LITERAL_PART_CS:
      {
        CollectionLiteralPartCS collectionLiteralPartCS = (CollectionLiteralPartCS)theEObject;
        T result = caseCollectionLiteralPartCS(collectionLiteralPartCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.LAMBDA_LITERAL_EXP_CS:
      {
        LambdaLiteralExpCS lambdaLiteralExpCS = (LambdaLiteralExpCS)theEObject;
        T result = caseLambdaLiteralExpCS(lambdaLiteralExpCS);
        if (result == null) result = caseExpCS(lambdaLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.MAP_LITERAL_EXP_CS:
      {
        MapLiteralExpCS mapLiteralExpCS = (MapLiteralExpCS)theEObject;
        T result = caseMapLiteralExpCS(mapLiteralExpCS);
        if (result == null) result = caseExpCS(mapLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.MAP_LITERAL_PART_CS:
      {
        MapLiteralPartCS mapLiteralPartCS = (MapLiteralPartCS)theEObject;
        T result = caseMapLiteralPartCS(mapLiteralPartCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.TUPLE_LITERAL_EXP_CS:
      {
        TupleLiteralExpCS tupleLiteralExpCS = (TupleLiteralExpCS)theEObject;
        T result = caseTupleLiteralExpCS(tupleLiteralExpCS);
        if (result == null) result = caseExpCS(tupleLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.TUPLE_LITERAL_PART_CS:
      {
        TupleLiteralPartCS tupleLiteralPartCS = (TupleLiteralPartCS)theEObject;
        T result = caseTupleLiteralPartCS(tupleLiteralPartCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.NUMBER_LITERAL_EXP_CS:
      {
        NumberLiteralExpCS numberLiteralExpCS = (NumberLiteralExpCS)theEObject;
        T result = caseNumberLiteralExpCS(numberLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(numberLiteralExpCS);
        if (result == null) result = caseExpCS(numberLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.BOOLEAN_LITERAL_EXP_CS:
      {
        BooleanLiteralExpCS booleanLiteralExpCS = (BooleanLiteralExpCS)theEObject;
        T result = caseBooleanLiteralExpCS(booleanLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(booleanLiteralExpCS);
        if (result == null) result = caseExpCS(booleanLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.UNLIMITED_NATURAL_LITERAL_EXP_CS:
      {
        UnlimitedNaturalLiteralExpCS unlimitedNaturalLiteralExpCS = (UnlimitedNaturalLiteralExpCS)theEObject;
        T result = caseUnlimitedNaturalLiteralExpCS(unlimitedNaturalLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(unlimitedNaturalLiteralExpCS);
        if (result == null) result = caseExpCS(unlimitedNaturalLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.INVALID_LITERAL_EXP_CS:
      {
        InvalidLiteralExpCS invalidLiteralExpCS = (InvalidLiteralExpCS)theEObject;
        T result = caseInvalidLiteralExpCS(invalidLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(invalidLiteralExpCS);
        if (result == null) result = caseExpCS(invalidLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.NULL_LITERAL_EXP_CS:
      {
        NullLiteralExpCS nullLiteralExpCS = (NullLiteralExpCS)theEObject;
        T result = caseNullLiteralExpCS(nullLiteralExpCS);
        if (result == null) result = casePrimitiveLiteralExpCS(nullLiteralExpCS);
        if (result == null) result = caseExpCS(nullLiteralExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.NESTED_EXP_CS:
      {
        NestedExpCS nestedExpCS = (NestedExpCS)theEObject;
        T result = caseNestedExpCS(nestedExpCS);
        if (result == null) result = caseExpCS(nestedExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.SELF_EXP_CS:
      {
        SelfExpCS selfExpCS = (SelfExpCS)theEObject;
        T result = caseSelfExpCS(selfExpCS);
        if (result == null) result = caseExpCS(selfExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.IF_EXP_CS:
      {
        IfExpCS ifExpCS = (IfExpCS)theEObject;
        T result = caseIfExpCS(ifExpCS);
        if (result == null) result = caseExpCS(ifExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.IF_THEN_EXP_CS:
      {
        IfThenExpCS ifThenExpCS = (IfThenExpCS)theEObject;
        T result = caseIfThenExpCS(ifThenExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.LET_EXP_CS:
      {
        LetExpCS letExpCS = (LetExpCS)theEObject;
        T result = caseLetExpCS(letExpCS);
        if (result == null) result = caseExpCS(letExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.LET_VARIABLE_CS:
      {
        LetVariableCS letVariableCS = (LetVariableCS)theEObject;
        T result = caseLetVariableCS(letVariableCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.ROUND_BRACKETED_CLAUSE_CS:
      {
        RoundBracketedClauseCS roundBracketedClauseCS = (RoundBracketedClauseCS)theEObject;
        T result = caseRoundBracketedClauseCS(roundBracketedClauseCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.NAVIGATING_ARG_CS:
      {
        NavigatingArgCS navigatingArgCS = (NavigatingArgCS)theEObject;
        T result = caseNavigatingArgCS(navigatingArgCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.VARIABLE_CS:
      {
        VariableCS variableCS = (VariableCS)theEObject;
        T result = caseVariableCS(variableCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.INFIX_EXP_CS:
      {
        InfixExpCS infixExpCS = (InfixExpCS)theEObject;
        T result = caseInfixExpCS(infixExpCS);
        if (result == null) result = caseExpCS(infixExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UsePackage.PREFIX_EXP_CS:
      {
        PrefixExpCS prefixExpCS = (PrefixExpCS)theEObject;
        T result = casePrefixExpCS(prefixExpCS);
        if (result == null) result = caseExpCS(prefixExpCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model USE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model USE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelUSE(ModelUSE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplicity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplicity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplicity(Multiplicity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>All Types</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>All Types</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAllTypes(AllTypes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionType(CollectionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>All Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>All Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAllClass(AllClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>All Class And Enum</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>All Class And Enum</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAllClassAndEnum(AllClassAndEnum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Types</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Types</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleTypes(SimpleTypes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnum(modelConverter.use_language.use.Enum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClass(modelConverter.use_language.use.Class object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Generalization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Generalization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGeneralization(Generalization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssociation(Association object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Association End</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Association End</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssociationEnd(AssociationEnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Association Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Association Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssociationClass(AssociationClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attributes Base</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attributes Base</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributesBase(AttributesBase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operations Base</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operations Base</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationsBase(OperationsBase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationType(OperationType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationQuery(OperationQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Complex</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Complex</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationComplex(OperationComplex object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationDeclaration(OperationDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameter(Parameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State Machines Base</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State Machines Base</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStateMachinesBase(StateMachinesBase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State Machine</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State Machine</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStateMachine(StateMachine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseState(State object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransition(Transition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constraints Base</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constraints Base</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstraintsBase(ConstraintsBase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constrains General</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constrains General</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstrainsGeneral(ConstrainsGeneral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contexts Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contexts Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContextsType(ContextsType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariant Context</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariant Context</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariantContext(InvariantContext object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariant Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariant Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariantDefinition(InvariantDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Context</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Context</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationContext(OperationContext object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Constraints</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Constraints</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationConstraints(OperationConstraints object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionType(ConditionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Precondition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Precondition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrecondition(Precondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Postcondition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Postcondition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePostcondition(Postcondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Type Ref CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Type Ref CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveTypeRefCS(PrimitiveTypeRefCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Type CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Type CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionTypeCS(CollectionTypeCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Type CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Type CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapTypeCS(MapTypeCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Type CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Type CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleTypeCS(TupleTypeCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Part CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Part CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTuplePartCS(TuplePartCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Pattern CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Pattern CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionPatternCS(CollectionPatternCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternExpCS(PatternExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Typed Ref CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Typed Ref CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypedRefCS(TypedRefCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLiteralExpCS(TypeLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Name Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Name Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeNameExpCS(TypeNameExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Curly Bracketed Clause CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Curly Bracketed Clause CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCurlyBracketedClauseCS(CurlyBracketedClauseCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Shadow Part CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Shadow Part CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShadowPartCS(ShadowPartCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteralExpCS(StringLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplicity Bounds CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplicity Bounds CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplicityBoundsCS(MultiplicityBoundsCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplicity CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplicity CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplicityCS(MultiplicityCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplicity String CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplicity String CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplicityStringCS(MultiplicityStringCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Path Name CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Path Name CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePathNameCS(PathNameCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpCS(ExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveLiteralExpCS(PrimitiveLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Name Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Name Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNameExpCS(NameExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Square Bracketed Clause CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Square Bracketed Clause CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSquareBracketedClauseCS(SquareBracketedClauseCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionLiteralExpCS(CollectionLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Literal Part CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Literal Part CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionLiteralPartCS(CollectionLiteralPartCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Lambda Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Lambda Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLambdaLiteralExpCS(LambdaLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapLiteralExpCS(MapLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Literal Part CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Literal Part CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapLiteralPartCS(MapLiteralPartCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleLiteralExpCS(TupleLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Literal Part CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Literal Part CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleLiteralPartCS(TupleLiteralPartCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumberLiteralExpCS(NumberLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanLiteralExpCS(BooleanLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unlimited Natural Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unlimited Natural Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnlimitedNaturalLiteralExpCS(UnlimitedNaturalLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invalid Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invalid Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvalidLiteralExpCS(InvalidLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Null Literal Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Null Literal Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNullLiteralExpCS(NullLiteralExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nested Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nested Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNestedExpCS(NestedExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Self Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Self Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelfExpCS(SelfExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfExpCS(IfExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Then Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Then Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfThenExpCS(IfThenExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Let Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Let Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLetExpCS(LetExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Let Variable CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Let Variable CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLetVariableCS(LetVariableCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Round Bracketed Clause CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Round Bracketed Clause CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRoundBracketedClauseCS(RoundBracketedClauseCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigating Arg CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigating Arg CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigatingArgCS(NavigatingArgCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableCS(VariableCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Infix Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Infix Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInfixExpCS(InfixExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Prefix Exp CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Prefix Exp CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrefixExpCS(PrefixExpCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //UseSwitch
