/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.uml.impl;

import modelConverter.use_language.uml.Aggregation;
import modelConverter.use_language.uml.AllClass;
import modelConverter.use_language.uml.Association;
import modelConverter.use_language.uml.AssociationBasic;
import modelConverter.use_language.uml.AssociationClass;
import modelConverter.use_language.uml.AssociationType;
import modelConverter.use_language.uml.Attribute;
import modelConverter.use_language.uml.Composition;
import modelConverter.use_language.uml.ConditionType;
import modelConverter.use_language.uml.ConstrainsGeneral;
import modelConverter.use_language.uml.ConstraintsBase;
import modelConverter.use_language.uml.ContextsType;
import modelConverter.use_language.uml.Enumeration;
import modelConverter.use_language.uml.Generalization;
import modelConverter.use_language.uml.InvariantContext;
import modelConverter.use_language.uml.InvariantDefinition;
import modelConverter.use_language.uml.MemberEnd;
import modelConverter.use_language.uml.Model;
import modelConverter.use_language.uml.OperationBasic;
import modelConverter.use_language.uml.OperationComplex;
import modelConverter.use_language.uml.OperationConstraints;
import modelConverter.use_language.uml.OperationContext;
import modelConverter.use_language.uml.OperationDeclaration;
import modelConverter.use_language.uml.OperationType;
import modelConverter.use_language.uml.OwnedLiteral;
import modelConverter.use_language.uml.OwnedParameter;
import modelConverter.use_language.uml.Postcondition;
import modelConverter.use_language.uml.Precondition;
import modelConverter.use_language.uml.SimpleTypes;
import modelConverter.use_language.uml.Type;
import modelConverter.use_language.uml.UmlFactory;
import modelConverter.use_language.uml.UmlPackage;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class UmlFactoryImpl extends EFactoryImpl implements UmlFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static UmlFactory init()
  {
    try
    {
      UmlFactory theUmlFactory = (UmlFactory)EPackage.Registry.INSTANCE.getEFactory(UmlPackage.eNS_URI);
      if (theUmlFactory != null)
      {
        return theUmlFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new UmlFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UmlFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case UmlPackage.MODEL: return createModel();
      case UmlPackage.TYPE: return createType();
      case UmlPackage.ASSOCIATION_TYPE: return createAssociationType();
      case UmlPackage.ALL_CLASS: return createAllClass();
      case UmlPackage.ENUMERATION: return createEnumeration();
      case UmlPackage.OWNED_LITERAL: return createOwnedLiteral();
      case UmlPackage.CLASS: return createClass();
      case UmlPackage.ASSOCIATION_CLASS: return createAssociationClass();
      case UmlPackage.GENERALIZATION: return createGeneralization();
      case UmlPackage.SIMPLE_TYPES: return createSimpleTypes();
      case UmlPackage.ASSOCIATION: return createAssociation();
      case UmlPackage.MEMBER_END: return createMemberEnd();
      case UmlPackage.ASSOCIATION_BASIC: return createAssociationBasic();
      case UmlPackage.AGGREGATION: return createAggregation();
      case UmlPackage.COMPOSITION: return createComposition();
      case UmlPackage.ATTRIBUTE: return createAttribute();
      case UmlPackage.OPERATION_TYPE: return createOperationType();
      case UmlPackage.OPERATION_BASIC: return createOperationBasic();
      case UmlPackage.OPERATION_COMPLEX: return createOperationComplex();
      case UmlPackage.OPERATION_DECLARATION: return createOperationDeclaration();
      case UmlPackage.OWNED_PARAMETER: return createOwnedParameter();
      case UmlPackage.CONSTRAINTS_BASE: return createConstraintsBase();
      case UmlPackage.CONSTRAINS_GENERAL: return createConstrainsGeneral();
      case UmlPackage.CONTEXTS_TYPE: return createContextsType();
      case UmlPackage.INVARIANT_CONTEXT: return createInvariantContext();
      case UmlPackage.INVARIANT_DEFINITION: return createInvariantDefinition();
      case UmlPackage.OPERATION_CONTEXT: return createOperationContext();
      case UmlPackage.OPERATION_CONSTRAINTS: return createOperationConstraints();
      case UmlPackage.CONDITION_TYPE: return createConditionType();
      case UmlPackage.PRECONDITION: return createPrecondition();
      case UmlPackage.POSTCONDITION: return createPostcondition();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssociationType createAssociationType()
  {
    AssociationTypeImpl associationType = new AssociationTypeImpl();
    return associationType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AllClass createAllClass()
  {
    AllClassImpl allClass = new AllClassImpl();
    return allClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Enumeration createEnumeration()
  {
    EnumerationImpl enumeration = new EnumerationImpl();
    return enumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OwnedLiteral createOwnedLiteral()
  {
    OwnedLiteralImpl ownedLiteral = new OwnedLiteralImpl();
    return ownedLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public modelConverter.use_language.uml.Class createClass()
  {
    ClassImpl class_ = new ClassImpl();
    return class_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssociationClass createAssociationClass()
  {
    AssociationClassImpl associationClass = new AssociationClassImpl();
    return associationClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Generalization createGeneralization()
  {
    GeneralizationImpl generalization = new GeneralizationImpl();
    return generalization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleTypes createSimpleTypes()
  {
    SimpleTypesImpl simpleTypes = new SimpleTypesImpl();
    return simpleTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Association createAssociation()
  {
    AssociationImpl association = new AssociationImpl();
    return association;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MemberEnd createMemberEnd()
  {
    MemberEndImpl memberEnd = new MemberEndImpl();
    return memberEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssociationBasic createAssociationBasic()
  {
    AssociationBasicImpl associationBasic = new AssociationBasicImpl();
    return associationBasic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Aggregation createAggregation()
  {
    AggregationImpl aggregation = new AggregationImpl();
    return aggregation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Composition createComposition()
  {
    CompositionImpl composition = new CompositionImpl();
    return composition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationType createOperationType()
  {
    OperationTypeImpl operationType = new OperationTypeImpl();
    return operationType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationBasic createOperationBasic()
  {
    OperationBasicImpl operationBasic = new OperationBasicImpl();
    return operationBasic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationComplex createOperationComplex()
  {
    OperationComplexImpl operationComplex = new OperationComplexImpl();
    return operationComplex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationDeclaration createOperationDeclaration()
  {
    OperationDeclarationImpl operationDeclaration = new OperationDeclarationImpl();
    return operationDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OwnedParameter createOwnedParameter()
  {
    OwnedParameterImpl ownedParameter = new OwnedParameterImpl();
    return ownedParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstraintsBase createConstraintsBase()
  {
    ConstraintsBaseImpl constraintsBase = new ConstraintsBaseImpl();
    return constraintsBase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstrainsGeneral createConstrainsGeneral()
  {
    ConstrainsGeneralImpl constrainsGeneral = new ConstrainsGeneralImpl();
    return constrainsGeneral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextsType createContextsType()
  {
    ContextsTypeImpl contextsType = new ContextsTypeImpl();
    return contextsType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InvariantContext createInvariantContext()
  {
    InvariantContextImpl invariantContext = new InvariantContextImpl();
    return invariantContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InvariantDefinition createInvariantDefinition()
  {
    InvariantDefinitionImpl invariantDefinition = new InvariantDefinitionImpl();
    return invariantDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationContext createOperationContext()
  {
    OperationContextImpl operationContext = new OperationContextImpl();
    return operationContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationConstraints createOperationConstraints()
  {
    OperationConstraintsImpl operationConstraints = new OperationConstraintsImpl();
    return operationConstraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionType createConditionType()
  {
    ConditionTypeImpl conditionType = new ConditionTypeImpl();
    return conditionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Precondition createPrecondition()
  {
    PreconditionImpl precondition = new PreconditionImpl();
    return precondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Postcondition createPostcondition()
  {
    PostconditionImpl postcondition = new PostconditionImpl();
    return postcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UmlPackage getUmlPackage()
  {
    return (UmlPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static UmlPackage getPackage()
  {
    return UmlPackage.eINSTANCE;
  }

} //UmlFactoryImpl
