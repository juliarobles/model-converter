/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.uml.util;

import modelConverter.use_language.uml.Aggregation;
import modelConverter.use_language.uml.AllClass;
import modelConverter.use_language.uml.Association;
import modelConverter.use_language.uml.AssociationBasic;
import modelConverter.use_language.uml.AssociationClass;
import modelConverter.use_language.uml.AssociationType;
import modelConverter.use_language.uml.Attribute;
import modelConverter.use_language.uml.Composition;
import modelConverter.use_language.uml.ConditionType;
import modelConverter.use_language.uml.ConstrainsGeneral;
import modelConverter.use_language.uml.ConstraintsBase;
import modelConverter.use_language.uml.ContextsType;
import modelConverter.use_language.uml.Enumeration;
import modelConverter.use_language.uml.Generalization;
import modelConverter.use_language.uml.InvariantContext;
import modelConverter.use_language.uml.InvariantDefinition;
import modelConverter.use_language.uml.MemberEnd;
import modelConverter.use_language.uml.Model;
import modelConverter.use_language.uml.OperationBasic;
import modelConverter.use_language.uml.OperationComplex;
import modelConverter.use_language.uml.OperationConstraints;
import modelConverter.use_language.uml.OperationContext;
import modelConverter.use_language.uml.OperationDeclaration;
import modelConverter.use_language.uml.OperationType;
import modelConverter.use_language.uml.OwnedLiteral;
import modelConverter.use_language.uml.OwnedParameter;
import modelConverter.use_language.uml.Postcondition;
import modelConverter.use_language.uml.Precondition;
import modelConverter.use_language.uml.SimpleTypes;
import modelConverter.use_language.uml.Type;
import modelConverter.use_language.uml.UmlPackage;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see modelConverter.use_language.uml.UmlPackage
 * @generated
 */
public class UmlAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static UmlPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UmlAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = UmlPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UmlSwitch<Adapter> modelSwitch =
    new UmlSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseAssociationType(AssociationType object)
      {
        return createAssociationTypeAdapter();
      }
      @Override
      public Adapter caseAllClass(AllClass object)
      {
        return createAllClassAdapter();
      }
      @Override
      public Adapter caseEnumeration(Enumeration object)
      {
        return createEnumerationAdapter();
      }
      @Override
      public Adapter caseOwnedLiteral(OwnedLiteral object)
      {
        return createOwnedLiteralAdapter();
      }
      @Override
      public Adapter caseClass(modelConverter.use_language.uml.Class object)
      {
        return createClassAdapter();
      }
      @Override
      public Adapter caseAssociationClass(AssociationClass object)
      {
        return createAssociationClassAdapter();
      }
      @Override
      public Adapter caseGeneralization(Generalization object)
      {
        return createGeneralizationAdapter();
      }
      @Override
      public Adapter caseSimpleTypes(SimpleTypes object)
      {
        return createSimpleTypesAdapter();
      }
      @Override
      public Adapter caseAssociation(Association object)
      {
        return createAssociationAdapter();
      }
      @Override
      public Adapter caseMemberEnd(MemberEnd object)
      {
        return createMemberEndAdapter();
      }
      @Override
      public Adapter caseAssociationBasic(AssociationBasic object)
      {
        return createAssociationBasicAdapter();
      }
      @Override
      public Adapter caseAggregation(Aggregation object)
      {
        return createAggregationAdapter();
      }
      @Override
      public Adapter caseComposition(Composition object)
      {
        return createCompositionAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseOperationType(OperationType object)
      {
        return createOperationTypeAdapter();
      }
      @Override
      public Adapter caseOperationBasic(OperationBasic object)
      {
        return createOperationBasicAdapter();
      }
      @Override
      public Adapter caseOperationComplex(OperationComplex object)
      {
        return createOperationComplexAdapter();
      }
      @Override
      public Adapter caseOperationDeclaration(OperationDeclaration object)
      {
        return createOperationDeclarationAdapter();
      }
      @Override
      public Adapter caseOwnedParameter(OwnedParameter object)
      {
        return createOwnedParameterAdapter();
      }
      @Override
      public Adapter caseConstraintsBase(ConstraintsBase object)
      {
        return createConstraintsBaseAdapter();
      }
      @Override
      public Adapter caseConstrainsGeneral(ConstrainsGeneral object)
      {
        return createConstrainsGeneralAdapter();
      }
      @Override
      public Adapter caseContextsType(ContextsType object)
      {
        return createContextsTypeAdapter();
      }
      @Override
      public Adapter caseInvariantContext(InvariantContext object)
      {
        return createInvariantContextAdapter();
      }
      @Override
      public Adapter caseInvariantDefinition(InvariantDefinition object)
      {
        return createInvariantDefinitionAdapter();
      }
      @Override
      public Adapter caseOperationContext(OperationContext object)
      {
        return createOperationContextAdapter();
      }
      @Override
      public Adapter caseOperationConstraints(OperationConstraints object)
      {
        return createOperationConstraintsAdapter();
      }
      @Override
      public Adapter caseConditionType(ConditionType object)
      {
        return createConditionTypeAdapter();
      }
      @Override
      public Adapter casePrecondition(Precondition object)
      {
        return createPreconditionAdapter();
      }
      @Override
      public Adapter casePostcondition(Postcondition object)
      {
        return createPostconditionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.AssociationType <em>Association Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.AssociationType
   * @generated
   */
  public Adapter createAssociationTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.AllClass <em>All Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.AllClass
   * @generated
   */
  public Adapter createAllClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.Enumeration <em>Enumeration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.Enumeration
   * @generated
   */
  public Adapter createEnumerationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.OwnedLiteral <em>Owned Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.OwnedLiteral
   * @generated
   */
  public Adapter createOwnedLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.Class <em>Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.Class
   * @generated
   */
  public Adapter createClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.AssociationClass <em>Association Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.AssociationClass
   * @generated
   */
  public Adapter createAssociationClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.Generalization <em>Generalization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.Generalization
   * @generated
   */
  public Adapter createGeneralizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.SimpleTypes <em>Simple Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.SimpleTypes
   * @generated
   */
  public Adapter createSimpleTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.Association <em>Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.Association
   * @generated
   */
  public Adapter createAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.MemberEnd <em>Member End</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.MemberEnd
   * @generated
   */
  public Adapter createMemberEndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.AssociationBasic <em>Association Basic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.AssociationBasic
   * @generated
   */
  public Adapter createAssociationBasicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.Aggregation <em>Aggregation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.Aggregation
   * @generated
   */
  public Adapter createAggregationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.Composition <em>Composition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.Composition
   * @generated
   */
  public Adapter createCompositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.OperationType <em>Operation Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.OperationType
   * @generated
   */
  public Adapter createOperationTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.OperationBasic <em>Operation Basic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.OperationBasic
   * @generated
   */
  public Adapter createOperationBasicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.OperationComplex <em>Operation Complex</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.OperationComplex
   * @generated
   */
  public Adapter createOperationComplexAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.OperationDeclaration <em>Operation Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.OperationDeclaration
   * @generated
   */
  public Adapter createOperationDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.OwnedParameter <em>Owned Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.OwnedParameter
   * @generated
   */
  public Adapter createOwnedParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.ConstraintsBase <em>Constraints Base</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.ConstraintsBase
   * @generated
   */
  public Adapter createConstraintsBaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.ConstrainsGeneral <em>Constrains General</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.ConstrainsGeneral
   * @generated
   */
  public Adapter createConstrainsGeneralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.ContextsType <em>Contexts Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.ContextsType
   * @generated
   */
  public Adapter createContextsTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.InvariantContext <em>Invariant Context</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.InvariantContext
   * @generated
   */
  public Adapter createInvariantContextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.InvariantDefinition <em>Invariant Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.InvariantDefinition
   * @generated
   */
  public Adapter createInvariantDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.OperationContext <em>Operation Context</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.OperationContext
   * @generated
   */
  public Adapter createOperationContextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.OperationConstraints <em>Operation Constraints</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.OperationConstraints
   * @generated
   */
  public Adapter createOperationConstraintsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.ConditionType <em>Condition Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.ConditionType
   * @generated
   */
  public Adapter createConditionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.Precondition <em>Precondition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.Precondition
   * @generated
   */
  public Adapter createPreconditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link modelConverter.use_language.uml.Postcondition <em>Postcondition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see modelConverter.use_language.uml.Postcondition
   * @generated
   */
  public Adapter createPostconditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //UmlAdapterFactory
