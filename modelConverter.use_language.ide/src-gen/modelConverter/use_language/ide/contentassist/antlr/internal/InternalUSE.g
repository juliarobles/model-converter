/*
 * generated by Xtext 2.25.0
 */
grammar InternalUSE;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package modelConverter.use_language.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package modelConverter.use_language.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import modelConverter.use_language.services.USEGrammarAccess;

}
@parser::members {
	private USEGrammarAccess grammarAccess;

	public void setGrammarAccess(USEGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicity
entryRuleMultiplicity
:
{ before(grammarAccess.getMultiplicityRule()); }
	 ruleMultiplicity
{ after(grammarAccess.getMultiplicityRule()); } 
	 EOF 
;

// Rule Multiplicity
ruleMultiplicity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicityAccess().getGroup()); }
		(rule__Multiplicity__Group__0)
		{ after(grammarAccess.getMultiplicityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntToString
entryRuleIntToString
:
{ before(grammarAccess.getIntToStringRule()); }
	 ruleIntToString
{ after(grammarAccess.getIntToStringRule()); } 
	 EOF 
;

// Rule IntToString
ruleIntToString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getIntToStringAccess().getAlternatives()); }
			(rule__IntToString__Alternatives)
			{ after(grammarAccess.getIntToStringAccess().getAlternatives()); }
		)
		(
			{ before(grammarAccess.getIntToStringAccess().getAlternatives()); }
			(rule__IntToString__Alternatives)*
			{ after(grammarAccess.getIntToStringAccess().getAlternatives()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefaultType
entryRuleDefaultType
:
{ before(grammarAccess.getDefaultTypeRule()); }
	 ruleDefaultType
{ after(grammarAccess.getDefaultTypeRule()); } 
	 EOF 
;

// Rule DefaultType
ruleDefaultType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefaultTypeAccess().getAlternatives()); }
		(rule__DefaultType__Alternatives)
		{ after(grammarAccess.getDefaultTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnum
entryRuleEnum
:
{ before(grammarAccess.getEnumRule()); }
	 ruleEnum
{ after(grammarAccess.getEnumRule()); } 
	 EOF 
;

// Rule Enum
ruleEnum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumAccess().getGroup()); }
		(rule__Enum__Group__0)
		{ after(grammarAccess.getEnumAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumElement
entryRuleEnumElement
:
{ before(grammarAccess.getEnumElementRule()); }
	 ruleEnumElement
{ after(grammarAccess.getEnumElementRule()); } 
	 EOF 
;

// Rule EnumElement
ruleEnumElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumElementAccess().getGroup()); }
		(rule__EnumElement__Group__0)
		{ after(grammarAccess.getEnumElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClass
entryRuleClass
:
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassAccess().getGroup()); }
		(rule__Class__Group__0)
		{ after(grammarAccess.getClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGeneralization
entryRuleGeneralization
:
{ before(grammarAccess.getGeneralizationRule()); }
	 ruleGeneralization
{ after(grammarAccess.getGeneralizationRule()); } 
	 EOF 
;

// Rule Generalization
ruleGeneralization 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGeneralizationAccess().getGroup()); }
		(rule__Generalization__Group__0)
		{ after(grammarAccess.getGeneralizationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleTypes
entryRuleSimpleTypes
:
{ before(grammarAccess.getSimpleTypesRule()); }
	 ruleSimpleTypes
{ after(grammarAccess.getSimpleTypesRule()); } 
	 EOF 
;

// Rule SimpleTypes
ruleSimpleTypes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleTypesAccess().getAlternatives()); }
		(rule__SimpleTypes__Alternatives)
		{ after(grammarAccess.getSimpleTypesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssociation
entryRuleAssociation
:
{ before(grammarAccess.getAssociationRule()); }
	 ruleAssociation
{ after(grammarAccess.getAssociationRule()); } 
	 EOF 
;

// Rule Association
ruleAssociation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssociationAccess().getGroup()); }
		(rule__Association__Group__0)
		{ after(grammarAccess.getAssociationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssociationEnd
entryRuleAssociationEnd
:
{ before(grammarAccess.getAssociationEndRule()); }
	 ruleAssociationEnd
{ after(grammarAccess.getAssociationEndRule()); } 
	 EOF 
;

// Rule AssociationEnd
ruleAssociationEnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssociationEndAccess().getGroup()); }
		(rule__AssociationEnd__Group__0)
		{ after(grammarAccess.getAssociationEndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssociationClass
entryRuleAssociationClass
:
{ before(grammarAccess.getAssociationClassRule()); }
	 ruleAssociationClass
{ after(grammarAccess.getAssociationClassRule()); } 
	 EOF 
;

// Rule AssociationClass
ruleAssociationClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssociationClassAccess().getGroup()); }
		(rule__AssociationClass__Group__0)
		{ after(grammarAccess.getAssociationClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttributesBase
entryRuleAttributesBase
:
{ before(grammarAccess.getAttributesBaseRule()); }
	 ruleAttributesBase
{ after(grammarAccess.getAttributesBaseRule()); } 
	 EOF 
;

// Rule AttributesBase
ruleAttributesBase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributesBaseAccess().getGroup()); }
		(rule__AttributesBase__Group__0)
		{ after(grammarAccess.getAttributesBaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationsBase
entryRuleOperationsBase
:
{ before(grammarAccess.getOperationsBaseRule()); }
	 ruleOperationsBase
{ after(grammarAccess.getOperationsBaseRule()); } 
	 EOF 
;

// Rule OperationsBase
ruleOperationsBase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationsBaseAccess().getGroup()); }
		(rule__OperationsBase__Group__0)
		{ after(grammarAccess.getOperationsBaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationType
entryRuleOperationType
:
{ before(grammarAccess.getOperationTypeRule()); }
	 ruleOperationType
{ after(grammarAccess.getOperationTypeRule()); } 
	 EOF 
;

// Rule OperationType
ruleOperationType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationTypeAccess().getAlternatives()); }
		(rule__OperationType__Alternatives)
		{ after(grammarAccess.getOperationTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationQuery
entryRuleOperationQuery
:
{ before(grammarAccess.getOperationQueryRule()); }
	 ruleOperationQuery
{ after(grammarAccess.getOperationQueryRule()); } 
	 EOF 
;

// Rule OperationQuery
ruleOperationQuery 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationQueryAccess().getGroup()); }
		(rule__OperationQuery__Group__0)
		{ after(grammarAccess.getOperationQueryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationComplex
entryRuleOperationComplex
:
{ before(grammarAccess.getOperationComplexRule()); }
	 ruleOperationComplex
{ after(grammarAccess.getOperationComplexRule()); } 
	 EOF 
;

// Rule OperationComplex
ruleOperationComplex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationComplexAccess().getGroup()); }
		(rule__OperationComplex__Group__0)
		{ after(grammarAccess.getOperationComplexAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationDeclaration
entryRuleOperationDeclaration
:
{ before(grammarAccess.getOperationDeclarationRule()); }
	 ruleOperationDeclaration
{ after(grammarAccess.getOperationDeclarationRule()); } 
	 EOF 
;

// Rule OperationDeclaration
ruleOperationDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationDeclarationAccess().getGroup()); }
		(rule__OperationDeclaration__Group__0)
		{ after(grammarAccess.getOperationDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraintsBase
entryRuleConstraintsBase
:
{ before(grammarAccess.getConstraintsBaseRule()); }
	 ruleConstraintsBase
{ after(grammarAccess.getConstraintsBaseRule()); } 
	 EOF 
;

// Rule ConstraintsBase
ruleConstraintsBase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintsBaseAccess().getGroup()); }
		(rule__ConstraintsBase__Group__0)
		{ after(grammarAccess.getConstraintsBaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstrainsGeneral
entryRuleConstrainsGeneral
:
{ before(grammarAccess.getConstrainsGeneralRule()); }
	 ruleConstrainsGeneral
{ after(grammarAccess.getConstrainsGeneralRule()); } 
	 EOF 
;

// Rule ConstrainsGeneral
ruleConstrainsGeneral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstrainsGeneralAccess().getGroup()); }
		(rule__ConstrainsGeneral__Group__0)
		{ after(grammarAccess.getConstrainsGeneralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContextsType
entryRuleContextsType
:
{ before(grammarAccess.getContextsTypeRule()); }
	 ruleContextsType
{ after(grammarAccess.getContextsTypeRule()); } 
	 EOF 
;

// Rule ContextsType
ruleContextsType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContextsTypeAccess().getAlternatives()); }
		(rule__ContextsType__Alternatives)
		{ after(grammarAccess.getContextsTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInvariantContext
entryRuleInvariantContext
:
{ before(grammarAccess.getInvariantContextRule()); }
	 ruleInvariantContext
{ after(grammarAccess.getInvariantContextRule()); } 
	 EOF 
;

// Rule InvariantContext
ruleInvariantContext 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInvariantContextAccess().getGroup()); }
		(rule__InvariantContext__Group__0)
		{ after(grammarAccess.getInvariantContextAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInvariantDefinition
entryRuleInvariantDefinition
:
{ before(grammarAccess.getInvariantDefinitionRule()); }
	 ruleInvariantDefinition
{ after(grammarAccess.getInvariantDefinitionRule()); } 
	 EOF 
;

// Rule InvariantDefinition
ruleInvariantDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInvariantDefinitionAccess().getGroup()); }
		(rule__InvariantDefinition__Group__0)
		{ after(grammarAccess.getInvariantDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationContext
entryRuleOperationContext
:
{ before(grammarAccess.getOperationContextRule()); }
	 ruleOperationContext
{ after(grammarAccess.getOperationContextRule()); } 
	 EOF 
;

// Rule OperationContext
ruleOperationContext 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationContextAccess().getGroup()); }
		(rule__OperationContext__Group__0)
		{ after(grammarAccess.getOperationContextAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationConstraints
entryRuleOperationConstraints
:
{ before(grammarAccess.getOperationConstraintsRule()); }
	 ruleOperationConstraints
{ after(grammarAccess.getOperationConstraintsRule()); } 
	 EOF 
;

// Rule OperationConstraints
ruleOperationConstraints 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationConstraintsAccess().getGroup()); }
		(rule__OperationConstraints__Group__0)
		{ after(grammarAccess.getOperationConstraintsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionType
entryRuleConditionType
:
{ before(grammarAccess.getConditionTypeRule()); }
	 ruleConditionType
{ after(grammarAccess.getConditionTypeRule()); } 
	 EOF 
;

// Rule ConditionType
ruleConditionType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionTypeAccess().getAlternatives()); }
		(rule__ConditionType__Alternatives)
		{ after(grammarAccess.getConditionTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrecondition
entryRulePrecondition
:
{ before(grammarAccess.getPreconditionRule()); }
	 rulePrecondition
{ after(grammarAccess.getPreconditionRule()); } 
	 EOF 
;

// Rule Precondition
rulePrecondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPreconditionAccess().getGroup()); }
		(rule__Precondition__Group__0)
		{ after(grammarAccess.getPreconditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePostcondition
entryRulePostcondition
:
{ before(grammarAccess.getPostconditionRule()); }
	 rulePostcondition
{ after(grammarAccess.getPostconditionRule()); } 
	 EOF 
;

// Rule Postcondition
rulePostcondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPostconditionAccess().getGroup()); }
		(rule__Postcondition__Group__0)
		{ after(grammarAccess.getPostconditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOCLExpression
entryRuleOCLExpression
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getOCLExpressionRule()); }
	 ruleOCLExpression
{ after(grammarAccess.getOCLExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule OCLExpression
ruleOCLExpression 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT");
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOCLExpressionAccess().getSTRINGTerminalRuleCall()); }
		RULE_STRING
		{ after(grammarAccess.getOCLExpressionAccess().getSTRINGTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

rule__Multiplicity__MinValueAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicityAccess().getMinValueAsteriskKeyword_0_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicityAccess().getMinValueAsteriskKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicityAccess().getMinValueIntToStringParserRuleCall_0_0_1()); }
		ruleIntToString
		{ after(grammarAccess.getMultiplicityAccess().getMinValueIntToStringParserRuleCall_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__MaxValueAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicityAccess().getMaxValueAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicityAccess().getMaxValueAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicityAccess().getMaxValueIntToStringParserRuleCall_1_1_0_1()); }
		ruleIntToString
		{ after(grammarAccess.getMultiplicityAccess().getMaxValueIntToStringParserRuleCall_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__MinValueAlternatives_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicityAccess().getMinValueAsteriskKeyword_2_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicityAccess().getMinValueAsteriskKeyword_2_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicityAccess().getMinValueIntToStringParserRuleCall_2_1_0_1()); }
		ruleIntToString
		{ after(grammarAccess.getMultiplicityAccess().getMinValueIntToStringParserRuleCall_2_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__MaxValueAlternatives_2_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicityAccess().getMaxValueAsteriskKeyword_2_2_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicityAccess().getMaxValueAsteriskKeyword_2_2_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicityAccess().getMaxValueIntToStringParserRuleCall_2_2_1_0_1()); }
		ruleIntToString
		{ after(grammarAccess.getMultiplicityAccess().getMaxValueIntToStringParserRuleCall_2_2_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntToString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntToStringAccess().getDigitZeroKeyword_0()); }
		'0'
		{ after(grammarAccess.getIntToStringAccess().getDigitZeroKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getIntToStringAccess().getDigitOneKeyword_1()); }
		'1'
		{ after(grammarAccess.getIntToStringAccess().getDigitOneKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getIntToStringAccess().getDigitTwoKeyword_2()); }
		'2'
		{ after(grammarAccess.getIntToStringAccess().getDigitTwoKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getIntToStringAccess().getDigitThreeKeyword_3()); }
		'3'
		{ after(grammarAccess.getIntToStringAccess().getDigitThreeKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getIntToStringAccess().getDigitFourKeyword_4()); }
		'4'
		{ after(grammarAccess.getIntToStringAccess().getDigitFourKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getIntToStringAccess().getDigitFiveKeyword_5()); }
		'5'
		{ after(grammarAccess.getIntToStringAccess().getDigitFiveKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getIntToStringAccess().getDigitSixKeyword_6()); }
		'6'
		{ after(grammarAccess.getIntToStringAccess().getDigitSixKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getIntToStringAccess().getDigitSevenKeyword_7()); }
		'7'
		{ after(grammarAccess.getIntToStringAccess().getDigitSevenKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getIntToStringAccess().getDigitEightKeyword_8()); }
		'8'
		{ after(grammarAccess.getIntToStringAccess().getDigitEightKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getIntToStringAccess().getDigitNineKeyword_9()); }
		'9'
		{ after(grammarAccess.getIntToStringAccess().getDigitNineKeyword_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefaultTypeAccess().getIntegerKeyword_0()); }
		'Integer'
		{ after(grammarAccess.getDefaultTypeAccess().getIntegerKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getDefaultTypeAccess().getStringKeyword_1()); }
		'String'
		{ after(grammarAccess.getDefaultTypeAccess().getStringKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getDefaultTypeAccess().getRealKeyword_2()); }
		'Real'
		{ after(grammarAccess.getDefaultTypeAccess().getRealKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getDefaultTypeAccess().getBooleanKeyword_3()); }
		'Boolean'
		{ after(grammarAccess.getDefaultTypeAccess().getBooleanKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getClassParserRuleCall_0()); }
		ruleClass
		{ after(grammarAccess.getTypeAccess().getClassParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getAssociationParserRuleCall_1()); }
		ruleAssociation
		{ after(grammarAccess.getTypeAccess().getAssociationParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getAssociationClassParserRuleCall_2()); }
		ruleAssociationClass
		{ after(grammarAccess.getTypeAccess().getAssociationClassParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypes__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypesAccess().getDefaultTypeAssignment_0()); }
		(rule__SimpleTypes__DefaultTypeAssignment_0)
		{ after(grammarAccess.getSimpleTypesAccess().getDefaultTypeAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleTypesAccess().getReferendedAssignment_1()); }
		(rule__SimpleTypes__ReferendedAssignment_1)
		{ after(grammarAccess.getSimpleTypesAccess().getReferendedAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__TypeAssociationAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationAccess().getTypeAssociationAssociationKeyword_0_0_0()); }
		'association'
		{ after(grammarAccess.getAssociationAccess().getTypeAssociationAssociationKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssociationAccess().getTypeAssociationAggregationKeyword_0_0_1()); }
		'aggregation'
		{ after(grammarAccess.getAssociationAccess().getTypeAssociationAggregationKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getAssociationAccess().getTypeAssociationCompositionKeyword_0_0_2()); }
		'composition'
		{ after(grammarAccess.getAssociationAccess().getTypeAssociationCompositionKeyword_0_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationTypeAccess().getOperationComplexParserRuleCall_0()); }
		ruleOperationComplex
		{ after(grammarAccess.getOperationTypeAccess().getOperationComplexParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperationTypeAccess().getOperationQueryParserRuleCall_1()); }
		ruleOperationQuery
		{ after(grammarAccess.getOperationTypeAccess().getOperationQueryParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextsType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContextsTypeAccess().getInvariantContextParserRuleCall_0()); }
		ruleInvariantContext
		{ after(grammarAccess.getContextsTypeAccess().getInvariantContextParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getContextsTypeAccess().getOperationContextParserRuleCall_1()); }
		ruleOperationContext
		{ after(grammarAccess.getContextsTypeAccess().getOperationContextParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionTypeAccess().getPreconditionParserRuleCall_0()); }
		rulePrecondition
		{ after(grammarAccess.getConditionTypeAccess().getPreconditionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionTypeAccess().getPostconditionParserRuleCall_1()); }
		rulePostcondition
		{ after(grammarAccess.getConditionTypeAccess().getPostconditionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getModelKeyword_0()); }
	'model'
	{ after(grammarAccess.getModelAccess().getModelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getNameAssignment_1()); }
	(rule__Model__NameAssignment_1)
	{ after(grammarAccess.getModelAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getGroup_2()); }
	(rule__Model__Group_2__0)
	{ after(grammarAccess.getModelAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_2__0__Impl
	rule__Model__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getEnumsAssignment_2_0()); }
	(rule__Model__EnumsAssignment_2_0)*
	{ after(grammarAccess.getModelAccess().getEnumsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_2__1__Impl
	rule__Model__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getPackagedElementAssignment_2_1()); }
	(rule__Model__PackagedElementAssignment_2_1)*
	{ after(grammarAccess.getModelAccess().getPackagedElementAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getConstraintsAssignment_2_2()); }
	(rule__Model__ConstraintsAssignment_2_2)?
	{ after(grammarAccess.getModelAccess().getConstraintsAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplicity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplicity__Group__0__Impl
	rule__Multiplicity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicityAccess().getMinValueAssignment_0()); }
	(rule__Multiplicity__MinValueAssignment_0)
	{ after(grammarAccess.getMultiplicityAccess().getMinValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplicity__Group__1__Impl
	rule__Multiplicity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicityAccess().getGroup_1()); }
	(rule__Multiplicity__Group_1__0)?
	{ after(grammarAccess.getMultiplicityAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplicity__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicityAccess().getGroup_2()); }
	(rule__Multiplicity__Group_2__0)*
	{ after(grammarAccess.getMultiplicityAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplicity__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplicity__Group_1__0__Impl
	rule__Multiplicity__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_1_0()); }
	'..'
	{ after(grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplicity__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicityAccess().getMaxValueAssignment_1_1()); }
	(rule__Multiplicity__MaxValueAssignment_1_1)
	{ after(grammarAccess.getMultiplicityAccess().getMaxValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplicity__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplicity__Group_2__0__Impl
	rule__Multiplicity__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicityAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getMultiplicityAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplicity__Group_2__1__Impl
	rule__Multiplicity__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicityAccess().getMinValueAssignment_2_1()); }
	(rule__Multiplicity__MinValueAssignment_2_1)
	{ after(grammarAccess.getMultiplicityAccess().getMinValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplicity__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicityAccess().getGroup_2_2()); }
	(rule__Multiplicity__Group_2_2__0)?
	{ after(grammarAccess.getMultiplicityAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplicity__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplicity__Group_2_2__0__Impl
	rule__Multiplicity__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_2_2_0()); }
	'..'
	{ after(grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplicity__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicityAccess().getMaxValueAssignment_2_2_1()); }
	(rule__Multiplicity__MaxValueAssignment_2_2_1)
	{ after(grammarAccess.getMultiplicityAccess().getMaxValueAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group__0__Impl
	rule__Enum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getEnumKeyword_0()); }
	'enum'
	{ after(grammarAccess.getEnumAccess().getEnumKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group__1__Impl
	rule__Enum__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getNameAssignment_1()); }
	(rule__Enum__NameAssignment_1)?
	{ after(grammarAccess.getEnumAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group__2__Impl
	rule__Enum__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group__3__Impl
	rule__Enum__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getEnumAccess().getElementsAssignment_3()); }
		(rule__Enum__ElementsAssignment_3)
		{ after(grammarAccess.getEnumAccess().getElementsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getEnumAccess().getElementsAssignment_3()); }
		(rule__Enum__ElementsAssignment_3)*
		{ after(grammarAccess.getEnumAccess().getElementsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumElement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumElement__Group__0__Impl
	rule__EnumElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumElement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumElementAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getEnumElementAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumElement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumElement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumElement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumElementAccess().getCommaKeyword_1()); }
	(',')?
	{ after(grammarAccess.getEnumElementAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__0__Impl
	rule__Class__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getAbstractAssignment_0()); }
	(rule__Class__AbstractAssignment_0)?
	{ after(grammarAccess.getClassAccess().getAbstractAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__1__Impl
	rule__Class__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getClassKeyword_1()); }
	'class'
	{ after(grammarAccess.getClassAccess().getClassKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__2__Impl
	rule__Class__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getNameAssignment_2()); }
	(rule__Class__NameAssignment_2)
	{ after(grammarAccess.getClassAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__3__Impl
	rule__Class__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getGroup_3()); }
	(rule__Class__Group_3__0)?
	{ after(grammarAccess.getClassAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__4__Impl
	rule__Class__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getAttributesAssignment_4()); }
	(rule__Class__AttributesAssignment_4)?
	{ after(grammarAccess.getClassAccess().getAttributesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__5__Impl
	rule__Class__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getOperationsAssignment_5()); }
	(rule__Class__OperationsAssignment_5)?
	{ after(grammarAccess.getClassAccess().getOperationsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__6__Impl
	rule__Class__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getConstraintsAssignment_6()); }
	(rule__Class__ConstraintsAssignment_6)?
	{ after(grammarAccess.getClassAccess().getConstraintsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getEndKeyword_7()); }
	'end'
	{ after(grammarAccess.getClassAccess().getEndKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_3__0__Impl
	rule__Class__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getLessThanSignKeyword_3_0()); }
	'<'
	{ after(grammarAccess.getClassAccess().getLessThanSignKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getClassAccess().getGeneralizationAssignment_3_1()); }
		(rule__Class__GeneralizationAssignment_3_1)
		{ after(grammarAccess.getClassAccess().getGeneralizationAssignment_3_1()); }
	)
	(
		{ before(grammarAccess.getClassAccess().getGeneralizationAssignment_3_1()); }
		(rule__Class__GeneralizationAssignment_3_1)*
		{ after(grammarAccess.getClassAccess().getGeneralizationAssignment_3_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Generalization__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generalization__Group__0__Impl
	rule__Generalization__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneralizationAccess().getGeneralAssignment_0()); }
	(rule__Generalization__GeneralAssignment_0)
	{ after(grammarAccess.getGeneralizationAccess().getGeneralAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generalization__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneralizationAccess().getCommaKeyword_1()); }
	(',')?
	{ after(grammarAccess.getGeneralizationAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Association__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Association__Group__0__Impl
	rule__Association__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationAccess().getTypeAssociationAssignment_0()); }
	(rule__Association__TypeAssociationAssignment_0)
	{ after(grammarAccess.getAssociationAccess().getTypeAssociationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Association__Group__1__Impl
	rule__Association__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationAccess().getNameAssignment_1()); }
	(rule__Association__NameAssignment_1)
	{ after(grammarAccess.getAssociationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Association__Group__2__Impl
	rule__Association__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationAccess().getBetweenKeyword_2()); }
	'between'
	{ after(grammarAccess.getAssociationAccess().getBetweenKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Association__Group__3__Impl
	rule__Association__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAssociationAccess().getAssociationEndsAssignment_3()); }
		(rule__Association__AssociationEndsAssignment_3)
		{ after(grammarAccess.getAssociationAccess().getAssociationEndsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getAssociationAccess().getAssociationEndsAssignment_3()); }
		(rule__Association__AssociationEndsAssignment_3)*
		{ after(grammarAccess.getAssociationAccess().getAssociationEndsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Association__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getAssociationAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssociationEnd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationEnd__Group__0__Impl
	rule__AssociationEnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationEndAccess().getTypeAssignment_0()); }
	(rule__AssociationEnd__TypeAssignment_0)
	{ after(grammarAccess.getAssociationEndAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationEnd__Group__1__Impl
	rule__AssociationEnd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationEndAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getAssociationEndAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationEnd__Group__2__Impl
	rule__AssociationEnd__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationEndAccess().getMulAssignment_2()); }
	(rule__AssociationEnd__MulAssignment_2)
	{ after(grammarAccess.getAssociationEndAccess().getMulAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationEnd__Group__3__Impl
	rule__AssociationEnd__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationEndAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getAssociationEndAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationEnd__Group__4__Impl
	rule__AssociationEnd__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationEndAccess().getGroup_4()); }
	(rule__AssociationEnd__Group_4__0)?
	{ after(grammarAccess.getAssociationEndAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationEnd__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationEndAccess().getOrderedAssignment_5()); }
	(rule__AssociationEnd__OrderedAssignment_5)?
	{ after(grammarAccess.getAssociationEndAccess().getOrderedAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssociationEnd__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationEnd__Group_4__0__Impl
	rule__AssociationEnd__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationEndAccess().getRoleKeyword_4_0()); }
	'role'
	{ after(grammarAccess.getAssociationEndAccess().getRoleKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationEnd__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationEndAccess().getRoleAssignment_4_1()); }
	(rule__AssociationEnd__RoleAssignment_4_1)
	{ after(grammarAccess.getAssociationEndAccess().getRoleAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssociationClass__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationClass__Group__0__Impl
	rule__AssociationClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationClassAccess().getAbstractAssignment_0()); }
	(rule__AssociationClass__AbstractAssignment_0)?
	{ after(grammarAccess.getAssociationClassAccess().getAbstractAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationClass__Group__1__Impl
	rule__AssociationClass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationClassAccess().getAssociationclassKeyword_1()); }
	'associationclass'
	{ after(grammarAccess.getAssociationClassAccess().getAssociationclassKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationClass__Group__2__Impl
	rule__AssociationClass__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationClassAccess().getNameAssignment_2()); }
	(rule__AssociationClass__NameAssignment_2)
	{ after(grammarAccess.getAssociationClassAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationClass__Group__3__Impl
	rule__AssociationClass__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationClassAccess().getGroup_3()); }
	(rule__AssociationClass__Group_3__0)?
	{ after(grammarAccess.getAssociationClassAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationClass__Group__4__Impl
	rule__AssociationClass__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationClassAccess().getBetweenKeyword_4()); }
	'between'
	{ after(grammarAccess.getAssociationClassAccess().getBetweenKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationClass__Group__5__Impl
	rule__AssociationClass__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAssociationClassAccess().getAssociationEndsAssignment_5()); }
		(rule__AssociationClass__AssociationEndsAssignment_5)
		{ after(grammarAccess.getAssociationClassAccess().getAssociationEndsAssignment_5()); }
	)
	(
		{ before(grammarAccess.getAssociationClassAccess().getAssociationEndsAssignment_5()); }
		(rule__AssociationClass__AssociationEndsAssignment_5)*
		{ after(grammarAccess.getAssociationClassAccess().getAssociationEndsAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationClass__Group__6__Impl
	rule__AssociationClass__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationClassAccess().getAttributesAssignment_6()); }
	(rule__AssociationClass__AttributesAssignment_6)?
	{ after(grammarAccess.getAssociationClassAccess().getAttributesAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationClass__Group__7__Impl
	rule__AssociationClass__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationClassAccess().getOperationsAssignment_7()); }
	(rule__AssociationClass__OperationsAssignment_7)?
	{ after(grammarAccess.getAssociationClassAccess().getOperationsAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationClass__Group__8__Impl
	rule__AssociationClass__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationClassAccess().getConstraintsAssignment_8()); }
	(rule__AssociationClass__ConstraintsAssignment_8)?
	{ after(grammarAccess.getAssociationClassAccess().getConstraintsAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationClass__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationClassAccess().getEndKeyword_9()); }
	'end'
	{ after(grammarAccess.getAssociationClassAccess().getEndKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssociationClass__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationClass__Group_3__0__Impl
	rule__AssociationClass__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssociationClassAccess().getLessThanSignKeyword_3_0()); }
	'<'
	{ after(grammarAccess.getAssociationClassAccess().getLessThanSignKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssociationClass__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAssociationClassAccess().getGeneralizationAssignment_3_1()); }
		(rule__AssociationClass__GeneralizationAssignment_3_1)
		{ after(grammarAccess.getAssociationClassAccess().getGeneralizationAssignment_3_1()); }
	)
	(
		{ before(grammarAccess.getAssociationClassAccess().getGeneralizationAssignment_3_1()); }
		(rule__AssociationClass__GeneralizationAssignment_3_1)*
		{ after(grammarAccess.getAssociationClassAccess().getGeneralizationAssignment_3_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttributesBase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributesBase__Group__0__Impl
	rule__AttributesBase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributesBase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesBaseAccess().getAttributesKeyword_0()); }
	'attributes'
	{ after(grammarAccess.getAttributesBaseAccess().getAttributesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributesBase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributesBase__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributesBase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesBaseAccess().getAttributesAssignment_1()); }
	(rule__AttributesBase__AttributesAssignment_1)*
	{ after(grammarAccess.getAttributesBaseAccess().getAttributesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
	(rule__Attribute__NameAssignment_0)
	{ after(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getAttributeAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getTypeAssignment_2()); }
	(rule__Attribute__TypeAssignment_2)
	{ after(grammarAccess.getAttributeAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationsBase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationsBase__Group__0__Impl
	rule__OperationsBase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsBase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsBaseAccess().getOperationsKeyword_0()); }
	'operations'
	{ after(grammarAccess.getOperationsBaseAccess().getOperationsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsBase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationsBase__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsBase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationsBaseAccess().getOperationsAssignment_1()); }
	(rule__OperationsBase__OperationsAssignment_1)*
	{ after(grammarAccess.getOperationsBaseAccess().getOperationsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationQuery__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationQuery__Group__0__Impl
	rule__OperationQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationQuery__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationQueryAccess().getOperationDeclarationAssignment_0()); }
	(rule__OperationQuery__OperationDeclarationAssignment_0)
	{ after(grammarAccess.getOperationQueryAccess().getOperationDeclarationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationQuery__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationQuery__Group__1__Impl
	rule__OperationQuery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationQuery__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationQueryAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getOperationQueryAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationQuery__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationQuery__Group__2__Impl
	rule__OperationQuery__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationQuery__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationQueryAccess().getOperationbodyAssignment_2()); }
	(rule__OperationQuery__OperationbodyAssignment_2)
	{ after(grammarAccess.getOperationQueryAccess().getOperationbodyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationQuery__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationQuery__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationQuery__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationQueryAccess().getConditionsAssignment_3()); }
	(rule__OperationQuery__ConditionsAssignment_3)*
	{ after(grammarAccess.getOperationQueryAccess().getConditionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationComplex__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationComplex__Group__0__Impl
	rule__OperationComplex__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationComplex__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationComplexAccess().getOperationDeclarationAssignment_0()); }
	(rule__OperationComplex__OperationDeclarationAssignment_0)
	{ after(grammarAccess.getOperationComplexAccess().getOperationDeclarationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationComplex__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationComplex__Group__1__Impl
	rule__OperationComplex__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationComplex__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationComplexAccess().getGroup_1()); }
	(rule__OperationComplex__Group_1__0)?
	{ after(grammarAccess.getOperationComplexAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationComplex__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationComplex__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationComplex__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationComplexAccess().getConditionsAssignment_2()); }
	(rule__OperationComplex__ConditionsAssignment_2)*
	{ after(grammarAccess.getOperationComplexAccess().getConditionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationComplex__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationComplex__Group_1__0__Impl
	rule__OperationComplex__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationComplex__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationComplexAccess().getBeginKeyword_1_0()); }
	'begin'
	{ after(grammarAccess.getOperationComplexAccess().getBeginKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationComplex__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationComplex__Group_1__1__Impl
	rule__OperationComplex__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationComplex__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationComplexAccess().getOperationbodyAssignment_1_1()); }
	(rule__OperationComplex__OperationbodyAssignment_1_1)?
	{ after(grammarAccess.getOperationComplexAccess().getOperationbodyAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationComplex__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationComplex__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationComplex__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationComplexAccess().getEndKeyword_1_2()); }
	'end'
	{ after(grammarAccess.getOperationComplexAccess().getEndKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationDeclaration__Group__0__Impl
	rule__OperationDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationDeclarationAccess().getNameAssignment_0()); }
	(rule__OperationDeclaration__NameAssignment_0)
	{ after(grammarAccess.getOperationDeclarationAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationDeclaration__Group__1__Impl
	rule__OperationDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationDeclarationAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getOperationDeclarationAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationDeclaration__Group__2__Impl
	rule__OperationDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationDeclarationAccess().getParametersAssignment_2()); }
	(rule__OperationDeclaration__ParametersAssignment_2)*
	{ after(grammarAccess.getOperationDeclarationAccess().getParametersAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationDeclaration__Group__3__Impl
	rule__OperationDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationDeclarationAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getOperationDeclarationAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationDeclarationAccess().getGroup_4()); }
	(rule__OperationDeclaration__Group_4__0)?
	{ after(grammarAccess.getOperationDeclarationAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationDeclaration__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationDeclaration__Group_4__0__Impl
	rule__OperationDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationDeclaration__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationDeclarationAccess().getColonKeyword_4_0()); }
	':'
	{ after(grammarAccess.getOperationDeclarationAccess().getColonKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationDeclaration__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationDeclaration__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationDeclarationAccess().getReturnTypeAssignment_4_1()); }
	(rule__OperationDeclaration__ReturnTypeAssignment_4_1)
	{ after(grammarAccess.getOperationDeclarationAccess().getReturnTypeAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getNameAssignment_0()); }
	(rule__Parameter__NameAssignment_0)
	{ after(grammarAccess.getParameterAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getParameterAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__2__Impl
	rule__Parameter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getTypeAssignment_2()); }
	(rule__Parameter__TypeAssignment_2)
	{ after(grammarAccess.getParameterAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getCommaKeyword_3()); }
	(',')?
	{ after(grammarAccess.getParameterAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintsBase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintsBase__Group__0__Impl
	rule__ConstraintsBase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintsBase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintsBaseAccess().getConstraintsKeyword_0()); }
	'constraints'
	{ after(grammarAccess.getConstraintsBaseAccess().getConstraintsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintsBase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintsBase__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintsBase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintsBaseAccess().getInvariantsAssignment_1()); }
	(rule__ConstraintsBase__InvariantsAssignment_1)*
	{ after(grammarAccess.getConstraintsBaseAccess().getInvariantsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstrainsGeneral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstrainsGeneral__Group__0__Impl
	rule__ConstrainsGeneral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainsGeneral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstrainsGeneralAccess().getConstraintsKeyword_0()); }
	'constraints'
	{ after(grammarAccess.getConstrainsGeneralAccess().getConstraintsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainsGeneral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstrainsGeneral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainsGeneral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstrainsGeneralAccess().getContextsAssignment_1()); }
	(rule__ConstrainsGeneral__ContextsAssignment_1)*
	{ after(grammarAccess.getConstrainsGeneralAccess().getContextsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InvariantContext__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvariantContext__Group__0__Impl
	rule__InvariantContext__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantContext__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvariantContextAccess().getContextKeyword_0()); }
	'context'
	{ after(grammarAccess.getInvariantContextAccess().getContextKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantContext__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvariantContext__Group__1__Impl
	rule__InvariantContext__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantContext__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvariantContextAccess().getGroup_1()); }
	(rule__InvariantContext__Group_1__0)?
	{ after(grammarAccess.getInvariantContextAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantContext__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvariantContext__Group__2__Impl
	rule__InvariantContext__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantContext__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvariantContextAccess().getClassnameAssignment_2()); }
	(rule__InvariantContext__ClassnameAssignment_2)
	{ after(grammarAccess.getInvariantContextAccess().getClassnameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantContext__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvariantContext__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantContext__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvariantContextAccess().getInvariantsAssignment_3()); }
	(rule__InvariantContext__InvariantsAssignment_3)*
	{ after(grammarAccess.getInvariantContextAccess().getInvariantsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InvariantContext__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvariantContext__Group_1__0__Impl
	rule__InvariantContext__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantContext__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvariantContextAccess().getVariablenameAssignment_1_0()); }
	(rule__InvariantContext__VariablenameAssignment_1_0)
	{ after(grammarAccess.getInvariantContextAccess().getVariablenameAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantContext__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvariantContext__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantContext__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvariantContextAccess().getColonKeyword_1_1()); }
	':'
	{ after(grammarAccess.getInvariantContextAccess().getColonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InvariantDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvariantDefinition__Group__0__Impl
	rule__InvariantDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvariantDefinitionAccess().getInvKeyword_0()); }
	'inv'
	{ after(grammarAccess.getInvariantDefinitionAccess().getInvKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvariantDefinition__Group__1__Impl
	rule__InvariantDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvariantDefinitionAccess().getNameAssignment_1()); }
	(rule__InvariantDefinition__NameAssignment_1)?
	{ after(grammarAccess.getInvariantDefinitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvariantDefinition__Group__2__Impl
	rule__InvariantDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvariantDefinitionAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getInvariantDefinitionAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvariantDefinition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvariantDefinitionAccess().getOclexpressionAssignment_3()); }
	(rule__InvariantDefinition__OclexpressionAssignment_3)
	{ after(grammarAccess.getInvariantDefinitionAccess().getOclexpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationContext__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationContext__Group__0__Impl
	rule__OperationContext__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContext__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationContextAccess().getContextKeyword_0()); }
	'context'
	{ after(grammarAccess.getOperationContextAccess().getContextKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContext__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationContext__Group__1__Impl
	rule__OperationContext__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContext__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationContextAccess().getClassnameAssignment_1()); }
	(rule__OperationContext__ClassnameAssignment_1)
	{ after(grammarAccess.getOperationContextAccess().getClassnameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContext__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationContext__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContext__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationContextAccess().getConstrainsAssignment_2()); }
	(rule__OperationContext__ConstrainsAssignment_2)
	{ after(grammarAccess.getOperationContextAccess().getConstrainsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationConstraints__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationConstraints__Group__0__Impl
	rule__OperationConstraints__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationConstraints__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationConstraintsAccess().getColonColonKeyword_0()); }
	'::'
	{ after(grammarAccess.getOperationConstraintsAccess().getColonColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationConstraints__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationConstraints__Group__1__Impl
	rule__OperationConstraints__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationConstraints__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationConstraintsAccess().getOperationDeclarationAssignment_1()); }
	(rule__OperationConstraints__OperationDeclarationAssignment_1)
	{ after(grammarAccess.getOperationConstraintsAccess().getOperationDeclarationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationConstraints__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationConstraints__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationConstraints__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getOperationConstraintsAccess().getConditionsAssignment_2()); }
		(rule__OperationConstraints__ConditionsAssignment_2)
		{ after(grammarAccess.getOperationConstraintsAccess().getConditionsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getOperationConstraintsAccess().getConditionsAssignment_2()); }
		(rule__OperationConstraints__ConditionsAssignment_2)*
		{ after(grammarAccess.getOperationConstraintsAccess().getConditionsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Precondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Precondition__Group__0__Impl
	rule__Precondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreconditionAccess().getPreKeyword_0()); }
	'pre'
	{ after(grammarAccess.getPreconditionAccess().getPreKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Precondition__Group__1__Impl
	rule__Precondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreconditionAccess().getNameAssignment_1()); }
	(rule__Precondition__NameAssignment_1)?
	{ after(grammarAccess.getPreconditionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Precondition__Group__2__Impl
	rule__Precondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreconditionAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getPreconditionAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Precondition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreconditionAccess().getOclexpressionAssignment_3()); }
	(rule__Precondition__OclexpressionAssignment_3)
	{ after(grammarAccess.getPreconditionAccess().getOclexpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Postcondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Postcondition__Group__0__Impl
	rule__Postcondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostconditionAccess().getPostKeyword_0()); }
	'post'
	{ after(grammarAccess.getPostconditionAccess().getPostKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Postcondition__Group__1__Impl
	rule__Postcondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostconditionAccess().getNameAssignment_1()); }
	(rule__Postcondition__NameAssignment_1)?
	{ after(grammarAccess.getPostconditionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Postcondition__Group__2__Impl
	rule__Postcondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostconditionAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getPostconditionAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Postcondition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostconditionAccess().getOclexpressionAssignment_3()); }
	(rule__Postcondition__OclexpressionAssignment_3)
	{ after(grammarAccess.getPostconditionAccess().getOclexpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__EnumsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getEnumsEnumParserRuleCall_2_0_0()); }
		ruleEnum
		{ after(grammarAccess.getModelAccess().getEnumsEnumParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__PackagedElementAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getPackagedElementTypeParserRuleCall_2_1_0()); }
		ruleType
		{ after(grammarAccess.getModelAccess().getPackagedElementTypeParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ConstraintsAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getConstraintsConstrainsGeneralParserRuleCall_2_2_0()); }
		ruleConstrainsGeneral
		{ after(grammarAccess.getModelAccess().getConstraintsConstrainsGeneralParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__MinValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicityAccess().getMinValueAlternatives_0_0()); }
		(rule__Multiplicity__MinValueAlternatives_0_0)
		{ after(grammarAccess.getMultiplicityAccess().getMinValueAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__MaxValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicityAccess().getMaxValueAlternatives_1_1_0()); }
		(rule__Multiplicity__MaxValueAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplicityAccess().getMaxValueAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__MinValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicityAccess().getMinValueAlternatives_2_1_0()); }
		(rule__Multiplicity__MinValueAlternatives_2_1_0)
		{ after(grammarAccess.getMultiplicityAccess().getMinValueAlternatives_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicity__MaxValueAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicityAccess().getMaxValueAlternatives_2_2_1_0()); }
		(rule__Multiplicity__MaxValueAlternatives_2_2_1_0)
		{ after(grammarAccess.getMultiplicityAccess().getMaxValueAlternatives_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEnumAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__ElementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumAccess().getElementsEnumElementParserRuleCall_3_0()); }
		ruleEnumElement
		{ after(grammarAccess.getEnumAccess().getElementsEnumElementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__AbstractAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getAbstractAbstractKeyword_0_0()); }
		(
			{ before(grammarAccess.getClassAccess().getAbstractAbstractKeyword_0_0()); }
			'abstract'
			{ after(grammarAccess.getClassAccess().getAbstractAbstractKeyword_0_0()); }
		)
		{ after(grammarAccess.getClassAccess().getAbstractAbstractKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__GeneralizationAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getGeneralizationGeneralizationParserRuleCall_3_1_0()); }
		ruleGeneralization
		{ after(grammarAccess.getClassAccess().getGeneralizationGeneralizationParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__AttributesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getAttributesAttributesBaseParserRuleCall_4_0()); }
		ruleAttributesBase
		{ after(grammarAccess.getClassAccess().getAttributesAttributesBaseParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__OperationsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getOperationsOperationsBaseParserRuleCall_5_0()); }
		ruleOperationsBase
		{ after(grammarAccess.getClassAccess().getOperationsOperationsBaseParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__ConstraintsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getConstraintsConstraintsBaseParserRuleCall_6_0()); }
		ruleConstraintsBase
		{ after(grammarAccess.getClassAccess().getConstraintsConstraintsBaseParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generalization__GeneralAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeneralizationAccess().getGeneralAllClassCrossReference_0_0()); }
		(
			{ before(grammarAccess.getGeneralizationAccess().getGeneralAllClassIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getGeneralizationAccess().getGeneralAllClassIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getGeneralizationAccess().getGeneralAllClassCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypes__DefaultTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypesAccess().getDefaultTypeDefaultTypeParserRuleCall_0_0()); }
		ruleDefaultType
		{ after(grammarAccess.getSimpleTypesAccess().getDefaultTypeDefaultTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypes__ReferendedAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypesAccess().getReferendedAllClassCrossReference_1_0()); }
		(
			{ before(grammarAccess.getSimpleTypesAccess().getReferendedAllClassIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSimpleTypesAccess().getReferendedAllClassIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getSimpleTypesAccess().getReferendedAllClassCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__TypeAssociationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationAccess().getTypeAssociationAlternatives_0_0()); }
		(rule__Association__TypeAssociationAlternatives_0_0)
		{ after(grammarAccess.getAssociationAccess().getTypeAssociationAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAssociationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Association__AssociationEndsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationAccess().getAssociationEndsAssociationEndParserRuleCall_3_0()); }
		ruleAssociationEnd
		{ after(grammarAccess.getAssociationAccess().getAssociationEndsAssociationEndParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationEndAccess().getTypeAllClassCrossReference_0_0()); }
		(
			{ before(grammarAccess.getAssociationEndAccess().getTypeAllClassIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAssociationEndAccess().getTypeAllClassIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getAssociationEndAccess().getTypeAllClassCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__MulAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationEndAccess().getMulMultiplicityParserRuleCall_2_0()); }
		ruleMultiplicity
		{ after(grammarAccess.getAssociationEndAccess().getMulMultiplicityParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__RoleAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationEndAccess().getRoleIDTerminalRuleCall_4_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAssociationEndAccess().getRoleIDTerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationEnd__OrderedAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationEndAccess().getOrderedOrderedKeyword_5_0()); }
		(
			{ before(grammarAccess.getAssociationEndAccess().getOrderedOrderedKeyword_5_0()); }
			'ordered'
			{ after(grammarAccess.getAssociationEndAccess().getOrderedOrderedKeyword_5_0()); }
		)
		{ after(grammarAccess.getAssociationEndAccess().getOrderedOrderedKeyword_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__AbstractAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationClassAccess().getAbstractAbstractKeyword_0_0()); }
		(
			{ before(grammarAccess.getAssociationClassAccess().getAbstractAbstractKeyword_0_0()); }
			'abstract'
			{ after(grammarAccess.getAssociationClassAccess().getAbstractAbstractKeyword_0_0()); }
		)
		{ after(grammarAccess.getAssociationClassAccess().getAbstractAbstractKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationClassAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getAssociationClassAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__GeneralizationAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationClassAccess().getGeneralizationGeneralizationParserRuleCall_3_1_0()); }
		ruleGeneralization
		{ after(grammarAccess.getAssociationClassAccess().getGeneralizationGeneralizationParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__AssociationEndsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationClassAccess().getAssociationEndsAssociationEndParserRuleCall_5_0()); }
		ruleAssociationEnd
		{ after(grammarAccess.getAssociationClassAccess().getAssociationEndsAssociationEndParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__AttributesAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationClassAccess().getAttributesAttributesBaseParserRuleCall_6_0()); }
		ruleAttributesBase
		{ after(grammarAccess.getAssociationClassAccess().getAttributesAttributesBaseParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__OperationsAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationClassAccess().getOperationsOperationsBaseParserRuleCall_7_0()); }
		ruleOperationsBase
		{ after(grammarAccess.getAssociationClassAccess().getOperationsOperationsBaseParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssociationClass__ConstraintsAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssociationClassAccess().getConstraintsConstraintsBaseParserRuleCall_8_0()); }
		ruleConstraintsBase
		{ after(grammarAccess.getAssociationClassAccess().getConstraintsConstraintsBaseParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributesBase__AttributesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributesBaseAccess().getAttributesAttributeParserRuleCall_1_0()); }
		ruleAttribute
		{ after(grammarAccess.getAttributesBaseAccess().getAttributesAttributeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getTypeSimpleTypesParserRuleCall_2_0()); }
		ruleSimpleTypes
		{ after(grammarAccess.getAttributeAccess().getTypeSimpleTypesParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationsBase__OperationsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationsBaseAccess().getOperationsOperationTypeParserRuleCall_1_0()); }
		ruleOperationType
		{ after(grammarAccess.getOperationsBaseAccess().getOperationsOperationTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationQuery__OperationDeclarationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationQueryAccess().getOperationDeclarationOperationDeclarationParserRuleCall_0_0()); }
		ruleOperationDeclaration
		{ after(grammarAccess.getOperationQueryAccess().getOperationDeclarationOperationDeclarationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationQuery__OperationbodyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationQueryAccess().getOperationbodyOCLExpressionParserRuleCall_2_0()); }
		ruleOCLExpression
		{ after(grammarAccess.getOperationQueryAccess().getOperationbodyOCLExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationQuery__ConditionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationQueryAccess().getConditionsConditionTypeParserRuleCall_3_0()); }
		ruleConditionType
		{ after(grammarAccess.getOperationQueryAccess().getConditionsConditionTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationComplex__OperationDeclarationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationComplexAccess().getOperationDeclarationOperationDeclarationParserRuleCall_0_0()); }
		ruleOperationDeclaration
		{ after(grammarAccess.getOperationComplexAccess().getOperationDeclarationOperationDeclarationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationComplex__OperationbodyAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationComplexAccess().getOperationbodyOCLExpressionParserRuleCall_1_1_0()); }
		ruleOCLExpression
		{ after(grammarAccess.getOperationComplexAccess().getOperationbodyOCLExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationComplex__ConditionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationComplexAccess().getConditionsConditionTypeParserRuleCall_2_0()); }
		ruleConditionType
		{ after(grammarAccess.getOperationComplexAccess().getConditionsConditionTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationDeclaration__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getOperationDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationDeclaration__ParametersAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationDeclarationAccess().getParametersParameterParserRuleCall_2_0()); }
		ruleParameter
		{ after(grammarAccess.getOperationDeclarationAccess().getParametersParameterParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationDeclaration__ReturnTypeAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationDeclarationAccess().getReturnTypeSimpleTypesParserRuleCall_4_1_0()); }
		ruleSimpleTypes
		{ after(grammarAccess.getOperationDeclarationAccess().getReturnTypeSimpleTypesParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getTypeSimpleTypesParserRuleCall_2_0()); }
		ruleSimpleTypes
		{ after(grammarAccess.getParameterAccess().getTypeSimpleTypesParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintsBase__InvariantsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintsBaseAccess().getInvariantsInvariantDefinitionParserRuleCall_1_0()); }
		ruleInvariantDefinition
		{ after(grammarAccess.getConstraintsBaseAccess().getInvariantsInvariantDefinitionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainsGeneral__ContextsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstrainsGeneralAccess().getContextsContextsTypeParserRuleCall_1_0()); }
		ruleContextsType
		{ after(grammarAccess.getConstrainsGeneralAccess().getContextsContextsTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantContext__VariablenameAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvariantContextAccess().getVariablenameIDTerminalRuleCall_1_0_0()); }
		RULE_ID
		{ after(grammarAccess.getInvariantContextAccess().getVariablenameIDTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantContext__ClassnameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvariantContextAccess().getClassnameAllClassCrossReference_2_0()); }
		(
			{ before(grammarAccess.getInvariantContextAccess().getClassnameAllClassIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getInvariantContextAccess().getClassnameAllClassIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getInvariantContextAccess().getClassnameAllClassCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantContext__InvariantsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvariantContextAccess().getInvariantsInvariantDefinitionParserRuleCall_3_0()); }
		ruleInvariantDefinition
		{ after(grammarAccess.getInvariantContextAccess().getInvariantsInvariantDefinitionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantDefinition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvariantDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getInvariantDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantDefinition__OclexpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvariantDefinitionAccess().getOclexpressionOCLExpressionParserRuleCall_3_0()); }
		ruleOCLExpression
		{ after(grammarAccess.getInvariantDefinitionAccess().getOclexpressionOCLExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContext__ClassnameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationContextAccess().getClassnameAllClassCrossReference_1_0()); }
		(
			{ before(grammarAccess.getOperationContextAccess().getClassnameAllClassIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getOperationContextAccess().getClassnameAllClassIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getOperationContextAccess().getClassnameAllClassCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContext__ConstrainsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationContextAccess().getConstrainsOperationConstraintsParserRuleCall_2_0()); }
		ruleOperationConstraints
		{ after(grammarAccess.getOperationContextAccess().getConstrainsOperationConstraintsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationConstraints__OperationDeclarationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationConstraintsAccess().getOperationDeclarationOperationDeclarationParserRuleCall_1_0()); }
		ruleOperationDeclaration
		{ after(grammarAccess.getOperationConstraintsAccess().getOperationDeclarationOperationDeclarationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationConstraints__ConditionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationConstraintsAccess().getConditionsConditionTypeParserRuleCall_2_0()); }
		ruleConditionType
		{ after(grammarAccess.getOperationConstraintsAccess().getConditionsConditionTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreconditionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPreconditionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Precondition__OclexpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreconditionAccess().getOclexpressionOCLExpressionParserRuleCall_3_0()); }
		ruleOCLExpression
		{ after(grammarAccess.getPreconditionAccess().getOclexpressionOCLExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPostconditionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPostconditionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Postcondition__OclexpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPostconditionAccess().getOclexpressionOCLExpressionParserRuleCall_3_0()); }
		ruleOCLExpression
		{ after(grammarAccess.getPostconditionAccess().getOclexpressionOCLExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ML_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
