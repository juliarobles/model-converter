/*
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import modelConverter.use_language.ide.contentassist.antlr.internal.InternalUSEParser;
import modelConverter.use_language.services.USEGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class USEParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(USEGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, USEGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMultiplicityAccess().getAlternatives_0(), "rule__Multiplicity__Alternatives_0");
			builder.put(grammarAccess.getMultiplicityAccess().getAlternatives_1_1(), "rule__Multiplicity__Alternatives_1_1");
			builder.put(grammarAccess.getMultiplicityAccess().getAlternatives_2_1(), "rule__Multiplicity__Alternatives_2_1");
			builder.put(grammarAccess.getMultiplicityAccess().getAlternatives_2_2_1(), "rule__Multiplicity__Alternatives_2_2_1");
			builder.put(grammarAccess.getDefaultTypeAccess().getAlternatives(), "rule__DefaultType__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getAssociationTypeAccess().getAlternatives(), "rule__AssociationType__Alternatives");
			builder.put(grammarAccess.getAllClassAccess().getAlternatives(), "rule__AllClass__Alternatives");
			builder.put(grammarAccess.getSimpleTypesAccess().getAlternatives(), "rule__SimpleTypes__Alternatives");
			builder.put(grammarAccess.getOperationTypeAccess().getAlternatives(), "rule__OperationType__Alternatives");
			builder.put(grammarAccess.getContextsTypeAccess().getAlternatives(), "rule__ContextsType__Alternatives");
			builder.put(grammarAccess.getConditionTypeAccess().getAlternatives(), "rule__ConditionType__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getMultiplicityAccess().getGroup(), "rule__Multiplicity__Group__0");
			builder.put(grammarAccess.getMultiplicityAccess().getGroup_1(), "rule__Multiplicity__Group_1__0");
			builder.put(grammarAccess.getMultiplicityAccess().getGroup_2(), "rule__Multiplicity__Group_2__0");
			builder.put(grammarAccess.getMultiplicityAccess().getGroup_2_2(), "rule__Multiplicity__Group_2_2__0");
			builder.put(grammarAccess.getEnumerationAccess().getGroup(), "rule__Enumeration__Group__0");
			builder.put(grammarAccess.getOwnedLiteralAccess().getGroup(), "rule__OwnedLiteral__Group__0");
			builder.put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
			builder.put(grammarAccess.getClassAccess().getGroup_3(), "rule__Class__Group_3__0");
			builder.put(grammarAccess.getClassAccess().getGroup_4(), "rule__Class__Group_4__0");
			builder.put(grammarAccess.getAssociationClassAccess().getGroup(), "rule__AssociationClass__Group__0");
			builder.put(grammarAccess.getAssociationClassAccess().getGroup_3(), "rule__AssociationClass__Group_3__0");
			builder.put(grammarAccess.getAssociationClassAccess().getGroup_6(), "rule__AssociationClass__Group_6__0");
			builder.put(grammarAccess.getAssociationClassAccess().getGroup_7(), "rule__AssociationClass__Group_7__0");
			builder.put(grammarAccess.getGeneralizationAccess().getGroup(), "rule__Generalization__Group__0");
			builder.put(grammarAccess.getAssociationAccess().getGroup(), "rule__Association__Group__0");
			builder.put(grammarAccess.getMemberEndAccess().getGroup(), "rule__MemberEnd__Group__0");
			builder.put(grammarAccess.getMemberEndAccess().getGroup_4(), "rule__MemberEnd__Group_4__0");
			builder.put(grammarAccess.getAssociationBasicAccess().getGroup(), "rule__AssociationBasic__Group__0");
			builder.put(grammarAccess.getAggregationAccess().getGroup(), "rule__Aggregation__Group__0");
			builder.put(grammarAccess.getCompositionAccess().getGroup(), "rule__Composition__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getOperationBasicAccess().getGroup(), "rule__OperationBasic__Group__0");
			builder.put(grammarAccess.getOperationBasicAccess().getGroup_1(), "rule__OperationBasic__Group_1__0");
			builder.put(grammarAccess.getOperationComplexAccess().getGroup(), "rule__OperationComplex__Group__0");
			builder.put(grammarAccess.getOperationDeclarationAccess().getGroup(), "rule__OperationDeclaration__Group__0");
			builder.put(grammarAccess.getOperationDeclarationAccess().getGroup_4(), "rule__OperationDeclaration__Group_4__0");
			builder.put(grammarAccess.getOwnedParameterAccess().getGroup(), "rule__OwnedParameter__Group__0");
			builder.put(grammarAccess.getConstraintsBaseAccess().getGroup(), "rule__ConstraintsBase__Group__0");
			builder.put(grammarAccess.getConstrainsGeneralAccess().getGroup(), "rule__ConstrainsGeneral__Group__0");
			builder.put(grammarAccess.getInvariantContextAccess().getGroup(), "rule__InvariantContext__Group__0");
			builder.put(grammarAccess.getInvariantContextAccess().getGroup_1(), "rule__InvariantContext__Group_1__0");
			builder.put(grammarAccess.getInvariantDefinitionAccess().getGroup(), "rule__InvariantDefinition__Group__0");
			builder.put(grammarAccess.getOperationContextAccess().getGroup(), "rule__OperationContext__Group__0");
			builder.put(grammarAccess.getOperationConstraintsAccess().getGroup(), "rule__OperationConstraints__Group__0");
			builder.put(grammarAccess.getPreconditionAccess().getGroup(), "rule__Precondition__Group__0");
			builder.put(grammarAccess.getPostconditionAccess().getGroup(), "rule__Postcondition__Group__0");
			builder.put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
			builder.put(grammarAccess.getModelAccess().getPackagedElementAssignment_2(), "rule__Model__PackagedElementAssignment_2");
			builder.put(grammarAccess.getModelAccess().getPackagedElementAssignment_3(), "rule__Model__PackagedElementAssignment_3");
			builder.put(grammarAccess.getModelAccess().getConstraintsAssignment_4(), "rule__Model__ConstraintsAssignment_4");
			builder.put(grammarAccess.getEnumerationAccess().getNameAssignment_1(), "rule__Enumeration__NameAssignment_1");
			builder.put(grammarAccess.getEnumerationAccess().getOwnedLiteralAssignment_3(), "rule__Enumeration__OwnedLiteralAssignment_3");
			builder.put(grammarAccess.getOwnedLiteralAccess().getNameAssignment_0(), "rule__OwnedLiteral__NameAssignment_0");
			builder.put(grammarAccess.getClassAccess().getAbstractAssignment_0(), "rule__Class__AbstractAssignment_0");
			builder.put(grammarAccess.getClassAccess().getNameAssignment_2(), "rule__Class__NameAssignment_2");
			builder.put(grammarAccess.getClassAccess().getGeneralizationAssignment_3_1(), "rule__Class__GeneralizationAssignment_3_1");
			builder.put(grammarAccess.getClassAccess().getOwnedAttributeAssignment_4_1(), "rule__Class__OwnedAttributeAssignment_4_1");
			builder.put(grammarAccess.getClassAccess().getOwnedOperationAssignment_5(), "rule__Class__OwnedOperationAssignment_5");
			builder.put(grammarAccess.getClassAccess().getConstraintsAssignment_6(), "rule__Class__ConstraintsAssignment_6");
			builder.put(grammarAccess.getAssociationClassAccess().getAbstractAssignment_0(), "rule__AssociationClass__AbstractAssignment_0");
			builder.put(grammarAccess.getAssociationClassAccess().getNameAssignment_2(), "rule__AssociationClass__NameAssignment_2");
			builder.put(grammarAccess.getAssociationClassAccess().getGeneralizationAssignment_3_1(), "rule__AssociationClass__GeneralizationAssignment_3_1");
			builder.put(grammarAccess.getAssociationClassAccess().getMemberEndsAssignment_5(), "rule__AssociationClass__MemberEndsAssignment_5");
			builder.put(grammarAccess.getAssociationClassAccess().getOwnedAttributeAssignment_6_1(), "rule__AssociationClass__OwnedAttributeAssignment_6_1");
			builder.put(grammarAccess.getAssociationClassAccess().getOperationsAssignment_7_1(), "rule__AssociationClass__OperationsAssignment_7_1");
			builder.put(grammarAccess.getAssociationClassAccess().getConstraintsAssignment_8(), "rule__AssociationClass__ConstraintsAssignment_8");
			builder.put(grammarAccess.getGeneralizationAccess().getGeneralAssignment_0(), "rule__Generalization__GeneralAssignment_0");
			builder.put(grammarAccess.getSimpleTypesAccess().getReferendedAssignment_1(), "rule__SimpleTypes__ReferendedAssignment_1");
			builder.put(grammarAccess.getAssociationAccess().getNameAssignment_0(), "rule__Association__NameAssignment_0");
			builder.put(grammarAccess.getAssociationAccess().getMemberEndsAssignment_2(), "rule__Association__MemberEndsAssignment_2");
			builder.put(grammarAccess.getMemberEndAccess().getTypeAssignment_0(), "rule__MemberEnd__TypeAssignment_0");
			builder.put(grammarAccess.getMemberEndAccess().getMulAssignment_2(), "rule__MemberEnd__MulAssignment_2");
			builder.put(grammarAccess.getMemberEndAccess().getRoleAssignment_4_1(), "rule__MemberEnd__RoleAssignment_4_1");
			builder.put(grammarAccess.getMemberEndAccess().getOrderedAssignment_5(), "rule__MemberEnd__OrderedAssignment_5");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
			builder.put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
			builder.put(grammarAccess.getOperationBasicAccess().getOclexpressionAssignment_1_1(), "rule__OperationBasic__OclexpressionAssignment_1_1");
			builder.put(grammarAccess.getOperationBasicAccess().getConditionsAssignment_2(), "rule__OperationBasic__ConditionsAssignment_2");
			builder.put(grammarAccess.getOperationComplexAccess().getOperationbodyAssignment_2(), "rule__OperationComplex__OperationbodyAssignment_2");
			builder.put(grammarAccess.getOperationComplexAccess().getConditionsAssignment_4(), "rule__OperationComplex__ConditionsAssignment_4");
			builder.put(grammarAccess.getOperationDeclarationAccess().getNameAssignment_0(), "rule__OperationDeclaration__NameAssignment_0");
			builder.put(grammarAccess.getOperationDeclarationAccess().getOwnedParameterAssignment_2(), "rule__OperationDeclaration__OwnedParameterAssignment_2");
			builder.put(grammarAccess.getOperationDeclarationAccess().getReturnTypeAssignment_4_1(), "rule__OperationDeclaration__ReturnTypeAssignment_4_1");
			builder.put(grammarAccess.getConstraintsBaseAccess().getInvariantsAssignment_1(), "rule__ConstraintsBase__InvariantsAssignment_1");
			builder.put(grammarAccess.getConstrainsGeneralAccess().getContextsAssignment_1(), "rule__ConstrainsGeneral__ContextsAssignment_1");
			builder.put(grammarAccess.getInvariantContextAccess().getVariablenameAssignment_1_0(), "rule__InvariantContext__VariablenameAssignment_1_0");
			builder.put(grammarAccess.getInvariantContextAccess().getClassnameAssignment_2(), "rule__InvariantContext__ClassnameAssignment_2");
			builder.put(grammarAccess.getInvariantContextAccess().getInvariantsAssignment_3(), "rule__InvariantContext__InvariantsAssignment_3");
			builder.put(grammarAccess.getInvariantDefinitionAccess().getNameAssignment_1(), "rule__InvariantDefinition__NameAssignment_1");
			builder.put(grammarAccess.getInvariantDefinitionAccess().getOclExpressionAssignment_3(), "rule__InvariantDefinition__OclExpressionAssignment_3");
			builder.put(grammarAccess.getOperationContextAccess().getClassnameAssignment_1(), "rule__OperationContext__ClassnameAssignment_1");
			builder.put(grammarAccess.getOperationContextAccess().getConstrainsAssignment_2(), "rule__OperationContext__ConstrainsAssignment_2");
			builder.put(grammarAccess.getOperationConstraintsAccess().getConditionsAssignment_2(), "rule__OperationConstraints__ConditionsAssignment_2");
			builder.put(grammarAccess.getPreconditionAccess().getNameAssignment_1(), "rule__Precondition__NameAssignment_1");
			builder.put(grammarAccess.getPreconditionAccess().getOclexpressionAssignment_3(), "rule__Precondition__OclexpressionAssignment_3");
			builder.put(grammarAccess.getPostconditionAccess().getNameAssignment_1(), "rule__Postcondition__NameAssignment_1");
			builder.put(grammarAccess.getPostconditionAccess().getOclexpressionAssignment_3(), "rule__Postcondition__OclexpressionAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private USEGrammarAccess grammarAccess;

	@Override
	protected InternalUSEParser createParser() {
		InternalUSEParser result = new InternalUSEParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public USEGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(USEGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
