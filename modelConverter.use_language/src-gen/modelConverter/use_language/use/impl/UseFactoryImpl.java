/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.use.impl;

import modelConverter.use_language.use.AllClass;
import modelConverter.use_language.use.Association;
import modelConverter.use_language.use.AssociationClass;
import modelConverter.use_language.use.AssociationEnd;
import modelConverter.use_language.use.Attribute;
import modelConverter.use_language.use.AttributesBase;
import modelConverter.use_language.use.ConditionType;
import modelConverter.use_language.use.ConstrainsGeneral;
import modelConverter.use_language.use.ConstraintsBase;
import modelConverter.use_language.use.ContextsType;
import modelConverter.use_language.use.Generalization;
import modelConverter.use_language.use.InvariantContext;
import modelConverter.use_language.use.InvariantDefinition;
import modelConverter.use_language.use.Model;
import modelConverter.use_language.use.Multiplicity;
import modelConverter.use_language.use.OperationComplex;
import modelConverter.use_language.use.OperationConstraints;
import modelConverter.use_language.use.OperationContext;
import modelConverter.use_language.use.OperationDeclaration;
import modelConverter.use_language.use.OperationQuery;
import modelConverter.use_language.use.OperationType;
import modelConverter.use_language.use.OperationsBase;
import modelConverter.use_language.use.Parameter;
import modelConverter.use_language.use.Postcondition;
import modelConverter.use_language.use.Precondition;
import modelConverter.use_language.use.SimpleTypes;
import modelConverter.use_language.use.Type;
import modelConverter.use_language.use.UseFactory;
import modelConverter.use_language.use.UsePackage;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class UseFactoryImpl extends EFactoryImpl implements UseFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static UseFactory init()
  {
    try
    {
      UseFactory theUseFactory = (UseFactory)EPackage.Registry.INSTANCE.getEFactory(UsePackage.eNS_URI);
      if (theUseFactory != null)
      {
        return theUseFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new UseFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UseFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case UsePackage.MODEL: return createModel();
      case UsePackage.MULTIPLICITY: return createMultiplicity();
      case UsePackage.TYPE: return createType();
      case UsePackage.ALL_CLASS: return createAllClass();
      case UsePackage.ENUM: return createEnum();
      case UsePackage.CLASS: return createClass();
      case UsePackage.GENERALIZATION: return createGeneralization();
      case UsePackage.SIMPLE_TYPES: return createSimpleTypes();
      case UsePackage.ASSOCIATION: return createAssociation();
      case UsePackage.ASSOCIATION_END: return createAssociationEnd();
      case UsePackage.ASSOCIATION_CLASS: return createAssociationClass();
      case UsePackage.ATTRIBUTES_BASE: return createAttributesBase();
      case UsePackage.ATTRIBUTE: return createAttribute();
      case UsePackage.OPERATIONS_BASE: return createOperationsBase();
      case UsePackage.OPERATION_TYPE: return createOperationType();
      case UsePackage.OPERATION_QUERY: return createOperationQuery();
      case UsePackage.OPERATION_COMPLEX: return createOperationComplex();
      case UsePackage.OPERATION_DECLARATION: return createOperationDeclaration();
      case UsePackage.PARAMETER: return createParameter();
      case UsePackage.CONSTRAINTS_BASE: return createConstraintsBase();
      case UsePackage.CONSTRAINS_GENERAL: return createConstrainsGeneral();
      case UsePackage.CONTEXTS_TYPE: return createContextsType();
      case UsePackage.INVARIANT_CONTEXT: return createInvariantContext();
      case UsePackage.INVARIANT_DEFINITION: return createInvariantDefinition();
      case UsePackage.OPERATION_CONTEXT: return createOperationContext();
      case UsePackage.OPERATION_CONSTRAINTS: return createOperationConstraints();
      case UsePackage.CONDITION_TYPE: return createConditionType();
      case UsePackage.PRECONDITION: return createPrecondition();
      case UsePackage.POSTCONDITION: return createPostcondition();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiplicity createMultiplicity()
  {
    MultiplicityImpl multiplicity = new MultiplicityImpl();
    return multiplicity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AllClass createAllClass()
  {
    AllClassImpl allClass = new AllClassImpl();
    return allClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public modelConverter.use_language.use.Enum createEnum()
  {
    EnumImpl enum_ = new EnumImpl();
    return enum_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public modelConverter.use_language.use.Class createClass()
  {
    ClassImpl class_ = new ClassImpl();
    return class_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Generalization createGeneralization()
  {
    GeneralizationImpl generalization = new GeneralizationImpl();
    return generalization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleTypes createSimpleTypes()
  {
    SimpleTypesImpl simpleTypes = new SimpleTypesImpl();
    return simpleTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Association createAssociation()
  {
    AssociationImpl association = new AssociationImpl();
    return association;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssociationEnd createAssociationEnd()
  {
    AssociationEndImpl associationEnd = new AssociationEndImpl();
    return associationEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssociationClass createAssociationClass()
  {
    AssociationClassImpl associationClass = new AssociationClassImpl();
    return associationClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributesBase createAttributesBase()
  {
    AttributesBaseImpl attributesBase = new AttributesBaseImpl();
    return attributesBase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationsBase createOperationsBase()
  {
    OperationsBaseImpl operationsBase = new OperationsBaseImpl();
    return operationsBase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationType createOperationType()
  {
    OperationTypeImpl operationType = new OperationTypeImpl();
    return operationType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationQuery createOperationQuery()
  {
    OperationQueryImpl operationQuery = new OperationQueryImpl();
    return operationQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationComplex createOperationComplex()
  {
    OperationComplexImpl operationComplex = new OperationComplexImpl();
    return operationComplex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationDeclaration createOperationDeclaration()
  {
    OperationDeclarationImpl operationDeclaration = new OperationDeclarationImpl();
    return operationDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstraintsBase createConstraintsBase()
  {
    ConstraintsBaseImpl constraintsBase = new ConstraintsBaseImpl();
    return constraintsBase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstrainsGeneral createConstrainsGeneral()
  {
    ConstrainsGeneralImpl constrainsGeneral = new ConstrainsGeneralImpl();
    return constrainsGeneral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextsType createContextsType()
  {
    ContextsTypeImpl contextsType = new ContextsTypeImpl();
    return contextsType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InvariantContext createInvariantContext()
  {
    InvariantContextImpl invariantContext = new InvariantContextImpl();
    return invariantContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InvariantDefinition createInvariantDefinition()
  {
    InvariantDefinitionImpl invariantDefinition = new InvariantDefinitionImpl();
    return invariantDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationContext createOperationContext()
  {
    OperationContextImpl operationContext = new OperationContextImpl();
    return operationContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationConstraints createOperationConstraints()
  {
    OperationConstraintsImpl operationConstraints = new OperationConstraintsImpl();
    return operationConstraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionType createConditionType()
  {
    ConditionTypeImpl conditionType = new ConditionTypeImpl();
    return conditionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Precondition createPrecondition()
  {
    PreconditionImpl precondition = new PreconditionImpl();
    return precondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Postcondition createPostcondition()
  {
    PostconditionImpl postcondition = new PostconditionImpl();
    return postcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UsePackage getUsePackage()
  {
    return (UsePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static UsePackage getPackage()
  {
    return UsePackage.eINSTANCE;
  }

} //UseFactoryImpl
