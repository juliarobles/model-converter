/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.uml.impl;

import java.util.Collection;

import modelConverter.use_language.uml.ConditionType;
import modelConverter.use_language.uml.OperationDeclaration;
import modelConverter.use_language.uml.OwnedParameter;
import modelConverter.use_language.uml.SimpleTypes;
import modelConverter.use_language.uml.UmlPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Operation Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link modelConverter.use_language.uml.impl.OperationDeclarationImpl#getOclexpression <em>Oclexpression</em>}</li>
 *   <li>{@link modelConverter.use_language.uml.impl.OperationDeclarationImpl#getConditions <em>Conditions</em>}</li>
 *   <li>{@link modelConverter.use_language.uml.impl.OperationDeclarationImpl#getOperationbody <em>Operationbody</em>}</li>
 *   <li>{@link modelConverter.use_language.uml.impl.OperationDeclarationImpl#getName <em>Name</em>}</li>
 *   <li>{@link modelConverter.use_language.uml.impl.OperationDeclarationImpl#getOwnedParameter <em>Owned Parameter</em>}</li>
 *   <li>{@link modelConverter.use_language.uml.impl.OperationDeclarationImpl#getReturnType <em>Return Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OperationDeclarationImpl extends OperationBasicImpl implements OperationDeclaration
{
  /**
   * The default value of the '{@link #getOclexpression() <em>Oclexpression</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOclexpression()
   * @generated
   * @ordered
   */
  protected static final String OCLEXPRESSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOclexpression() <em>Oclexpression</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOclexpression()
   * @generated
   * @ordered
   */
  protected String oclexpression = OCLEXPRESSION_EDEFAULT;

  /**
   * The cached value of the '{@link #getConditions() <em>Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditions()
   * @generated
   * @ordered
   */
  protected EList<ConditionType> conditions;

  /**
   * The default value of the '{@link #getOperationbody() <em>Operationbody</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperationbody()
   * @generated
   * @ordered
   */
  protected static final String OPERATIONBODY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOperationbody() <em>Operationbody</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperationbody()
   * @generated
   * @ordered
   */
  protected String operationbody = OPERATIONBODY_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getOwnedParameter() <em>Owned Parameter</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedParameter()
   * @generated
   * @ordered
   */
  protected EList<OwnedParameter> ownedParameter;

  /**
   * The cached value of the '{@link #getReturnType() <em>Return Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReturnType()
   * @generated
   * @ordered
   */
  protected SimpleTypes returnType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OperationDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UmlPackage.Literals.OPERATION_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOclexpression()
  {
    return oclexpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOclexpression(String newOclexpression)
  {
    String oldOclexpression = oclexpression;
    oclexpression = newOclexpression;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UmlPackage.OPERATION_DECLARATION__OCLEXPRESSION, oldOclexpression, oclexpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConditionType> getConditions()
  {
    if (conditions == null)
    {
      conditions = new EObjectContainmentEList<ConditionType>(ConditionType.class, this, UmlPackage.OPERATION_DECLARATION__CONDITIONS);
    }
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOperationbody()
  {
    return operationbody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperationbody(String newOperationbody)
  {
    String oldOperationbody = operationbody;
    operationbody = newOperationbody;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UmlPackage.OPERATION_DECLARATION__OPERATIONBODY, oldOperationbody, operationbody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UmlPackage.OPERATION_DECLARATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<OwnedParameter> getOwnedParameter()
  {
    if (ownedParameter == null)
    {
      ownedParameter = new EObjectContainmentEList<OwnedParameter>(OwnedParameter.class, this, UmlPackage.OPERATION_DECLARATION__OWNED_PARAMETER);
    }
    return ownedParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleTypes getReturnType()
  {
    return returnType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReturnType(SimpleTypes newReturnType, NotificationChain msgs)
  {
    SimpleTypes oldReturnType = returnType;
    returnType = newReturnType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UmlPackage.OPERATION_DECLARATION__RETURN_TYPE, oldReturnType, newReturnType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReturnType(SimpleTypes newReturnType)
  {
    if (newReturnType != returnType)
    {
      NotificationChain msgs = null;
      if (returnType != null)
        msgs = ((InternalEObject)returnType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UmlPackage.OPERATION_DECLARATION__RETURN_TYPE, null, msgs);
      if (newReturnType != null)
        msgs = ((InternalEObject)newReturnType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UmlPackage.OPERATION_DECLARATION__RETURN_TYPE, null, msgs);
      msgs = basicSetReturnType(newReturnType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UmlPackage.OPERATION_DECLARATION__RETURN_TYPE, newReturnType, newReturnType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UmlPackage.OPERATION_DECLARATION__CONDITIONS:
        return ((InternalEList<?>)getConditions()).basicRemove(otherEnd, msgs);
      case UmlPackage.OPERATION_DECLARATION__OWNED_PARAMETER:
        return ((InternalEList<?>)getOwnedParameter()).basicRemove(otherEnd, msgs);
      case UmlPackage.OPERATION_DECLARATION__RETURN_TYPE:
        return basicSetReturnType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UmlPackage.OPERATION_DECLARATION__OCLEXPRESSION:
        return getOclexpression();
      case UmlPackage.OPERATION_DECLARATION__CONDITIONS:
        return getConditions();
      case UmlPackage.OPERATION_DECLARATION__OPERATIONBODY:
        return getOperationbody();
      case UmlPackage.OPERATION_DECLARATION__NAME:
        return getName();
      case UmlPackage.OPERATION_DECLARATION__OWNED_PARAMETER:
        return getOwnedParameter();
      case UmlPackage.OPERATION_DECLARATION__RETURN_TYPE:
        return getReturnType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UmlPackage.OPERATION_DECLARATION__OCLEXPRESSION:
        setOclexpression((String)newValue);
        return;
      case UmlPackage.OPERATION_DECLARATION__CONDITIONS:
        getConditions().clear();
        getConditions().addAll((Collection<? extends ConditionType>)newValue);
        return;
      case UmlPackage.OPERATION_DECLARATION__OPERATIONBODY:
        setOperationbody((String)newValue);
        return;
      case UmlPackage.OPERATION_DECLARATION__NAME:
        setName((String)newValue);
        return;
      case UmlPackage.OPERATION_DECLARATION__OWNED_PARAMETER:
        getOwnedParameter().clear();
        getOwnedParameter().addAll((Collection<? extends OwnedParameter>)newValue);
        return;
      case UmlPackage.OPERATION_DECLARATION__RETURN_TYPE:
        setReturnType((SimpleTypes)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UmlPackage.OPERATION_DECLARATION__OCLEXPRESSION:
        setOclexpression(OCLEXPRESSION_EDEFAULT);
        return;
      case UmlPackage.OPERATION_DECLARATION__CONDITIONS:
        getConditions().clear();
        return;
      case UmlPackage.OPERATION_DECLARATION__OPERATIONBODY:
        setOperationbody(OPERATIONBODY_EDEFAULT);
        return;
      case UmlPackage.OPERATION_DECLARATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case UmlPackage.OPERATION_DECLARATION__OWNED_PARAMETER:
        getOwnedParameter().clear();
        return;
      case UmlPackage.OPERATION_DECLARATION__RETURN_TYPE:
        setReturnType((SimpleTypes)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UmlPackage.OPERATION_DECLARATION__OCLEXPRESSION:
        return OCLEXPRESSION_EDEFAULT == null ? oclexpression != null : !OCLEXPRESSION_EDEFAULT.equals(oclexpression);
      case UmlPackage.OPERATION_DECLARATION__CONDITIONS:
        return conditions != null && !conditions.isEmpty();
      case UmlPackage.OPERATION_DECLARATION__OPERATIONBODY:
        return OPERATIONBODY_EDEFAULT == null ? operationbody != null : !OPERATIONBODY_EDEFAULT.equals(operationbody);
      case UmlPackage.OPERATION_DECLARATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case UmlPackage.OPERATION_DECLARATION__OWNED_PARAMETER:
        return ownedParameter != null && !ownedParameter.isEmpty();
      case UmlPackage.OPERATION_DECLARATION__RETURN_TYPE:
        return returnType != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (oclexpression: ");
    result.append(oclexpression);
    result.append(", operationbody: ");
    result.append(operationbody);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //OperationDeclarationImpl
