/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.uml.impl;

import java.util.Collection;

import modelConverter.use_language.uml.Attribute;
import modelConverter.use_language.uml.ConstraintsBase;
import modelConverter.use_language.uml.Generalization;
import modelConverter.use_language.uml.UmlPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Class</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link modelConverter.use_language.uml.impl.ClassImpl#isAbstract <em>Abstract</em>}</li>
 *   <li>{@link modelConverter.use_language.uml.impl.ClassImpl#getName <em>Name</em>}</li>
 *   <li>{@link modelConverter.use_language.uml.impl.ClassImpl#getGeneralization <em>Generalization</em>}</li>
 *   <li>{@link modelConverter.use_language.uml.impl.ClassImpl#getOwnedAttribute <em>Owned Attribute</em>}</li>
 *   <li>{@link modelConverter.use_language.uml.impl.ClassImpl#getOwnedOperation <em>Owned Operation</em>}</li>
 *   <li>{@link modelConverter.use_language.uml.impl.ClassImpl#getConstraints <em>Constraints</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClassImpl extends TypeImpl implements modelConverter.use_language.uml.Class
{
  /**
   * The default value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected static final boolean ABSTRACT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected boolean abstract_ = ABSTRACT_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getGeneralization() <em>Generalization</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGeneralization()
   * @generated
   * @ordered
   */
  protected EList<Generalization> generalization;

  /**
   * The cached value of the '{@link #getOwnedAttribute() <em>Owned Attribute</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedAttribute()
   * @generated
   * @ordered
   */
  protected EList<Attribute> ownedAttribute;

  /**
   * The default value of the '{@link #getOwnedOperation() <em>Owned Operation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedOperation()
   * @generated
   * @ordered
   */
  protected static final String OWNED_OPERATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOwnedOperation() <em>Owned Operation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedOperation()
   * @generated
   * @ordered
   */
  protected String ownedOperation = OWNED_OPERATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getConstraints() <em>Constraints</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraints()
   * @generated
   * @ordered
   */
  protected ConstraintsBase constraints;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClassImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UmlPackage.Literals.CLASS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAbstract()
  {
    return abstract_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAbstract(boolean newAbstract)
  {
    boolean oldAbstract = abstract_;
    abstract_ = newAbstract;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UmlPackage.CLASS__ABSTRACT, oldAbstract, abstract_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UmlPackage.CLASS__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Generalization> getGeneralization()
  {
    if (generalization == null)
    {
      generalization = new EObjectContainmentEList<Generalization>(Generalization.class, this, UmlPackage.CLASS__GENERALIZATION);
    }
    return generalization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Attribute> getOwnedAttribute()
  {
    if (ownedAttribute == null)
    {
      ownedAttribute = new EObjectContainmentEList<Attribute>(Attribute.class, this, UmlPackage.CLASS__OWNED_ATTRIBUTE);
    }
    return ownedAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOwnedOperation()
  {
    return ownedOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOwnedOperation(String newOwnedOperation)
  {
    String oldOwnedOperation = ownedOperation;
    ownedOperation = newOwnedOperation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UmlPackage.CLASS__OWNED_OPERATION, oldOwnedOperation, ownedOperation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstraintsBase getConstraints()
  {
    return constraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstraints(ConstraintsBase newConstraints, NotificationChain msgs)
  {
    ConstraintsBase oldConstraints = constraints;
    constraints = newConstraints;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UmlPackage.CLASS__CONSTRAINTS, oldConstraints, newConstraints);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstraints(ConstraintsBase newConstraints)
  {
    if (newConstraints != constraints)
    {
      NotificationChain msgs = null;
      if (constraints != null)
        msgs = ((InternalEObject)constraints).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UmlPackage.CLASS__CONSTRAINTS, null, msgs);
      if (newConstraints != null)
        msgs = ((InternalEObject)newConstraints).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UmlPackage.CLASS__CONSTRAINTS, null, msgs);
      msgs = basicSetConstraints(newConstraints, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UmlPackage.CLASS__CONSTRAINTS, newConstraints, newConstraints));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UmlPackage.CLASS__GENERALIZATION:
        return ((InternalEList<?>)getGeneralization()).basicRemove(otherEnd, msgs);
      case UmlPackage.CLASS__OWNED_ATTRIBUTE:
        return ((InternalEList<?>)getOwnedAttribute()).basicRemove(otherEnd, msgs);
      case UmlPackage.CLASS__CONSTRAINTS:
        return basicSetConstraints(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UmlPackage.CLASS__ABSTRACT:
        return isAbstract();
      case UmlPackage.CLASS__NAME:
        return getName();
      case UmlPackage.CLASS__GENERALIZATION:
        return getGeneralization();
      case UmlPackage.CLASS__OWNED_ATTRIBUTE:
        return getOwnedAttribute();
      case UmlPackage.CLASS__OWNED_OPERATION:
        return getOwnedOperation();
      case UmlPackage.CLASS__CONSTRAINTS:
        return getConstraints();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UmlPackage.CLASS__ABSTRACT:
        setAbstract((Boolean)newValue);
        return;
      case UmlPackage.CLASS__NAME:
        setName((String)newValue);
        return;
      case UmlPackage.CLASS__GENERALIZATION:
        getGeneralization().clear();
        getGeneralization().addAll((Collection<? extends Generalization>)newValue);
        return;
      case UmlPackage.CLASS__OWNED_ATTRIBUTE:
        getOwnedAttribute().clear();
        getOwnedAttribute().addAll((Collection<? extends Attribute>)newValue);
        return;
      case UmlPackage.CLASS__OWNED_OPERATION:
        setOwnedOperation((String)newValue);
        return;
      case UmlPackage.CLASS__CONSTRAINTS:
        setConstraints((ConstraintsBase)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UmlPackage.CLASS__ABSTRACT:
        setAbstract(ABSTRACT_EDEFAULT);
        return;
      case UmlPackage.CLASS__NAME:
        setName(NAME_EDEFAULT);
        return;
      case UmlPackage.CLASS__GENERALIZATION:
        getGeneralization().clear();
        return;
      case UmlPackage.CLASS__OWNED_ATTRIBUTE:
        getOwnedAttribute().clear();
        return;
      case UmlPackage.CLASS__OWNED_OPERATION:
        setOwnedOperation(OWNED_OPERATION_EDEFAULT);
        return;
      case UmlPackage.CLASS__CONSTRAINTS:
        setConstraints((ConstraintsBase)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UmlPackage.CLASS__ABSTRACT:
        return abstract_ != ABSTRACT_EDEFAULT;
      case UmlPackage.CLASS__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case UmlPackage.CLASS__GENERALIZATION:
        return generalization != null && !generalization.isEmpty();
      case UmlPackage.CLASS__OWNED_ATTRIBUTE:
        return ownedAttribute != null && !ownedAttribute.isEmpty();
      case UmlPackage.CLASS__OWNED_OPERATION:
        return OWNED_OPERATION_EDEFAULT == null ? ownedOperation != null : !OWNED_OPERATION_EDEFAULT.equals(ownedOperation);
      case UmlPackage.CLASS__CONSTRAINTS:
        return constraints != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (abstract: ");
    result.append(abstract_);
    result.append(", name: ");
    result.append(name);
    result.append(", ownedOperation: ");
    result.append(ownedOperation);
    result.append(')');
    return result.toString();
  }

} //ClassImpl
