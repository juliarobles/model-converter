/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.uml.impl;

import modelConverter.use_language.uml.ConditionType;
import modelConverter.use_language.uml.UmlPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Condition Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link modelConverter.use_language.uml.impl.ConditionTypeImpl#getName <em>Name</em>}</li>
 *   <li>{@link modelConverter.use_language.uml.impl.ConditionTypeImpl#getOclexpression <em>Oclexpression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionTypeImpl extends MinimalEObjectImpl.Container implements ConditionType
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getOclexpression() <em>Oclexpression</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOclexpression()
   * @generated
   * @ordered
   */
  protected static final String OCLEXPRESSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOclexpression() <em>Oclexpression</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOclexpression()
   * @generated
   * @ordered
   */
  protected String oclexpression = OCLEXPRESSION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UmlPackage.Literals.CONDITION_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UmlPackage.CONDITION_TYPE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOclexpression()
  {
    return oclexpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOclexpression(String newOclexpression)
  {
    String oldOclexpression = oclexpression;
    oclexpression = newOclexpression;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UmlPackage.CONDITION_TYPE__OCLEXPRESSION, oldOclexpression, oclexpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UmlPackage.CONDITION_TYPE__NAME:
        return getName();
      case UmlPackage.CONDITION_TYPE__OCLEXPRESSION:
        return getOclexpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UmlPackage.CONDITION_TYPE__NAME:
        setName((String)newValue);
        return;
      case UmlPackage.CONDITION_TYPE__OCLEXPRESSION:
        setOclexpression((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UmlPackage.CONDITION_TYPE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case UmlPackage.CONDITION_TYPE__OCLEXPRESSION:
        setOclexpression(OCLEXPRESSION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UmlPackage.CONDITION_TYPE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case UmlPackage.CONDITION_TYPE__OCLEXPRESSION:
        return OCLEXPRESSION_EDEFAULT == null ? oclexpression != null : !OCLEXPRESSION_EDEFAULT.equals(oclexpression);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", oclexpression: ");
    result.append(oclexpression);
    result.append(')');
    return result.toString();
  }

} //ConditionTypeImpl
