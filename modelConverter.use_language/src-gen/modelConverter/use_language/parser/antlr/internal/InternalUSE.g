/*
 * generated by Xtext 2.25.0
 */
grammar InternalUSE;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package modelConverter.use_language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package modelConverter.use_language.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import modelConverter.use_language.services.USEGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private USEGrammarAccess grammarAccess;

    public InternalUSEParser(TokenStream input, USEGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ModelUSE";
   	}

   	@Override
   	protected USEGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModelUSE
entryRuleModelUSE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelUSERule()); }
	iv_ruleModelUSE=ruleModelUSE
	{ $current=$iv_ruleModelUSE.current; }
	EOF;

// Rule ModelUSE
ruleModelUSE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='model'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelUSEAccess().getModelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModelUSEAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelUSERule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModelUSEAccess().getEnumsEnumParserRuleCall_2_0_0());
					}
					lv_enums_2_0=ruleEnum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelUSERule());
						}
						add(
							$current,
							"enums",
							lv_enums_2_0,
							"modelConverter.use_language.USE.Enum");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getModelUSEAccess().getPackagedElementTypeParserRuleCall_2_1_0());
					}
					lv_packagedElement_3_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelUSERule());
						}
						add(
							$current,
							"packagedElement",
							lv_packagedElement_3_0,
							"modelConverter.use_language.USE.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getModelUSEAccess().getConstraintsConstrainsGeneralParserRuleCall_2_2_0());
					}
					lv_constraints_4_0=ruleConstrainsGeneral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelUSERule());
						}
						set(
							$current,
							"constraints",
							lv_constraints_4_0,
							"modelConverter.use_language.USE.ConstrainsGeneral");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleMultiplicity
entryRuleMultiplicity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicityRule()); }
	iv_ruleMultiplicity=ruleMultiplicity
	{ $current=$iv_ruleMultiplicity.current; }
	EOF;

// Rule Multiplicity
ruleMultiplicity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_minValue_0_1='*'
					{
						newLeafNode(lv_minValue_0_1, grammarAccess.getMultiplicityAccess().getMinValueAsteriskKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultiplicityRule());
						}
						addWithLastConsumed($current, "minValue", lv_minValue_0_1, null);
					}
					    |
					{
						newCompositeNode(grammarAccess.getMultiplicityAccess().getMinValueIntToStringParserRuleCall_0_0_1());
					}
					lv_minValue_0_2=ruleIntToString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicityRule());
						}
						add(
							$current,
							"minValue",
							lv_minValue_0_2,
							"modelConverter.use_language.USE.IntToString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_1='..'
			{
				newLeafNode(otherlv_1, grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_1_0());
			}
			(
				(
					(
						lv_maxValue_2_1='*'
						{
							newLeafNode(lv_maxValue_2_1, grammarAccess.getMultiplicityAccess().getMaxValueAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicityRule());
							}
							addWithLastConsumed($current, "maxValue", lv_maxValue_2_1, null);
						}
						    |
						{
							newCompositeNode(grammarAccess.getMultiplicityAccess().getMaxValueIntToStringParserRuleCall_1_1_0_1());
						}
						lv_maxValue_2_2=ruleIntToString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultiplicityRule());
							}
							add(
								$current,
								"maxValue",
								lv_maxValue_2_2,
								"modelConverter.use_language.USE.IntToString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getMultiplicityAccess().getCommaKeyword_2_0());
			}
			(
				(
					(
						lv_minValue_4_1='*'
						{
							newLeafNode(lv_minValue_4_1, grammarAccess.getMultiplicityAccess().getMinValueAsteriskKeyword_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicityRule());
							}
							addWithLastConsumed($current, "minValue", lv_minValue_4_1, null);
						}
						    |
						{
							newCompositeNode(grammarAccess.getMultiplicityAccess().getMinValueIntToStringParserRuleCall_2_1_0_1());
						}
						lv_minValue_4_2=ruleIntToString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultiplicityRule());
							}
							add(
								$current,
								"minValue",
								lv_minValue_4_2,
								"modelConverter.use_language.USE.IntToString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_5='..'
				{
					newLeafNode(otherlv_5, grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_2_2_0());
				}
				(
					(
						(
							lv_maxValue_6_1='*'
							{
								newLeafNode(lv_maxValue_6_1, grammarAccess.getMultiplicityAccess().getMaxValueAsteriskKeyword_2_2_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMultiplicityRule());
								}
								addWithLastConsumed($current, "maxValue", lv_maxValue_6_1, null);
							}
							    |
							{
								newCompositeNode(grammarAccess.getMultiplicityAccess().getMaxValueIntToStringParserRuleCall_2_2_1_0_1());
							}
							lv_maxValue_6_2=ruleIntToString
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMultiplicityRule());
								}
								add(
									$current,
									"maxValue",
									lv_maxValue_6_2,
									"modelConverter.use_language.USE.IntToString");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)?
		)*
	)
;

// Entry rule entryRuleIntToString
entryRuleIntToString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntToStringRule()); }
	iv_ruleIntToString=ruleIntToString
	{ $current=$iv_ruleIntToString.current.getText(); }
	EOF;

// Rule IntToString
ruleIntToString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getIntToStringAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleDefaultType
entryRuleDefaultType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDefaultTypeRule()); }
	iv_ruleDefaultType=ruleDefaultType
	{ $current=$iv_ruleDefaultType.current.getText(); }
	EOF;

// Rule DefaultType
ruleDefaultType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Integer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefaultTypeAccess().getIntegerKeyword_0());
		}
		    |
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefaultTypeAccess().getStringKeyword_1());
		}
		    |
		kw='Real'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefaultTypeAccess().getRealKeyword_2());
		}
		    |
		kw='Boolean'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefaultTypeAccess().getBooleanKeyword_3());
		}
	)
;

// Entry rule entryRuleAllTypes
entryRuleAllTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllTypesRule()); }
	iv_ruleAllTypes=ruleAllTypes
	{ $current=$iv_ruleAllTypes.current; }
	EOF;

// Rule AllTypes
ruleAllTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAllTypesAccess().getCollectionTypeParserRuleCall_0());
		}
		this_CollectionType_0=ruleCollectionType
		{
			$current = $this_CollectionType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAllTypesAccess().getSimpleTypesParserRuleCall_1());
		}
		this_SimpleTypes_1=ruleSimpleTypes
		{
			$current = $this_SimpleTypes_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeAccess().getClassParserRuleCall_0());
		}
		this_Class_0=ruleClass
		{
			$current = $this_Class_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeAccess().getAssociationParserRuleCall_1());
		}
		this_Association_1=ruleAssociation
		{
			$current = $this_Association_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeAccess().getAssociationClassParserRuleCall_2());
		}
		this_AssociationClass_2=ruleAssociationClass
		{
			$current = $this_AssociationClass_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCollectionType
entryRuleCollectionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionTypeRule()); }
	iv_ruleCollectionType=ruleCollectionType
	{ $current=$iv_ruleCollectionType.current; }
	EOF;

// Rule CollectionType
ruleCollectionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_collection_0_1='Set'
					{
						newLeafNode(lv_collection_0_1, grammarAccess.getCollectionTypeAccess().getCollectionSetKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCollectionTypeRule());
						}
						setWithLastConsumed($current, "collection", lv_collection_0_1, null);
					}
					    |
					lv_collection_0_2='Bag'
					{
						newLeafNode(lv_collection_0_2, grammarAccess.getCollectionTypeAccess().getCollectionBagKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCollectionTypeRule());
						}
						setWithLastConsumed($current, "collection", lv_collection_0_2, null);
					}
					    |
					lv_collection_0_3='Sequence'
					{
						newLeafNode(lv_collection_0_3, grammarAccess.getCollectionTypeAccess().getCollectionSequenceKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCollectionTypeRule());
						}
						setWithLastConsumed($current, "collection", lv_collection_0_3, null);
					}
				)
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCollectionTypeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionTypeAccess().getTypeSimpleTypesParserRuleCall_2_0());
				}
				lv_type_2_0=ruleSimpleTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionTypeRule());
					}
					add(
						$current,
						"type",
						lv_type_2_0,
						"modelConverter.use_language.USE.SimpleTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCollectionTypeAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleAllClass
entryRuleAllClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllClassRule()); }
	iv_ruleAllClass=ruleAllClass
	{ $current=$iv_ruleAllClass.current; }
	EOF;

// Rule AllClass
ruleAllClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAllClassAccess().getClassParserRuleCall_0());
		}
		this_Class_0=ruleClass
		{
			$current = $this_Class_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAllClassAccess().getAssociationClassParserRuleCall_1());
		}
		this_AssociationClass_1=ruleAssociationClass
		{
			$current = $this_AssociationClass_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSimpleTypes
entryRuleSimpleTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleTypesRule()); }
	iv_ruleSimpleTypes=ruleSimpleTypes
	{ $current=$iv_ruleSimpleTypes.current; }
	EOF;

// Rule SimpleTypes
ruleSimpleTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleTypesAccess().getDefaultTypeDefaultTypeParserRuleCall_0_0());
				}
				lv_defaultType_0_0=ruleDefaultType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleTypesRule());
					}
					set(
						$current,
						"defaultType",
						lv_defaultType_0_0,
						"modelConverter.use_language.USE.DefaultType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleTypesRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSimpleTypesAccess().getReferendedAllClassAndEnumCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleEnum
entryRuleEnum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumRule()); }
	iv_ruleEnum=ruleEnum
	{ $current=$iv_ruleEnum.current; }
	EOF;

// Rule Enum
ruleEnum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enum'
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumAccess().getEnumKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEnumAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumAccess().getElementsEnumElementParserRuleCall_3_0());
				}
				lv_elements_3_0=ruleEnumElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumRule());
					}
					add(
						$current,
						"elements",
						lv_elements_3_0,
						"modelConverter.use_language.USE.EnumElement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEnumElement
entryRuleEnumElement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEnumElementRule()); }
	iv_ruleEnumElement=ruleEnumElement
	{ $current=$iv_ruleEnumElement.current.getText(); }
	EOF;

// Rule EnumElement
ruleEnumElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getEnumElementAccess().getIDTerminalRuleCall_0());
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEnumElementAccess().getCommaKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_abstract_0_0='abstract'
				{
					newLeafNode(lv_abstract_0_0, grammarAccess.getClassAccess().getAbstractAbstractKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassRule());
					}
					setWithLastConsumed($current, "abstract", lv_abstract_0_0 != null, "abstract");
				}
			)
		)?
		otherlv_1='class'
		{
			newLeafNode(otherlv_1, grammarAccess.getClassAccess().getClassKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='<'
			{
				newLeafNode(otherlv_3, grammarAccess.getClassAccess().getLessThanSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getClassAccess().getGeneralizationGeneralizationParserRuleCall_3_1_0());
					}
					lv_generalization_4_0=ruleGeneralization
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClassRule());
						}
						add(
							$current,
							"generalization",
							lv_generalization_4_0,
							"modelConverter.use_language.USE.Generalization");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getAttributesAttributesBaseParserRuleCall_4_0());
				}
				lv_attributes_5_0=ruleAttributesBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"attributes",
						lv_attributes_5_0,
						"modelConverter.use_language.USE.AttributesBase");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getOperationsOperationsBaseParserRuleCall_5_0());
				}
				lv_operations_6_0=ruleOperationsBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"operations",
						lv_operations_6_0,
						"modelConverter.use_language.USE.OperationsBase");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getConstraintsConstraintsBaseParserRuleCall_6_0());
				}
				lv_constraints_7_0=ruleConstraintsBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"constraints",
						lv_constraints_7_0,
						"modelConverter.use_language.USE.ConstraintsBase");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getStatemachinesStateMachinesBaseParserRuleCall_7_0());
				}
				lv_statemachines_8_0=ruleStateMachinesBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"statemachines",
						lv_statemachines_8_0,
						"modelConverter.use_language.USE.StateMachinesBase");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_9='end'
		{
			newLeafNode(otherlv_9, grammarAccess.getClassAccess().getEndKeyword_8());
		}
	)
;

// Entry rule entryRuleGeneralization
entryRuleGeneralization returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeneralizationRule()); }
	iv_ruleGeneralization=ruleGeneralization
	{ $current=$iv_ruleGeneralization.current; }
	EOF;

// Rule Generalization
ruleGeneralization returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGeneralizationRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getGeneralizationAccess().getGeneralAllClassCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getGeneralizationAccess().getCommaKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleAssociation
entryRuleAssociation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssociationRule()); }
	iv_ruleAssociation=ruleAssociation
	{ $current=$iv_ruleAssociation.current; }
	EOF;

// Rule Association
ruleAssociation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_typeAssociation_0_1='association'
					{
						newLeafNode(lv_typeAssociation_0_1, grammarAccess.getAssociationAccess().getTypeAssociationAssociationKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssociationRule());
						}
						setWithLastConsumed($current, "typeAssociation", lv_typeAssociation_0_1, null);
					}
					    |
					lv_typeAssociation_0_2='aggregation'
					{
						newLeafNode(lv_typeAssociation_0_2, grammarAccess.getAssociationAccess().getTypeAssociationAggregationKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssociationRule());
						}
						setWithLastConsumed($current, "typeAssociation", lv_typeAssociation_0_2, null);
					}
					    |
					lv_typeAssociation_0_3='composition'
					{
						newLeafNode(lv_typeAssociation_0_3, grammarAccess.getAssociationAccess().getTypeAssociationCompositionKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssociationRule());
						}
						setWithLastConsumed($current, "typeAssociation", lv_typeAssociation_0_3, null);
					}
				)
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAssociationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssociationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='between'
		{
			newLeafNode(otherlv_2, grammarAccess.getAssociationAccess().getBetweenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationAccess().getAssociationEndsAssociationEndParserRuleCall_3_0());
				}
				lv_associationEnds_3_0=ruleAssociationEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationRule());
					}
					add(
						$current,
						"associationEnds",
						lv_associationEnds_3_0,
						"modelConverter.use_language.USE.AssociationEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getAssociationAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleAssociationEnd
entryRuleAssociationEnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssociationEndRule()); }
	iv_ruleAssociationEnd=ruleAssociationEnd
	{ $current=$iv_ruleAssociationEnd.current; }
	EOF;

// Rule AssociationEnd
ruleAssociationEnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssociationEndRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAssociationEndAccess().getTypeAllClassCrossReference_0_0());
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getAssociationEndAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationEndAccess().getMulMultiplicityParserRuleCall_2_0());
				}
				lv_mul_2_0=ruleMultiplicity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationEndRule());
					}
					set(
						$current,
						"mul",
						lv_mul_2_0,
						"modelConverter.use_language.USE.Multiplicity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getAssociationEndAccess().getRightSquareBracketKeyword_3());
		}
		(
			otherlv_4='role'
			{
				newLeafNode(otherlv_4, grammarAccess.getAssociationEndAccess().getRoleKeyword_4_0());
			}
			(
				(
					lv_role_5_0=RULE_ID
					{
						newLeafNode(lv_role_5_0, grammarAccess.getAssociationEndAccess().getRoleIDTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssociationEndRule());
						}
						setWithLastConsumed(
							$current,
							"role",
							lv_role_5_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
		(
			(
				lv_ordered_6_0='ordered'
				{
					newLeafNode(lv_ordered_6_0, grammarAccess.getAssociationEndAccess().getOrderedOrderedKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssociationEndRule());
					}
					setWithLastConsumed($current, "ordered", lv_ordered_6_0 != null, "ordered");
				}
			)
		)?
	)
;

// Entry rule entryRuleAssociationClass
entryRuleAssociationClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssociationClassRule()); }
	iv_ruleAssociationClass=ruleAssociationClass
	{ $current=$iv_ruleAssociationClass.current; }
	EOF;

// Rule AssociationClass
ruleAssociationClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_abstract_0_0='abstract'
				{
					newLeafNode(lv_abstract_0_0, grammarAccess.getAssociationClassAccess().getAbstractAbstractKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssociationClassRule());
					}
					setWithLastConsumed($current, "abstract", lv_abstract_0_0 != null, "abstract");
				}
			)
		)?
		otherlv_1='associationclass'
		{
			newLeafNode(otherlv_1, grammarAccess.getAssociationClassAccess().getAssociationclassKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getAssociationClassAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssociationClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='<'
			{
				newLeafNode(otherlv_3, grammarAccess.getAssociationClassAccess().getLessThanSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAssociationClassAccess().getGeneralizationGeneralizationParserRuleCall_3_1_0());
					}
					lv_generalization_4_0=ruleGeneralization
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssociationClassRule());
						}
						add(
							$current,
							"generalization",
							lv_generalization_4_0,
							"modelConverter.use_language.USE.Generalization");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		otherlv_5='between'
		{
			newLeafNode(otherlv_5, grammarAccess.getAssociationClassAccess().getBetweenKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationClassAccess().getAssociationEndsAssociationEndParserRuleCall_5_0());
				}
				lv_associationEnds_6_0=ruleAssociationEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationClassRule());
					}
					add(
						$current,
						"associationEnds",
						lv_associationEnds_6_0,
						"modelConverter.use_language.USE.AssociationEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationClassAccess().getAttributesAttributesBaseParserRuleCall_6_0());
				}
				lv_attributes_7_0=ruleAttributesBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationClassRule());
					}
					set(
						$current,
						"attributes",
						lv_attributes_7_0,
						"modelConverter.use_language.USE.AttributesBase");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationClassAccess().getOperationsOperationsBaseParserRuleCall_7_0());
				}
				lv_operations_8_0=ruleOperationsBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationClassRule());
					}
					set(
						$current,
						"operations",
						lv_operations_8_0,
						"modelConverter.use_language.USE.OperationsBase");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationClassAccess().getConstraintsConstraintsBaseParserRuleCall_8_0());
				}
				lv_constraints_9_0=ruleConstraintsBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationClassRule());
					}
					set(
						$current,
						"constraints",
						lv_constraints_9_0,
						"modelConverter.use_language.USE.ConstraintsBase");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAssociationClassAccess().getStatemachinesStateMachinesBaseParserRuleCall_9_0());
				}
				lv_statemachines_10_0=ruleStateMachinesBase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssociationClassRule());
					}
					set(
						$current,
						"statemachines",
						lv_statemachines_10_0,
						"modelConverter.use_language.USE.StateMachinesBase");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_11='end'
		{
			newLeafNode(otherlv_11, grammarAccess.getAssociationClassAccess().getEndKeyword_10());
		}
	)
;

// Entry rule entryRuleAttributesBase
entryRuleAttributesBase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributesBaseRule()); }
	iv_ruleAttributesBase=ruleAttributesBase
	{ $current=$iv_ruleAttributesBase.current; }
	EOF;

// Rule AttributesBase
ruleAttributesBase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='attributes'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributesBaseAccess().getAttributesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributesBaseAccess().getAttributesAttributeParserRuleCall_1_0());
				}
				lv_attributes_1_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributesBaseRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_1_0,
						"modelConverter.use_language.USE.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getTypeAllTypesParserRuleCall_2_0());
				}
				lv_type_2_0=ruleAllTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"modelConverter.use_language.USE.AllTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='init'
			{
				newLeafNode(otherlv_3, grammarAccess.getAttributeAccess().getInitKeyword_3_0());
			}
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getAttributeAccess().getColonKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeAccess().getInitOCLExpCSParserRuleCall_3_2_0());
					}
					lv_initOCL_5_0=ruleExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeRule());
						}
						set(
							$current,
							"initOCL",
							lv_initOCL_5_0,
							"modelConverter.use_language.USE.ExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				otherlv_6='derive'
				{
					newLeafNode(otherlv_6, grammarAccess.getAttributeAccess().getDeriveKeyword_4_0_0());
				}
				    |
				otherlv_7='derived'
				{
					newLeafNode(otherlv_7, grammarAccess.getAttributeAccess().getDerivedKeyword_4_0_1());
				}
			)
			otherlv_8=':'
			{
				newLeafNode(otherlv_8, grammarAccess.getAttributeAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeAccess().getDeriveOCLExpCSParserRuleCall_4_2_0());
					}
					lv_deriveOCL_9_0=ruleExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeRule());
						}
						set(
							$current,
							"deriveOCL",
							lv_deriveOCL_9_0,
							"modelConverter.use_language.USE.ExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleOperationsBase
entryRuleOperationsBase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationsBaseRule()); }
	iv_ruleOperationsBase=ruleOperationsBase
	{ $current=$iv_ruleOperationsBase.current; }
	EOF;

// Rule OperationsBase
ruleOperationsBase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='operations'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperationsBaseAccess().getOperationsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationsBaseAccess().getOperationsOperationTypeParserRuleCall_1_0());
				}
				lv_operations_1_0=ruleOperationType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationsBaseRule());
					}
					add(
						$current,
						"operations",
						lv_operations_1_0,
						"modelConverter.use_language.USE.OperationType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleOperationType
entryRuleOperationType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationTypeRule()); }
	iv_ruleOperationType=ruleOperationType
	{ $current=$iv_ruleOperationType.current; }
	EOF;

// Rule OperationType
ruleOperationType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getOperationTypeAccess().getOperationComplexParserRuleCall_0());
		}
		this_OperationComplex_0=ruleOperationComplex
		{
			$current = $this_OperationComplex_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getOperationTypeAccess().getOperationQueryParserRuleCall_1());
		}
		this_OperationQuery_1=ruleOperationQuery
		{
			$current = $this_OperationQuery_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperationQuery
entryRuleOperationQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationQueryRule()); }
	iv_ruleOperationQuery=ruleOperationQuery
	{ $current=$iv_ruleOperationQuery.current; }
	EOF;

// Rule OperationQuery
ruleOperationQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationQueryAccess().getOperationDeclarationOperationDeclarationParserRuleCall_0_0());
				}
				lv_operationDeclaration_0_0=ruleOperationDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationQueryRule());
					}
					set(
						$current,
						"operationDeclaration",
						lv_operationDeclaration_0_0,
						"modelConverter.use_language.USE.OperationDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getOperationQueryAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationQueryAccess().getOperationbodyExpCSParserRuleCall_2_0());
				}
				lv_operationbody_2_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationQueryRule());
					}
					set(
						$current,
						"operationbody",
						lv_operationbody_2_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getOperationQueryAccess().getSemicolonKeyword_3());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationQueryAccess().getConditionsConditionTypeParserRuleCall_4_0());
				}
				lv_conditions_4_0=ruleConditionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationQueryRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_4_0,
						"modelConverter.use_language.USE.ConditionType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleOperationComplex
entryRuleOperationComplex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationComplexRule()); }
	iv_ruleOperationComplex=ruleOperationComplex
	{ $current=$iv_ruleOperationComplex.current; }
	EOF;

// Rule OperationComplex
ruleOperationComplex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationComplexAccess().getOperationDeclarationOperationDeclarationParserRuleCall_0_0());
				}
				lv_operationDeclaration_0_0=ruleOperationDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationComplexRule());
					}
					set(
						$current,
						"operationDeclaration",
						lv_operationDeclaration_0_0,
						"modelConverter.use_language.USE.OperationDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='begin'
			{
				newLeafNode(otherlv_1, grammarAccess.getOperationComplexAccess().getBeginKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationComplexAccess().getOperationbodyBeginEndParserRuleCall_1_1_0());
					}
					lv_operationbody_2_0=ruleBeginEnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationComplexRule());
						}
						set(
							$current,
							"operationbody",
							lv_operationbody_2_0,
							"modelConverter.use_language.USE.BeginEnd");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_3='end'
			{
				newLeafNode(otherlv_3, grammarAccess.getOperationComplexAccess().getEndKeyword_1_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationComplexAccess().getConditionsConditionTypeParserRuleCall_2_0());
				}
				lv_conditions_4_0=ruleConditionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationComplexRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_4_0,
						"modelConverter.use_language.USE.ConditionType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleOperationDeclaration
entryRuleOperationDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationDeclarationRule()); }
	iv_ruleOperationDeclaration=ruleOperationDeclaration
	{ $current=$iv_ruleOperationDeclaration.current; }
	EOF;

// Rule OperationDeclaration
ruleOperationDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getOperationDeclarationAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getOperationDeclarationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationDeclarationAccess().getParametersParameterParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationDeclarationRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_2_0,
						"modelConverter.use_language.USE.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getOperationDeclarationAccess().getRightParenthesisKeyword_3());
		}
		(
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getOperationDeclarationAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationDeclarationAccess().getReturnTypeAllTypesParserRuleCall_4_1_0());
					}
					lv_returnType_5_0=ruleAllTypes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationDeclarationRule());
						}
						set(
							$current,
							"returnType",
							lv_returnType_5_0,
							"modelConverter.use_language.USE.AllTypes");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeAllTypesParserRuleCall_2_0());
				}
				lv_type_2_0=ruleAllTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"modelConverter.use_language.USE.AllTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getCommaKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleStateMachinesBase
entryRuleStateMachinesBase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateMachinesBaseRule()); }
	iv_ruleStateMachinesBase=ruleStateMachinesBase
	{ $current=$iv_ruleStateMachinesBase.current; }
	EOF;

// Rule StateMachinesBase
ruleStateMachinesBase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='statemachines'
		{
			newLeafNode(otherlv_0, grammarAccess.getStateMachinesBaseAccess().getStatemachinesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStateMachinesBaseAccess().getStatemachinesStateMachineParserRuleCall_1_0());
				}
				lv_statemachines_1_0=ruleStateMachine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateMachinesBaseRule());
					}
					add(
						$current,
						"statemachines",
						lv_statemachines_1_0,
						"modelConverter.use_language.USE.StateMachine");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStateMachine
entryRuleStateMachine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateMachineRule()); }
	iv_ruleStateMachine=ruleStateMachine
	{ $current=$iv_ruleStateMachine.current; }
	EOF;

// Rule StateMachine
ruleStateMachine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='psm'
		{
			newLeafNode(otherlv_0, grammarAccess.getStateMachineAccess().getPsmKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStateMachineAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateMachineRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='states'
		{
			newLeafNode(otherlv_2, grammarAccess.getStateMachineAccess().getStatesKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStateMachineAccess().getStatesStateParserRuleCall_3_0());
				}
				lv_states_3_0=ruleState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateMachineRule());
					}
					add(
						$current,
						"states",
						lv_states_3_0,
						"modelConverter.use_language.USE.State");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='transitions'
		{
			newLeafNode(otherlv_4, grammarAccess.getStateMachineAccess().getTransitionsKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStateMachineAccess().getTransitionsTransitionParserRuleCall_5_0());
				}
				lv_transitions_5_0=ruleTransition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateMachineRule());
					}
					add(
						$current,
						"transitions",
						lv_transitions_5_0,
						"modelConverter.use_language.USE.Transition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='end'
		{
			newLeafNode(otherlv_6, grammarAccess.getStateMachineAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRuleState
entryRuleState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				otherlv_1=':'
				{
					newLeafNode(otherlv_1, grammarAccess.getStateAccess().getColonKeyword_1_0_0());
				}
				(
					(
						lv_isInitial_2_0='initial'
						{
							newLeafNode(lv_isInitial_2_0, grammarAccess.getStateAccess().getIsInitialInitialKeyword_1_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getStateRule());
							}
							setWithLastConsumed($current, "isInitial", lv_isInitial_2_0 != null, "initial");
						}
					)
				)
			)
			    |
			(
				otherlv_3=':'
				{
					newLeafNode(otherlv_3, grammarAccess.getStateAccess().getColonKeyword_1_1_0());
				}
				(
					(
						lv_isFinal_4_0='final'
						{
							newLeafNode(lv_isFinal_4_0, grammarAccess.getStateAccess().getIsFinalFinalKeyword_1_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getStateRule());
							}
							setWithLastConsumed($current, "isFinal", lv_isFinal_4_0 != null, "final");
						}
					)
				)
			)
			    |
			(
				otherlv_5='['
				{
					newLeafNode(otherlv_5, grammarAccess.getStateAccess().getLeftSquareBracketKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStateAccess().getInvariantExpCSParserRuleCall_1_2_1_0());
						}
						lv_invariant_6_0=ruleExpCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStateRule());
							}
							set(
								$current,
								"invariant",
								lv_invariant_6_0,
								"modelConverter.use_language.USE.ExpCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_7=']'
				{
					newLeafNode(otherlv_7, grammarAccess.getStateAccess().getRightSquareBracketKeyword_1_2_2());
				}
			)
		)?
	)
;

// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	iv_ruleTransition=ruleTransition
	{ $current=$iv_ruleTransition.current; }
	EOF;

// Rule Transition
ruleTransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_source_0_0=RULE_ID
				{
					newLeafNode(lv_source_0_0, grammarAccess.getTransitionAccess().getSourceIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransitionRule());
					}
					setWithLastConsumed(
						$current,
						"source",
						lv_source_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				lv_target_2_0=RULE_ID
				{
					newLeafNode(lv_target_2_0, grammarAccess.getTransitionAccess().getTargetIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransitionRule());
					}
					setWithLastConsumed(
						$current,
						"target",
						lv_target_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				otherlv_4='['
				{
					newLeafNode(otherlv_4, grammarAccess.getTransitionAccess().getLeftSquareBracketKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTransitionAccess().getPreconditionExpCSParserRuleCall_3_1_1_0());
						}
						lv_precondition_5_0=ruleExpCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTransitionRule());
							}
							set(
								$current,
								"precondition",
								lv_precondition_5_0,
								"modelConverter.use_language.USE.ExpCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_6=']'
				{
					newLeafNode(otherlv_6, grammarAccess.getTransitionAccess().getRightSquareBracketKeyword_3_1_2());
				}
			)?
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTransitionRule());
						}
					}
					otherlv_7=RULE_ID
					{
						newLeafNode(otherlv_7, grammarAccess.getTransitionAccess().getOperationOperationDeclarationCrossReference_3_2_0());
					}
				)
			)
			otherlv_8='('
			{
				newLeafNode(otherlv_8, grammarAccess.getTransitionAccess().getLeftParenthesisKeyword_3_3());
			}
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getTransitionAccess().getRightParenthesisKeyword_3_4());
			}
			(
				otherlv_10='['
				{
					newLeafNode(otherlv_10, grammarAccess.getTransitionAccess().getLeftSquareBracketKeyword_3_5_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTransitionAccess().getPostconditionExpCSParserRuleCall_3_5_1_0());
						}
						lv_postcondition_11_0=ruleExpCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTransitionRule());
							}
							set(
								$current,
								"postcondition",
								lv_postcondition_11_0,
								"modelConverter.use_language.USE.ExpCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_12=']'
				{
					newLeafNode(otherlv_12, grammarAccess.getTransitionAccess().getRightSquareBracketKeyword_3_5_2());
				}
			)?
			otherlv_13='}'
			{
				newLeafNode(otherlv_13, grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_3_6());
			}
		)?
	)
;

// Entry rule entryRuleConstraintsBase
entryRuleConstraintsBase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintsBaseRule()); }
	iv_ruleConstraintsBase=ruleConstraintsBase
	{ $current=$iv_ruleConstraintsBase.current; }
	EOF;

// Rule ConstraintsBase
ruleConstraintsBase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constraints'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstraintsBaseAccess().getConstraintsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintsBaseAccess().getInvariantsInvariantDefinitionParserRuleCall_1_0());
				}
				lv_invariants_1_0=ruleInvariantDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintsBaseRule());
					}
					add(
						$current,
						"invariants",
						lv_invariants_1_0,
						"modelConverter.use_language.USE.InvariantDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConstrainsGeneral
entryRuleConstrainsGeneral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstrainsGeneralRule()); }
	iv_ruleConstrainsGeneral=ruleConstrainsGeneral
	{ $current=$iv_ruleConstrainsGeneral.current; }
	EOF;

// Rule ConstrainsGeneral
ruleConstrainsGeneral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constraints'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstrainsGeneralAccess().getConstraintsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstrainsGeneralAccess().getContextsContextsTypeParserRuleCall_1_0());
				}
				lv_contexts_1_0=ruleContextsType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstrainsGeneralRule());
					}
					add(
						$current,
						"contexts",
						lv_contexts_1_0,
						"modelConverter.use_language.USE.ContextsType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleContextsType
entryRuleContextsType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContextsTypeRule()); }
	iv_ruleContextsType=ruleContextsType
	{ $current=$iv_ruleContextsType.current; }
	EOF;

// Rule ContextsType
ruleContextsType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getContextsTypeAccess().getInvariantContextParserRuleCall_0());
		}
		this_InvariantContext_0=ruleInvariantContext
		{
			$current = $this_InvariantContext_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getContextsTypeAccess().getOperationContextParserRuleCall_1());
		}
		this_OperationContext_1=ruleOperationContext
		{
			$current = $this_OperationContext_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInvariantContext
entryRuleInvariantContext returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInvariantContextRule()); }
	iv_ruleInvariantContext=ruleInvariantContext
	{ $current=$iv_ruleInvariantContext.current; }
	EOF;

// Rule InvariantContext
ruleInvariantContext returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='context'
		{
			newLeafNode(otherlv_0, grammarAccess.getInvariantContextAccess().getContextKeyword_0());
		}
		(
			(
				(
					lv_variablename_1_0=RULE_ID
					{
						newLeafNode(lv_variablename_1_0, grammarAccess.getInvariantContextAccess().getVariablenameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInvariantContextRule());
						}
						setWithLastConsumed(
							$current,
							"variablename",
							lv_variablename_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getInvariantContextAccess().getColonKeyword_1_1());
			}
		)?
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInvariantContextRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getInvariantContextAccess().getClassnameAllClassCrossReference_2_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInvariantContextAccess().getInvariantsInvariantDefinitionParserRuleCall_3_0());
				}
				lv_invariants_4_0=ruleInvariantDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInvariantContextRule());
					}
					add(
						$current,
						"invariants",
						lv_invariants_4_0,
						"modelConverter.use_language.USE.InvariantDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleInvariantDefinition
entryRuleInvariantDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInvariantDefinitionRule()); }
	iv_ruleInvariantDefinition=ruleInvariantDefinition
	{ $current=$iv_ruleInvariantDefinition.current; }
	EOF;

// Rule InvariantDefinition
ruleInvariantDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='inv'
		{
			newLeafNode(otherlv_0, grammarAccess.getInvariantDefinitionAccess().getInvKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getInvariantDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInvariantDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getInvariantDefinitionAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInvariantDefinitionAccess().getOclexpressionExpCSParserRuleCall_3_0());
				}
				lv_oclexpression_3_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInvariantDefinitionRule());
					}
					set(
						$current,
						"oclexpression",
						lv_oclexpression_3_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperationContext
entryRuleOperationContext returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationContextRule()); }
	iv_ruleOperationContext=ruleOperationContext
	{ $current=$iv_ruleOperationContext.current; }
	EOF;

// Rule OperationContext
ruleOperationContext returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='context'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperationContextAccess().getContextKeyword_0());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationContextRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getOperationContextAccess().getClassnameAllClassCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationContextAccess().getConstrainsOperationConstraintsParserRuleCall_2_0());
				}
				lv_constrains_2_0=ruleOperationConstraints
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationContextRule());
					}
					set(
						$current,
						"constrains",
						lv_constrains_2_0,
						"modelConverter.use_language.USE.OperationConstraints");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperationConstraints
entryRuleOperationConstraints returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationConstraintsRule()); }
	iv_ruleOperationConstraints=ruleOperationConstraints
	{ $current=$iv_ruleOperationConstraints.current; }
	EOF;

// Rule OperationConstraints
ruleOperationConstraints returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='::'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperationConstraintsAccess().getColonColonKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationConstraintsAccess().getOperationDeclarationOperationDeclarationParserRuleCall_1_0());
				}
				lv_operationDeclaration_1_0=ruleOperationDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationConstraintsRule());
					}
					set(
						$current,
						"operationDeclaration",
						lv_operationDeclaration_1_0,
						"modelConverter.use_language.USE.OperationDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationConstraintsAccess().getConditionsConditionTypeParserRuleCall_2_0());
				}
				lv_conditions_2_0=ruleConditionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationConstraintsRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_2_0,
						"modelConverter.use_language.USE.ConditionType");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleConditionType
entryRuleConditionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionTypeRule()); }
	iv_ruleConditionType=ruleConditionType
	{ $current=$iv_ruleConditionType.current; }
	EOF;

// Rule ConditionType
ruleConditionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getConditionTypeAccess().getPreconditionParserRuleCall_0());
		}
		this_Precondition_0=rulePrecondition
		{
			$current = $this_Precondition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getConditionTypeAccess().getPostconditionParserRuleCall_1());
		}
		this_Postcondition_1=rulePostcondition
		{
			$current = $this_Postcondition_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrecondition
entryRulePrecondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPreconditionRule()); }
	iv_rulePrecondition=rulePrecondition
	{ $current=$iv_rulePrecondition.current; }
	EOF;

// Rule Precondition
rulePrecondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pre'
		{
			newLeafNode(otherlv_0, grammarAccess.getPreconditionAccess().getPreKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPreconditionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPreconditionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getPreconditionAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPreconditionAccess().getOclexpressionExpCSParserRuleCall_3_0());
				}
				lv_oclexpression_3_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreconditionRule());
					}
					set(
						$current,
						"oclexpression",
						lv_oclexpression_3_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePostcondition
entryRulePostcondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostconditionRule()); }
	iv_rulePostcondition=rulePostcondition
	{ $current=$iv_rulePostcondition.current; }
	EOF;

// Rule Postcondition
rulePostcondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='post'
		{
			newLeafNode(otherlv_0, grammarAccess.getPostconditionAccess().getPostKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPostconditionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPostconditionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getPostconditionAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPostconditionAccess().getOclexpressionExpCSParserRuleCall_3_0());
				}
				lv_oclexpression_3_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPostconditionRule());
					}
					set(
						$current,
						"oclexpression",
						lv_oclexpression_3_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBeginEnd
entryRuleBeginEnd returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBeginEndRule()); }
	iv_ruleBeginEnd=ruleBeginEnd
	{ $current=$iv_ruleBeginEnd.current.getText(); }
	EOF;

// Rule BeginEnd
ruleBeginEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getBeginEndAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRulePrimitiveTypeIdentifier
entryRulePrimitiveTypeIdentifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeIdentifierRule()); }
	iv_rulePrimitiveTypeIdentifier=rulePrimitiveTypeIdentifier
	{ $current=$iv_rulePrimitiveTypeIdentifier.current.getText(); }
	EOF;

// Rule PrimitiveTypeIdentifier
rulePrimitiveTypeIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Boolean'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getBooleanKeyword_0());
		}
		    |
		kw='Integer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getIntegerKeyword_1());
		}
		    |
		kw='Real'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getRealKeyword_2());
		}
		    |
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getStringKeyword_3());
		}
		    |
		kw='UnlimitedNatural'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getUnlimitedNaturalKeyword_4());
		}
		    |
		kw='OclAny'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getOclAnyKeyword_5());
		}
		    |
		kw='OclInvalid'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getOclInvalidKeyword_6());
		}
		    |
		kw='OclVoid'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getOclVoidKeyword_7());
		}
	)
;

// Entry rule entryRulePrimitiveTypeCS
entryRulePrimitiveTypeCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeCSRule()); }
	iv_rulePrimitiveTypeCS=rulePrimitiveTypeCS
	{ $current=$iv_rulePrimitiveTypeCS.current; }
	EOF;

// Rule PrimitiveTypeCS
rulePrimitiveTypeCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPrimitiveTypeCSAccess().getNamePrimitiveTypeIdentifierParserRuleCall_0());
			}
			lv_name_0_0=rulePrimitiveTypeIdentifier
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPrimitiveTypeCSRule());
				}
				set(
					$current,
					"name",
					lv_name_0_0,
					"modelConverter.use_language.USE.PrimitiveTypeIdentifier");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleCollectionTypeIdentifier
entryRuleCollectionTypeIdentifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCollectionTypeIdentifierRule()); }
	iv_ruleCollectionTypeIdentifier=ruleCollectionTypeIdentifier
	{ $current=$iv_ruleCollectionTypeIdentifier.current.getText(); }
	EOF;

// Rule CollectionTypeIdentifier
ruleCollectionTypeIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Set'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionTypeIdentifierAccess().getSetKeyword_0());
		}
		    |
		kw='Bag'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionTypeIdentifierAccess().getBagKeyword_1());
		}
		    |
		kw='Sequence'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionTypeIdentifierAccess().getSequenceKeyword_2());
		}
		    |
		kw='Collection'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionTypeIdentifierAccess().getCollectionKeyword_3());
		}
		    |
		kw='OrderedSet'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionTypeIdentifierAccess().getOrderedSetKeyword_4());
		}
	)
;

// Entry rule entryRuleCollectionTypeCS
entryRuleCollectionTypeCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionTypeCSRule()); }
	iv_ruleCollectionTypeCS=ruleCollectionTypeCS
	{ $current=$iv_ruleCollectionTypeCS.current; }
	EOF;

// Rule CollectionTypeCS
ruleCollectionTypeCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionTypeCSAccess().getNameCollectionTypeIdentifierParserRuleCall_0_0());
				}
				lv_name_0_0=ruleCollectionTypeIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionTypeCSRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"modelConverter.use_language.USE.CollectionTypeIdentifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getCollectionTypeCSAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCollectionTypeCSAccess().getOwnedTypeTypeExpWithoutMultiplicityCSParserRuleCall_1_1_0());
					}
					lv_ownedType_2_0=ruleTypeExpWithoutMultiplicityCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCollectionTypeCSRule());
						}
						set(
							$current,
							"ownedType",
							lv_ownedType_2_0,
							"modelConverter.use_language.USE.TypeExpWithoutMultiplicityCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCollectionTypeCSAccess().getOwnedCollectionMultiplicityMultiplicityCSParserRuleCall_1_2_0());
					}
					lv_ownedCollectionMultiplicity_3_0=ruleMultiplicityCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCollectionTypeCSRule());
						}
						set(
							$current,
							"ownedCollectionMultiplicity",
							lv_ownedCollectionMultiplicity_3_0,
							"modelConverter.use_language.USE.MultiplicityCS");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getCollectionTypeCSAccess().getRightParenthesisKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRuleMapTypeCS
entryRuleMapTypeCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapTypeCSRule()); }
	iv_ruleMapTypeCS=ruleMapTypeCS
	{ $current=$iv_ruleMapTypeCS.current; }
	EOF;

// Rule MapTypeCS
ruleMapTypeCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='Map'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getMapTypeCSAccess().getNameMapKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMapTypeCSRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "Map");
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getMapTypeCSAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMapTypeCSAccess().getOwnedKeyTypeTypeExpCSParserRuleCall_1_1_0());
					}
					lv_ownedKeyType_2_0=ruleTypeExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMapTypeCSRule());
						}
						set(
							$current,
							"ownedKeyType",
							lv_ownedKeyType_2_0,
							"modelConverter.use_language.USE.TypeExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getMapTypeCSAccess().getCommaKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMapTypeCSAccess().getOwnedValueTypeTypeExpCSParserRuleCall_1_3_0());
					}
					lv_ownedValueType_4_0=ruleTypeExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMapTypeCSRule());
						}
						set(
							$current,
							"ownedValueType",
							lv_ownedValueType_4_0,
							"modelConverter.use_language.USE.TypeExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getMapTypeCSAccess().getRightParenthesisKeyword_1_4());
			}
		)?
	)
;

// Entry rule entryRuleTupleTypeCS
entryRuleTupleTypeCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTupleTypeCSRule()); }
	iv_ruleTupleTypeCS=ruleTupleTypeCS
	{ $current=$iv_ruleTupleTypeCS.current; }
	EOF;

// Rule TupleTypeCS
ruleTupleTypeCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='Tuple'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTupleTypeCSAccess().getNameTupleKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTupleTypeCSRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "Tuple");
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getTupleTypeCSAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getTupleTypeCSAccess().getOwnedPartsTuplePartCSParserRuleCall_1_1_0_0());
						}
						lv_ownedParts_2_0=ruleTuplePartCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTupleTypeCSRule());
							}
							add(
								$current,
								"ownedParts",
								lv_ownedParts_2_0,
								"modelConverter.use_language.USE.TuplePartCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3=','
					{
						newLeafNode(otherlv_3, grammarAccess.getTupleTypeCSAccess().getCommaKeyword_1_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getTupleTypeCSAccess().getOwnedPartsTuplePartCSParserRuleCall_1_1_1_1_0());
							}
							lv_ownedParts_4_0=ruleTuplePartCS
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTupleTypeCSRule());
								}
								add(
									$current,
									"ownedParts",
									lv_ownedParts_4_0,
									"modelConverter.use_language.USE.TuplePartCS");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getTupleTypeCSAccess().getRightParenthesisKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleTuplePartCS
entryRuleTuplePartCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTuplePartCSRule()); }
	iv_ruleTuplePartCS=ruleTuplePartCS
	{ $current=$iv_ruleTuplePartCS.current; }
	EOF;

// Rule TuplePartCS
ruleTuplePartCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTuplePartCSAccess().getNameUnrestrictedNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleUnrestrictedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTuplePartCSRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"modelConverter.use_language.USE.UnrestrictedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTuplePartCSAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTuplePartCSAccess().getOwnedTypeTypeExpCSParserRuleCall_2_0());
				}
				lv_ownedType_2_0=ruleTypeExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTuplePartCSRule());
					}
					set(
						$current,
						"ownedType",
						lv_ownedType_2_0,
						"modelConverter.use_language.USE.TypeExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBinaryOperatorName
entryRuleBinaryOperatorName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinaryOperatorNameRule()); }
	iv_ruleBinaryOperatorName=ruleBinaryOperatorName
	{ $current=$iv_ruleBinaryOperatorName.current.getText(); }
	EOF;

// Rule BinaryOperatorName
ruleBinaryOperatorName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBinaryOperatorNameAccess().getEssentialOCLInfixOperatorNameParserRuleCall_0());
		}
		this_EssentialOCLInfixOperatorName_0=ruleEssentialOCLInfixOperatorName
		{
			$current.merge(this_EssentialOCLInfixOperatorName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBinaryOperatorNameAccess().getEssentialOCLNavigationOperatorNameParserRuleCall_1());
		}
		this_EssentialOCLNavigationOperatorName_1=ruleEssentialOCLNavigationOperatorName
		{
			$current.merge(this_EssentialOCLNavigationOperatorName_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEssentialOCLInfixOperatorName
entryRuleEssentialOCLInfixOperatorName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEssentialOCLInfixOperatorNameRule()); }
	iv_ruleEssentialOCLInfixOperatorName=ruleEssentialOCLInfixOperatorName
	{ $current=$iv_ruleEssentialOCLInfixOperatorName.current.getText(); }
	EOF;

// Rule EssentialOCLInfixOperatorName
ruleEssentialOCLInfixOperatorName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getAsteriskKeyword_0());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getSolidusKeyword_1());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getPlusSignKeyword_2());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getHyphenMinusKeyword_3());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getGreaterThanSignKeyword_4());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getLessThanSignKeyword_5());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getGreaterThanSignEqualsSignKeyword_6());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getLessThanSignEqualsSignKeyword_7());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getEqualsSignKeyword_8());
		}
		    |
		kw=':='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getColonEqualsSignKeyword_9());
		}
		    |
		kw='<>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getLessThanSignGreaterThanSignKeyword_10());
		}
		    |
		kw='and'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getAndKeyword_11());
		}
		    |
		kw='and2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getAnd2Keyword_12());
		}
		    |
		kw='implies'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getImpliesKeyword_13());
		}
		    |
		kw='implies2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getImplies2Keyword_14());
		}
		    |
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getOrKeyword_15());
		}
		    |
		kw='or2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getOr2Keyword_16());
		}
		    |
		kw='xor'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getXorKeyword_17());
		}
		    |
		kw='xor2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLInfixOperatorNameAccess().getXor2Keyword_18());
		}
	)
;

// Entry rule entryRuleEssentialOCLNavigationOperatorName
entryRuleEssentialOCLNavigationOperatorName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEssentialOCLNavigationOperatorNameRule()); }
	iv_ruleEssentialOCLNavigationOperatorName=ruleEssentialOCLNavigationOperatorName
	{ $current=$iv_ruleEssentialOCLNavigationOperatorName.current.getText(); }
	EOF;

// Rule EssentialOCLNavigationOperatorName
ruleEssentialOCLNavigationOperatorName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLNavigationOperatorNameAccess().getFullStopKeyword_0());
		}
		    |
		kw='->'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLNavigationOperatorNameAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		    |
		kw='?.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLNavigationOperatorNameAccess().getQuestionMarkFullStopKeyword_2());
		}
		    |
		kw='?->'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLNavigationOperatorNameAccess().getQuestionMarkHyphenMinusGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleUnaryOperatorName
entryRuleUnaryOperatorName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOperatorNameRule()); }
	iv_ruleUnaryOperatorName=ruleUnaryOperatorName
	{ $current=$iv_ruleUnaryOperatorName.current.getText(); }
	EOF;

// Rule UnaryOperatorName
ruleUnaryOperatorName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getUnaryOperatorNameAccess().getEssentialOCLUnaryOperatorNameParserRuleCall());
	}
	this_EssentialOCLUnaryOperatorName_0=ruleEssentialOCLUnaryOperatorName
	{
		$current.merge(this_EssentialOCLUnaryOperatorName_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleEssentialOCLUnaryOperatorName
entryRuleEssentialOCLUnaryOperatorName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEssentialOCLUnaryOperatorNameRule()); }
	iv_ruleEssentialOCLUnaryOperatorName=ruleEssentialOCLUnaryOperatorName
	{ $current=$iv_ruleEssentialOCLUnaryOperatorName.current.getText(); }
	EOF;

// Rule EssentialOCLUnaryOperatorName
ruleEssentialOCLUnaryOperatorName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLUnaryOperatorNameAccess().getHyphenMinusKeyword_0());
		}
		    |
		kw='not'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLUnaryOperatorNameAccess().getNotKeyword_1());
		}
		    |
		kw='not2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEssentialOCLUnaryOperatorNameAccess().getNot2Keyword_2());
		}
	)
;

// Entry rule entryRuleEssentialOCLUnrestrictedName
entryRuleEssentialOCLUnrestrictedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEssentialOCLUnrestrictedNameRule()); }
	iv_ruleEssentialOCLUnrestrictedName=ruleEssentialOCLUnrestrictedName
	{ $current=$iv_ruleEssentialOCLUnrestrictedName.current.getText(); }
	EOF;

// Rule EssentialOCLUnrestrictedName
ruleEssentialOCLUnrestrictedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getEssentialOCLUnrestrictedNameAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleUnrestrictedName
entryRuleUnrestrictedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnrestrictedNameRule()); }
	iv_ruleUnrestrictedName=ruleUnrestrictedName
	{ $current=$iv_ruleUnrestrictedName.current.getText(); }
	EOF;

// Rule UnrestrictedName
ruleUnrestrictedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getUnrestrictedNameAccess().getEssentialOCLUnrestrictedNameParserRuleCall());
	}
	this_EssentialOCLUnrestrictedName_0=ruleEssentialOCLUnrestrictedName
	{
		$current.merge(this_EssentialOCLUnrestrictedName_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleCollectionPatternCS
entryRuleCollectionPatternCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionPatternCSRule()); }
	iv_ruleCollectionPatternCS=ruleCollectionPatternCS
	{ $current=$iv_ruleCollectionPatternCS.current; }
	EOF;

// Rule CollectionPatternCS
ruleCollectionPatternCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionPatternCSAccess().getOwnedTypeCollectionTypeCSParserRuleCall_0_0());
				}
				lv_ownedType_0_0=ruleCollectionTypeCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionPatternCSRule());
					}
					set(
						$current,
						"ownedType",
						lv_ownedType_0_0,
						"modelConverter.use_language.USE.CollectionTypeCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCollectionPatternCSAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCollectionPatternCSAccess().getOwnedPartsPatternExpCSParserRuleCall_2_0_0());
					}
					lv_ownedParts_2_0=rulePatternExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCollectionPatternCSRule());
						}
						add(
							$current,
							"ownedParts",
							lv_ownedParts_2_0,
							"modelConverter.use_language.USE.PatternExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getCollectionPatternCSAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCollectionPatternCSAccess().getOwnedPartsPatternExpCSParserRuleCall_2_1_1_0());
						}
						lv_ownedParts_4_0=rulePatternExpCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCollectionPatternCSRule());
							}
							add(
								$current,
								"ownedParts",
								lv_ownedParts_4_0,
								"modelConverter.use_language.USE.PatternExpCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			(
				otherlv_5='++'
				{
					newLeafNode(otherlv_5, grammarAccess.getCollectionPatternCSAccess().getPlusSignPlusSignKeyword_2_2_0());
				}
				(
					(
						lv_restVariableName_6_0=RULE_ID
						{
							newLeafNode(lv_restVariableName_6_0, grammarAccess.getCollectionPatternCSAccess().getRestVariableNameIDTerminalRuleCall_2_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCollectionPatternCSRule());
							}
							setWithLastConsumed(
								$current,
								"restVariableName",
								lv_restVariableName_6_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getCollectionPatternCSAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulePatternExpCS
entryRulePatternExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternExpCSRule()); }
	iv_rulePatternExpCS=rulePatternExpCS
	{ $current=$iv_rulePatternExpCS.current; }
	EOF;

// Rule PatternExpCS
rulePatternExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternExpCSAccess().getPatternVariableNameUnrestrictedNameParserRuleCall_0_0());
				}
				lv_patternVariableName_0_0=ruleUnrestrictedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternExpCSRule());
					}
					set(
						$current,
						"patternVariableName",
						lv_patternVariableName_0_0,
						"modelConverter.use_language.USE.UnrestrictedName");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getPatternExpCSAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternExpCSAccess().getOwnedPatternTypeTypeExpCSParserRuleCall_2_0());
				}
				lv_ownedPatternType_2_0=ruleTypeExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternExpCSRule());
					}
					set(
						$current,
						"ownedPatternType",
						lv_ownedPatternType_2_0,
						"modelConverter.use_language.USE.TypeExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypeExpCS
entryRuleTypeExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeExpCSRule()); }
	iv_ruleTypeExpCS=ruleTypeExpCS
	{ $current=$iv_ruleTypeExpCS.current; }
	EOF;

// Rule TypeExpCS
ruleTypeExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeExpCSAccess().getTypeExpWithoutMultiplicityCSParserRuleCall_0());
		}
		this_TypeExpWithoutMultiplicityCS_0=ruleTypeExpWithoutMultiplicityCS
		{
			$current = $this_TypeExpWithoutMultiplicityCS_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeExpCSAccess().getOwnedMultiplicityMultiplicityCSParserRuleCall_1_0());
				}
				lv_ownedMultiplicity_1_0=ruleMultiplicityCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeExpCSRule());
					}
					set(
						$current,
						"ownedMultiplicity",
						lv_ownedMultiplicity_1_0,
						"modelConverter.use_language.USE.MultiplicityCS");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleTypeExpWithoutMultiplicityCS
entryRuleTypeExpWithoutMultiplicityCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeExpWithoutMultiplicityCSRule()); }
	iv_ruleTypeExpWithoutMultiplicityCS=ruleTypeExpWithoutMultiplicityCS
	{ $current=$iv_ruleTypeExpWithoutMultiplicityCS.current; }
	EOF;

// Rule TypeExpWithoutMultiplicityCS
ruleTypeExpWithoutMultiplicityCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeExpWithoutMultiplicityCSAccess().getTypeNameExpCSParserRuleCall_0());
		}
		this_TypeNameExpCS_0=ruleTypeNameExpCS
		{
			$current = $this_TypeNameExpCS_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeExpWithoutMultiplicityCSAccess().getTypeLiteralCSParserRuleCall_1());
		}
		this_TypeLiteralCS_1=ruleTypeLiteralCS
		{
			$current = $this_TypeLiteralCS_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeExpWithoutMultiplicityCSAccess().getCollectionPatternCSParserRuleCall_2());
		}
		this_CollectionPatternCS_2=ruleCollectionPatternCS
		{
			$current = $this_CollectionPatternCS_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypeLiteralCS
entryRuleTypeLiteralCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeLiteralCSRule()); }
	iv_ruleTypeLiteralCS=ruleTypeLiteralCS
	{ $current=$iv_ruleTypeLiteralCS.current; }
	EOF;

// Rule TypeLiteralCS
ruleTypeLiteralCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeLiteralCSAccess().getPrimitiveTypeCSParserRuleCall_0());
		}
		this_PrimitiveTypeCS_0=rulePrimitiveTypeCS
		{
			$current = $this_PrimitiveTypeCS_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeLiteralCSAccess().getCollectionTypeCSParserRuleCall_1());
		}
		this_CollectionTypeCS_1=ruleCollectionTypeCS
		{
			$current = $this_CollectionTypeCS_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeLiteralCSAccess().getMapTypeCSParserRuleCall_2());
		}
		this_MapTypeCS_2=ruleMapTypeCS
		{
			$current = $this_MapTypeCS_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeLiteralCSAccess().getTupleTypeCSParserRuleCall_3());
		}
		this_TupleTypeCS_3=ruleTupleTypeCS
		{
			$current = $this_TupleTypeCS_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypeLiteralExpCS
entryRuleTypeLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeLiteralExpCSRule()); }
	iv_ruleTypeLiteralExpCS=ruleTypeLiteralExpCS
	{ $current=$iv_ruleTypeLiteralExpCS.current; }
	EOF;

// Rule TypeLiteralExpCS
ruleTypeLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTypeLiteralExpCSAccess().getOwnedTypeTypeLiteralWithMultiplicityCSParserRuleCall_0());
			}
			lv_ownedType_0_0=ruleTypeLiteralWithMultiplicityCS
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getTypeLiteralExpCSRule());
				}
				set(
					$current,
					"ownedType",
					lv_ownedType_0_0,
					"modelConverter.use_language.USE.TypeLiteralWithMultiplicityCS");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleTypeLiteralWithMultiplicityCS
entryRuleTypeLiteralWithMultiplicityCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeLiteralWithMultiplicityCSRule()); }
	iv_ruleTypeLiteralWithMultiplicityCS=ruleTypeLiteralWithMultiplicityCS
	{ $current=$iv_ruleTypeLiteralWithMultiplicityCS.current; }
	EOF;

// Rule TypeLiteralWithMultiplicityCS
ruleTypeLiteralWithMultiplicityCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeLiteralWithMultiplicityCSAccess().getTypeLiteralCSParserRuleCall_0());
		}
		this_TypeLiteralCS_0=ruleTypeLiteralCS
		{
			$current = $this_TypeLiteralCS_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeLiteralWithMultiplicityCSAccess().getOwnedMultiplicityMultiplicityCSParserRuleCall_1_0());
				}
				lv_ownedMultiplicity_1_0=ruleMultiplicityCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeLiteralWithMultiplicityCSRule());
					}
					set(
						$current,
						"ownedMultiplicity",
						lv_ownedMultiplicity_1_0,
						"modelConverter.use_language.USE.MultiplicityCS");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleTypeNameExpCS
entryRuleTypeNameExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameExpCSRule()); }
	iv_ruleTypeNameExpCS=ruleTypeNameExpCS
	{ $current=$iv_ruleTypeNameExpCS.current; }
	EOF;

// Rule TypeNameExpCS
ruleTypeNameExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeNameExpCSAccess().getOwnedPathNamePathNameCSParserRuleCall_0_0());
				}
				lv_ownedPathName_0_0=rulePathNameCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeNameExpCSRule());
					}
					set(
						$current,
						"ownedPathName",
						lv_ownedPathName_0_0,
						"modelConverter.use_language.USE.PathNameCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeNameExpCSAccess().getOwnedCurlyBracketedClauseCurlyBracketedClauseCSParserRuleCall_1_0_0());
					}
					lv_ownedCurlyBracketedClause_1_0=ruleCurlyBracketedClauseCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeNameExpCSRule());
						}
						set(
							$current,
							"ownedCurlyBracketedClause",
							lv_ownedCurlyBracketedClause_1_0,
							"modelConverter.use_language.USE.CurlyBracketedClauseCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2='{'
				{
					newLeafNode(otherlv_2, grammarAccess.getTypeNameExpCSAccess().getLeftCurlyBracketKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTypeNameExpCSAccess().getOwnedPatternGuardExpCSParserRuleCall_1_1_1_0());
						}
						lv_ownedPatternGuard_3_0=ruleExpCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTypeNameExpCSRule());
							}
							set(
								$current,
								"ownedPatternGuard",
								lv_ownedPatternGuard_3_0,
								"modelConverter.use_language.USE.ExpCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_4='}'
				{
					newLeafNode(otherlv_4, grammarAccess.getTypeNameExpCSAccess().getRightCurlyBracketKeyword_1_1_2());
				}
			)?
		)?
	)
;

// Entry rule entryRuleCurlyBracketedClauseCS
entryRuleCurlyBracketedClauseCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCurlyBracketedClauseCSRule()); }
	iv_ruleCurlyBracketedClauseCS=ruleCurlyBracketedClauseCS
	{ $current=$iv_ruleCurlyBracketedClauseCS.current; }
	EOF;

// Rule CurlyBracketedClauseCS
ruleCurlyBracketedClauseCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getCurlyBracketedClauseCSAccess().getCurlyBracketedClauseCSAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCurlyBracketedClauseCSAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCurlyBracketedClauseCSAccess().getOwnedPartsShadowPartCSParserRuleCall_2_0_0());
					}
					lv_ownedParts_2_0=ruleShadowPartCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCurlyBracketedClauseCSRule());
						}
						add(
							$current,
							"ownedParts",
							lv_ownedParts_2_0,
							"modelConverter.use_language.USE.ShadowPartCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getCurlyBracketedClauseCSAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCurlyBracketedClauseCSAccess().getOwnedPartsShadowPartCSParserRuleCall_2_1_1_0());
						}
						lv_ownedParts_4_0=ruleShadowPartCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCurlyBracketedClauseCSRule());
							}
							add(
								$current,
								"ownedParts",
								lv_ownedParts_4_0,
								"modelConverter.use_language.USE.ShadowPartCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getCurlyBracketedClauseCSAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleShadowPartCS
entryRuleShadowPartCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShadowPartCSRule()); }
	iv_ruleShadowPartCS=ruleShadowPartCS
	{ $current=$iv_ruleShadowPartCS.current; }
	EOF;

// Rule ShadowPartCS
ruleShadowPartCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_referredProperty_0_0=RULE_ID
					{
						newLeafNode(lv_referredProperty_0_0, grammarAccess.getShadowPartCSAccess().getReferredPropertyIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getShadowPartCSRule());
						}
						setWithLastConsumed(
							$current,
							"referredProperty",
							lv_referredProperty_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getShadowPartCSAccess().getEqualsSignKeyword_0_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getShadowPartCSAccess().getOwnedInitExpressionExpCSParserRuleCall_0_2_0_0());
						}
						lv_ownedInitExpression_2_1=ruleExpCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShadowPartCSRule());
							}
							set(
								$current,
								"ownedInitExpression",
								lv_ownedInitExpression_2_1,
								"modelConverter.use_language.USE.ExpCS");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getShadowPartCSAccess().getOwnedInitExpressionPatternExpCSParserRuleCall_0_2_0_1());
						}
						lv_ownedInitExpression_2_2=rulePatternExpCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShadowPartCSRule());
							}
							set(
								$current,
								"ownedInitExpression",
								lv_ownedInitExpression_2_2,
								"modelConverter.use_language.USE.PatternExpCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getShadowPartCSAccess().getOwnedInitExpressionStringLiteralExpCSParserRuleCall_1_0());
				}
				lv_ownedInitExpression_3_0=ruleStringLiteralExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShadowPartCSRule());
					}
					set(
						$current,
						"ownedInitExpression",
						lv_ownedInitExpression_3_0,
						"modelConverter.use_language.USE.StringLiteralExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStringLiteralExpCS
entryRuleStringLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralExpCSRule()); }
	iv_ruleStringLiteralExpCS=ruleStringLiteralExpCS
	{ $current=$iv_ruleStringLiteralExpCS.current; }
	EOF;

// Rule StringLiteralExpCS
ruleStringLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStringLiteralExpCSAccess().getSegmentsStringLiteralParserRuleCall_0());
			}
			lv_segments_0_0=ruleStringLiteral
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getStringLiteralExpCSRule());
				}
				add(
					$current,
					"segments",
					lv_segments_0_0,
					"modelConverter.use_language.USE.StringLiteral");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current.getText(); }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleMultiplicityBoundsCS
entryRuleMultiplicityBoundsCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicityBoundsCSRule()); }
	iv_ruleMultiplicityBoundsCS=ruleMultiplicityBoundsCS
	{ $current=$iv_ruleMultiplicityBoundsCS.current; }
	EOF;

// Rule MultiplicityBoundsCS
ruleMultiplicityBoundsCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicityBoundsCSAccess().getLowerBoundLOWERParserRuleCall_0_0());
				}
				lv_lowerBound_0_0=ruleLOWER
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicityBoundsCSRule());
					}
					set(
						$current,
						"lowerBound",
						lv_lowerBound_0_0,
						"modelConverter.use_language.USE.LOWER");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='..'
			{
				newLeafNode(otherlv_1, grammarAccess.getMultiplicityBoundsCSAccess().getFullStopFullStopKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicityBoundsCSAccess().getUpperBoundUPPERParserRuleCall_1_1_0());
					}
					lv_upperBound_2_0=ruleUPPER
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicityBoundsCSRule());
						}
						set(
							$current,
							"upperBound",
							lv_upperBound_2_0,
							"modelConverter.use_language.USE.UPPER");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleMultiplicityCS
entryRuleMultiplicityCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicityCSRule()); }
	iv_ruleMultiplicityCS=ruleMultiplicityCS
	{ $current=$iv_ruleMultiplicityCS.current; }
	EOF;

// Rule MultiplicityCS
ruleMultiplicityCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getMultiplicityCSAccess().getLeftSquareBracketKeyword_0());
		}
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getMultiplicityCSAccess().getMultiplicityBoundsCSParserRuleCall_1_0());
			}
			this_MultiplicityBoundsCS_1=ruleMultiplicityBoundsCS
			{
				$current = $this_MultiplicityBoundsCS_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getMultiplicityCSAccess().getMultiplicityStringCSParserRuleCall_1_1());
			}
			this_MultiplicityStringCS_2=ruleMultiplicityStringCS
			{
				$current = $this_MultiplicityStringCS_2.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				(
					lv_symbol_3_1='|?'
					{
						newLeafNode(lv_symbol_3_1, grammarAccess.getMultiplicityCSAccess().getSymbolVerticalLineQuestionMarkKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultiplicityCSRule());
						}
						setWithLastConsumed($current, "symbol", lv_symbol_3_1, null);
					}
					    |
					lv_symbol_3_2='|1'
					{
						newLeafNode(lv_symbol_3_2, grammarAccess.getMultiplicityCSAccess().getSymbol1Keyword_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultiplicityCSRule());
						}
						setWithLastConsumed($current, "symbol", lv_symbol_3_2, null);
					}
				)
			)
		)?
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getMultiplicityCSAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleMultiplicityStringCS
entryRuleMultiplicityStringCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicityStringCSRule()); }
	iv_ruleMultiplicityStringCS=ruleMultiplicityStringCS
	{ $current=$iv_ruleMultiplicityStringCS.current; }
	EOF;

// Rule MultiplicityStringCS
ruleMultiplicityStringCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_stringBounds_0_1='*'
				{
					newLeafNode(lv_stringBounds_0_1, grammarAccess.getMultiplicityStringCSAccess().getStringBoundsAsteriskKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiplicityStringCSRule());
					}
					setWithLastConsumed($current, "stringBounds", lv_stringBounds_0_1, null);
				}
				    |
				lv_stringBounds_0_2='+'
				{
					newLeafNode(lv_stringBounds_0_2, grammarAccess.getMultiplicityStringCSAccess().getStringBoundsPlusSignKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiplicityStringCSRule());
					}
					setWithLastConsumed($current, "stringBounds", lv_stringBounds_0_2, null);
				}
				    |
				lv_stringBounds_0_3='?'
				{
					newLeafNode(lv_stringBounds_0_3, grammarAccess.getMultiplicityStringCSAccess().getStringBoundsQuestionMarkKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiplicityStringCSRule());
					}
					setWithLastConsumed($current, "stringBounds", lv_stringBounds_0_3, null);
				}
			)
		)
	)
;

// Entry rule entryRulePathNameCS
entryRulePathNameCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPathNameCSRule()); }
	iv_rulePathNameCS=rulePathNameCS
	{ $current=$iv_rulePathNameCS.current; }
	EOF;

// Rule PathNameCS
rulePathNameCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_ownedPathElements_0_0=RULE_ID
				{
					newLeafNode(lv_ownedPathElements_0_0, grammarAccess.getPathNameCSAccess().getOwnedPathElementsIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPathNameCSRule());
					}
					addWithLastConsumed(
						$current,
						"ownedPathElements",
						lv_ownedPathElements_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='::'
			{
				newLeafNode(otherlv_1, grammarAccess.getPathNameCSAccess().getColonColonKeyword_1_0());
			}
			(
				(
					lv_ownedPathElements_2_0=RULE_ID
					{
						newLeafNode(lv_ownedPathElements_2_0, grammarAccess.getPathNameCSAccess().getOwnedPathElementsIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPathNameCSRule());
						}
						addWithLastConsumed(
							$current,
							"ownedPathElements",
							lv_ownedPathElements_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUPPER
entryRuleUPPER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUPPERRule()); }
	iv_ruleUPPER=ruleUPPER
	{ $current=$iv_ruleUPPER.current.getText(); }
	EOF;

// Rule UPPER
ruleUPPER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUPPERAccess().getIntToStringParserRuleCall_0());
		}
		this_IntToString_0=ruleIntToString
		{
			$current.merge(this_IntToString_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUPPERAccess().getAsteriskKeyword_1());
		}
	)
;

// Entry rule entryRuleLOWER
entryRuleLOWER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLOWERRule()); }
	iv_ruleLOWER=ruleLOWER
	{ $current=$iv_ruleLOWER.current.getText(); }
	EOF;

// Rule LOWER
ruleLOWER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getLOWERAccess().getIntToStringParserRuleCall());
	}
	this_IntToString_0=ruleIntToString
	{
		$current.merge(this_IntToString_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpCS
entryRuleExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpCSRule()); }
	iv_ruleExpCS=ruleExpCS
	{ $current=$iv_ruleExpCS.current; }
	EOF;

// Rule ExpCS
ruleExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getExpCSAccess().getPrefixedPrimaryExpCSParserRuleCall_0_0());
			}
			this_PrefixedPrimaryExpCS_0=rulePrefixedPrimaryExpCS
			{
				$current = $this_PrefixedPrimaryExpCS_0.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						/* */
					}
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpCSAccess().getInfixExpCSOwnedLeftAction_0_1_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getExpCSAccess().getOperatorBinaryOperatorNameParserRuleCall_0_1_1_0());
						}
						lv_operator_2_0=ruleBinaryOperatorName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpCSRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"modelConverter.use_language.USE.BinaryOperatorName");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getExpCSAccess().getOwnedRightExpCSParserRuleCall_0_1_2_0());
						}
						lv_ownedRight_3_0=ruleExpCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpCSRule());
							}
							set(
								$current,
								"ownedRight",
								lv_ownedRight_3_0,
								"modelConverter.use_language.USE.ExpCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpCSAccess().getPrefixedLetExpCSParserRuleCall_1());
		}
		this_PrefixedLetExpCS_4=rulePrefixedLetExpCS
		{
			$current = $this_PrefixedLetExpCS_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrefixedLetExpCS
entryRulePrefixedLetExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrefixedLetExpCSRule()); }
	iv_rulePrefixedLetExpCS=rulePrefixedLetExpCS
	{ $current=$iv_rulePrefixedLetExpCS.current; }
	EOF;

// Rule PrefixedLetExpCS
rulePrefixedLetExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrefixedLetExpCSAccess().getPrefixExpCSAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrefixedLetExpCSAccess().getNameUnaryOperatorNameParserRuleCall_0_1_0());
					}
					lv_name_1_0=ruleUnaryOperatorName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrefixedLetExpCSRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"modelConverter.use_language.USE.UnaryOperatorName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrefixedLetExpCSAccess().getOwnedRightPrefixedLetExpCSParserRuleCall_0_2_0());
					}
					lv_ownedRight_2_0=rulePrefixedLetExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrefixedLetExpCSRule());
						}
						set(
							$current,
							"ownedRight",
							lv_ownedRight_2_0,
							"modelConverter.use_language.USE.PrefixedLetExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrefixedLetExpCSAccess().getLetExpCSParserRuleCall_1());
		}
		this_LetExpCS_3=ruleLetExpCS
		{
			$current = $this_LetExpCS_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrefixedPrimaryExpCS
entryRulePrefixedPrimaryExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrefixedPrimaryExpCSRule()); }
	iv_rulePrefixedPrimaryExpCS=rulePrefixedPrimaryExpCS
	{ $current=$iv_rulePrefixedPrimaryExpCS.current; }
	EOF;

// Rule PrefixedPrimaryExpCS
rulePrefixedPrimaryExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrefixedPrimaryExpCSAccess().getPrefixExpCSAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrefixedPrimaryExpCSAccess().getNameUnaryOperatorNameParserRuleCall_0_1_0());
					}
					lv_name_1_0=ruleUnaryOperatorName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrefixedPrimaryExpCSRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"modelConverter.use_language.USE.UnaryOperatorName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrefixedPrimaryExpCSAccess().getOwnedRightPrefixedPrimaryExpCSParserRuleCall_0_2_0());
					}
					lv_ownedRight_2_0=rulePrefixedPrimaryExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrefixedPrimaryExpCSRule());
						}
						set(
							$current,
							"ownedRight",
							lv_ownedRight_2_0,
							"modelConverter.use_language.USE.PrefixedPrimaryExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrefixedPrimaryExpCSAccess().getPrimaryExpCSParserRuleCall_1());
		}
		this_PrimaryExpCS_3=rulePrimaryExpCS
		{
			$current = $this_PrimaryExpCS_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimaryExpCS
entryRulePrimaryExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpCSRule()); }
	iv_rulePrimaryExpCS=rulePrimaryExpCS
	{ $current=$iv_rulePrimaryExpCS.current; }
	EOF;

// Rule PrimaryExpCS
rulePrimaryExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExpCSAccess().getNestedExpCSParserRuleCall_0());
		}
		this_NestedExpCS_0=ruleNestedExpCS
		{
			$current = $this_NestedExpCS_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExpCSAccess().getIfExpCSParserRuleCall_1());
		}
		this_IfExpCS_1=ruleIfExpCS
		{
			$current = $this_IfExpCS_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExpCSAccess().getPrimitiveLiteralExpCSParserRuleCall_2());
		}
		this_PrimitiveLiteralExpCS_2=rulePrimitiveLiteralExpCS
		{
			$current = $this_PrimitiveLiteralExpCS_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExpCSAccess().getTupleLiteralExpCSParserRuleCall_3());
		}
		this_TupleLiteralExpCS_3=ruleTupleLiteralExpCS
		{
			$current = $this_TupleLiteralExpCS_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExpCSAccess().getMapLiteralExpCSParserRuleCall_4());
		}
		this_MapLiteralExpCS_4=ruleMapLiteralExpCS
		{
			$current = $this_MapLiteralExpCS_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExpCSAccess().getCollectionLiteralExpCSParserRuleCall_5());
		}
		this_CollectionLiteralExpCS_5=ruleCollectionLiteralExpCS
		{
			$current = $this_CollectionLiteralExpCS_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExpCSAccess().getLambdaLiteralExpCSParserRuleCall_6());
		}
		this_LambdaLiteralExpCS_6=ruleLambdaLiteralExpCS
		{
			$current = $this_LambdaLiteralExpCS_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExpCSAccess().getTypeLiteralExpCSParserRuleCall_7());
		}
		this_TypeLiteralExpCS_7=ruleTypeLiteralExpCS
		{
			$current = $this_TypeLiteralExpCS_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExpCSAccess().getNameExpCSParserRuleCall_8());
		}
		this_NameExpCS_8=ruleNameExpCS
		{
			$current = $this_NameExpCS_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimitiveLiteralExpCS
entryRulePrimitiveLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveLiteralExpCSRule()); }
	iv_rulePrimitiveLiteralExpCS=rulePrimitiveLiteralExpCS
	{ $current=$iv_rulePrimitiveLiteralExpCS.current; }
	EOF;

// Rule PrimitiveLiteralExpCS
rulePrimitiveLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getNumberLiteralExpCSParserRuleCall_0());
		}
		this_NumberLiteralExpCS_0=ruleNumberLiteralExpCS
		{
			$current = $this_NumberLiteralExpCS_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getStringLiteralExpCSParserRuleCall_1());
		}
		this_StringLiteralExpCS_1=ruleStringLiteralExpCS
		{
			$current = $this_StringLiteralExpCS_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getBooleanLiteralExpCSParserRuleCall_2());
		}
		this_BooleanLiteralExpCS_2=ruleBooleanLiteralExpCS
		{
			$current = $this_BooleanLiteralExpCS_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getUnlimitedNaturalLiteralExpCSParserRuleCall_3());
		}
		this_UnlimitedNaturalLiteralExpCS_3=ruleUnlimitedNaturalLiteralExpCS
		{
			$current = $this_UnlimitedNaturalLiteralExpCS_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getInvalidLiteralExpCSParserRuleCall_4());
		}
		this_InvalidLiteralExpCS_4=ruleInvalidLiteralExpCS
		{
			$current = $this_InvalidLiteralExpCS_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getNullLiteralExpCSParserRuleCall_5());
		}
		this_NullLiteralExpCS_5=ruleNullLiteralExpCS
		{
			$current = $this_NullLiteralExpCS_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNameExpCS
entryRuleNameExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNameExpCSRule()); }
	iv_ruleNameExpCS=ruleNameExpCS
	{ $current=$iv_ruleNameExpCS.current; }
	EOF;

// Rule NameExpCS
ruleNameExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNameExpCSAccess().getOwnedPathNamePathNameCSParserRuleCall_0_0());
				}
				lv_ownedPathName_0_0=rulePathNameCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNameExpCSRule());
					}
					set(
						$current,
						"ownedPathName",
						lv_ownedPathName_0_0,
						"modelConverter.use_language.USE.PathNameCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNameExpCSAccess().getOwnedSquareBracketedClausesSquareBracketedClauseCSParserRuleCall_1_0());
				}
				lv_ownedSquareBracketedClauses_1_0=ruleSquareBracketedClauseCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNameExpCSRule());
					}
					add(
						$current,
						"ownedSquareBracketedClauses",
						lv_ownedSquareBracketedClauses_1_0,
						"modelConverter.use_language.USE.SquareBracketedClauseCS");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getNameExpCSAccess().getOwnedRoundBracketedClauseRoundBracketedClauseCSParserRuleCall_2_0());
				}
				lv_ownedRoundBracketedClause_2_0=ruleRoundBracketedClauseCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNameExpCSRule());
					}
					set(
						$current,
						"ownedRoundBracketedClause",
						lv_ownedRoundBracketedClause_2_0,
						"modelConverter.use_language.USE.RoundBracketedClauseCS");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getNameExpCSAccess().getOwnedCurlyBracketedClauseCurlyBracketedClauseCSParserRuleCall_3_0());
				}
				lv_ownedCurlyBracketedClause_3_0=ruleCurlyBracketedClauseCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNameExpCSRule());
					}
					set(
						$current,
						"ownedCurlyBracketedClause",
						lv_ownedCurlyBracketedClause_3_0,
						"modelConverter.use_language.USE.CurlyBracketedClauseCS");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					lv_isPre_4_0='@'
					{
						newLeafNode(lv_isPre_4_0, grammarAccess.getNameExpCSAccess().getIsPreCommercialAtKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNameExpCSRule());
						}
						setWithLastConsumed($current, "isPre", lv_isPre_4_0 != null, "@");
					}
				)
			)
			(
				(
					lv_pre_5_0='pre'
					{
						newLeafNode(lv_pre_5_0, grammarAccess.getNameExpCSAccess().getPrePreKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNameExpCSRule());
						}
						setWithLastConsumed($current, "pre", lv_pre_5_0 != null, "pre");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSquareBracketedClauseCS
entryRuleSquareBracketedClauseCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSquareBracketedClauseCSRule()); }
	iv_ruleSquareBracketedClauseCS=ruleSquareBracketedClauseCS
	{ $current=$iv_ruleSquareBracketedClauseCS.current; }
	EOF;

// Rule SquareBracketedClauseCS
ruleSquareBracketedClauseCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getSquareBracketedClauseCSAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSquareBracketedClauseCSAccess().getOwnedTermsExpCSParserRuleCall_1_0());
				}
				lv_ownedTerms_1_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSquareBracketedClauseCSRule());
					}
					add(
						$current,
						"ownedTerms",
						lv_ownedTerms_1_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getSquareBracketedClauseCSAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSquareBracketedClauseCSAccess().getOwnedTermsExpCSParserRuleCall_2_1_0());
					}
					lv_ownedTerms_3_0=ruleExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSquareBracketedClauseCSRule());
						}
						add(
							$current,
							"ownedTerms",
							lv_ownedTerms_3_0,
							"modelConverter.use_language.USE.ExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getSquareBracketedClauseCSAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleCollectionLiteralExpCS
entryRuleCollectionLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionLiteralExpCSRule()); }
	iv_ruleCollectionLiteralExpCS=ruleCollectionLiteralExpCS
	{ $current=$iv_ruleCollectionLiteralExpCS.current; }
	EOF;

// Rule CollectionLiteralExpCS
ruleCollectionLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getOwnedTypeCollectionTypeCSParserRuleCall_0_0());
				}
				lv_ownedType_0_0=ruleCollectionTypeCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionLiteralExpCSRule());
					}
					set(
						$current,
						"ownedType",
						lv_ownedType_0_0,
						"modelConverter.use_language.USE.CollectionTypeCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCollectionLiteralExpCSAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getOwnedPartsCollectionLiteralPartCSParserRuleCall_2_0_0());
					}
					lv_ownedParts_2_0=ruleCollectionLiteralPartCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCollectionLiteralExpCSRule());
						}
						add(
							$current,
							"ownedParts",
							lv_ownedParts_2_0,
							"modelConverter.use_language.USE.CollectionLiteralPartCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getCollectionLiteralExpCSAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getOwnedPartsCollectionLiteralPartCSParserRuleCall_2_1_1_0());
						}
						lv_ownedParts_4_0=ruleCollectionLiteralPartCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCollectionLiteralExpCSRule());
							}
							add(
								$current,
								"ownedParts",
								lv_ownedParts_4_0,
								"modelConverter.use_language.USE.CollectionLiteralPartCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getCollectionLiteralExpCSAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleCollectionLiteralPartCS
entryRuleCollectionLiteralPartCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionLiteralPartCSRule()); }
	iv_ruleCollectionLiteralPartCS=ruleCollectionLiteralPartCS
	{ $current=$iv_ruleCollectionLiteralPartCS.current; }
	EOF;

// Rule CollectionLiteralPartCS
ruleCollectionLiteralPartCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCollectionLiteralPartCSAccess().getOwnedExpressionExpCSParserRuleCall_0_0_0());
					}
					lv_ownedExpression_0_0=ruleExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCollectionLiteralPartCSRule());
						}
						set(
							$current,
							"ownedExpression",
							lv_ownedExpression_0_0,
							"modelConverter.use_language.USE.ExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_1='..'
				{
					newLeafNode(otherlv_1, grammarAccess.getCollectionLiteralPartCSAccess().getFullStopFullStopKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCollectionLiteralPartCSAccess().getOwnedLastExpressionExpCSParserRuleCall_0_1_1_0());
						}
						lv_ownedLastExpression_2_0=ruleExpCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCollectionLiteralPartCSRule());
							}
							set(
								$current,
								"ownedLastExpression",
								lv_ownedLastExpression_2_0,
								"modelConverter.use_language.USE.ExpCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionLiteralPartCSAccess().getOwnedExpressionPatternExpCSParserRuleCall_1_0());
				}
				lv_ownedExpression_3_0=rulePatternExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionLiteralPartCSRule());
					}
					set(
						$current,
						"ownedExpression",
						lv_ownedExpression_3_0,
						"modelConverter.use_language.USE.PatternExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLambdaLiteralExpCS
entryRuleLambdaLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLambdaLiteralExpCSRule()); }
	iv_ruleLambdaLiteralExpCS=ruleLambdaLiteralExpCS
	{ $current=$iv_ruleLambdaLiteralExpCS.current; }
	EOF;

// Rule LambdaLiteralExpCS
ruleLambdaLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Lambda'
		{
			newLeafNode(otherlv_0, grammarAccess.getLambdaLiteralExpCSAccess().getLambdaKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getLambdaLiteralExpCSAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLambdaLiteralExpCSAccess().getOwnedExpressionCSExpCSParserRuleCall_2_0());
				}
				lv_ownedExpressionCS_2_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLambdaLiteralExpCSRule());
					}
					set(
						$current,
						"ownedExpressionCS",
						lv_ownedExpressionCS_2_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getLambdaLiteralExpCSAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleMapLiteralExpCS
entryRuleMapLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapLiteralExpCSRule()); }
	iv_ruleMapLiteralExpCS=ruleMapLiteralExpCS
	{ $current=$iv_ruleMapLiteralExpCS.current; }
	EOF;

// Rule MapLiteralExpCS
ruleMapLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMapLiteralExpCSAccess().getOwnedTypeMapTypeCSParserRuleCall_0_0());
				}
				lv_ownedType_0_0=ruleMapTypeCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapLiteralExpCSRule());
					}
					set(
						$current,
						"ownedType",
						lv_ownedType_0_0,
						"modelConverter.use_language.USE.MapTypeCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMapLiteralExpCSAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMapLiteralExpCSAccess().getOwnedPartsMapLiteralPartCSParserRuleCall_2_0_0());
					}
					lv_ownedParts_2_0=ruleMapLiteralPartCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMapLiteralExpCSRule());
						}
						add(
							$current,
							"ownedParts",
							lv_ownedParts_2_0,
							"modelConverter.use_language.USE.MapLiteralPartCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getMapLiteralExpCSAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMapLiteralExpCSAccess().getOwnedPartsMapLiteralPartCSParserRuleCall_2_1_1_0());
						}
						lv_ownedParts_4_0=ruleMapLiteralPartCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMapLiteralExpCSRule());
							}
							add(
								$current,
								"ownedParts",
								lv_ownedParts_4_0,
								"modelConverter.use_language.USE.MapLiteralPartCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getMapLiteralExpCSAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleMapLiteralPartCS
entryRuleMapLiteralPartCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapLiteralPartCSRule()); }
	iv_ruleMapLiteralPartCS=ruleMapLiteralPartCS
	{ $current=$iv_ruleMapLiteralPartCS.current; }
	EOF;

// Rule MapLiteralPartCS
ruleMapLiteralPartCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMapLiteralPartCSAccess().getOwnedKeyExpCSParserRuleCall_0_0());
				}
				lv_ownedKey_0_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapLiteralPartCSRule());
					}
					set(
						$current,
						"ownedKey",
						lv_ownedKey_0_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='<-'
		{
			newLeafNode(otherlv_1, grammarAccess.getMapLiteralPartCSAccess().getLessThanSignHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapLiteralPartCSAccess().getOwnedValueExpCSParserRuleCall_2_0());
				}
				lv_ownedValue_2_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapLiteralPartCSRule());
					}
					set(
						$current,
						"ownedValue",
						lv_ownedValue_2_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTupleLiteralExpCS
entryRuleTupleLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTupleLiteralExpCSRule()); }
	iv_ruleTupleLiteralExpCS=ruleTupleLiteralExpCS
	{ $current=$iv_ruleTupleLiteralExpCS.current; }
	EOF;

// Rule TupleLiteralExpCS
ruleTupleLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Tuple'
		{
			newLeafNode(otherlv_0, grammarAccess.getTupleLiteralExpCSAccess().getTupleKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getTupleLiteralExpCSAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTupleLiteralExpCSAccess().getOwnedPartsTupleLiteralPartCSParserRuleCall_2_0());
				}
				lv_ownedParts_2_0=ruleTupleLiteralPartCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTupleLiteralExpCSRule());
					}
					add(
						$current,
						"ownedParts",
						lv_ownedParts_2_0,
						"modelConverter.use_language.USE.TupleLiteralPartCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getTupleLiteralExpCSAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTupleLiteralExpCSAccess().getOwnedPartsTupleLiteralPartCSParserRuleCall_3_1_0());
					}
					lv_ownedParts_4_0=ruleTupleLiteralPartCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTupleLiteralExpCSRule());
						}
						add(
							$current,
							"ownedParts",
							lv_ownedParts_4_0,
							"modelConverter.use_language.USE.TupleLiteralPartCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getTupleLiteralExpCSAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTupleLiteralPartCS
entryRuleTupleLiteralPartCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTupleLiteralPartCSRule()); }
	iv_ruleTupleLiteralPartCS=ruleTupleLiteralPartCS
	{ $current=$iv_ruleTupleLiteralPartCS.current; }
	EOF;

// Rule TupleLiteralPartCS
ruleTupleLiteralPartCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTupleLiteralPartCSAccess().getNameUnrestrictedNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleUnrestrictedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTupleLiteralPartCSRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"modelConverter.use_language.USE.UnrestrictedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getTupleLiteralPartCSAccess().getColonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTupleLiteralPartCSAccess().getOwnedTypeTypeExpCSParserRuleCall_1_1_0());
					}
					lv_ownedType_2_0=ruleTypeExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTupleLiteralPartCSRule());
						}
						set(
							$current,
							"ownedType",
							lv_ownedType_2_0,
							"modelConverter.use_language.USE.TypeExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getTupleLiteralPartCSAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTupleLiteralPartCSAccess().getOwnedInitExpressionExpCSParserRuleCall_3_0());
				}
				lv_ownedInitExpression_4_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTupleLiteralPartCSRule());
					}
					set(
						$current,
						"ownedInitExpression",
						lv_ownedInitExpression_4_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNumberLiteralExpCS
entryRuleNumberLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralExpCSRule()); }
	iv_ruleNumberLiteralExpCS=ruleNumberLiteralExpCS
	{ $current=$iv_ruleNumberLiteralExpCS.current; }
	EOF;

// Rule NumberLiteralExpCS
ruleNumberLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNumberLiteralExpCSAccess().getValueIntToStringParserRuleCall_0());
			}
			lv_value_0_0=ruleIntToString
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getNumberLiteralExpCSRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"modelConverter.use_language.USE.IntToString");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBooleanLiteralExpCS
entryRuleBooleanLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralExpCSRule()); }
	iv_ruleBooleanLiteralExpCS=ruleBooleanLiteralExpCS
	{ $current=$iv_ruleBooleanLiteralExpCS.current; }
	EOF;

// Rule BooleanLiteralExpCS
ruleBooleanLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_symbol_0_0='true'
				{
					newLeafNode(lv_symbol_0_0, grammarAccess.getBooleanLiteralExpCSAccess().getSymbolTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanLiteralExpCSRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_0_0, "true");
				}
			)
		)
		    |
		(
			(
				lv_symbol_1_0='false'
				{
					newLeafNode(lv_symbol_1_0, grammarAccess.getBooleanLiteralExpCSAccess().getSymbolFalseKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanLiteralExpCSRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_1_0, "false");
				}
			)
		)
	)
;

// Entry rule entryRuleUnlimitedNaturalLiteralExpCS
entryRuleUnlimitedNaturalLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnlimitedNaturalLiteralExpCSRule()); }
	iv_ruleUnlimitedNaturalLiteralExpCS=ruleUnlimitedNaturalLiteralExpCS
	{ $current=$iv_ruleUnlimitedNaturalLiteralExpCS.current; }
	EOF;

// Rule UnlimitedNaturalLiteralExpCS
ruleUnlimitedNaturalLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getUnlimitedNaturalLiteralExpCSAccess().getUnlimitedNaturalLiteralExpCSAction_0(),
					$current);
			}
		)
		otherlv_1='*'
		{
			newLeafNode(otherlv_1, grammarAccess.getUnlimitedNaturalLiteralExpCSAccess().getAsteriskKeyword_1());
		}
	)
;

// Entry rule entryRuleInvalidLiteralExpCS
entryRuleInvalidLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInvalidLiteralExpCSRule()); }
	iv_ruleInvalidLiteralExpCS=ruleInvalidLiteralExpCS
	{ $current=$iv_ruleInvalidLiteralExpCS.current; }
	EOF;

// Rule InvalidLiteralExpCS
ruleInvalidLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getInvalidLiteralExpCSAccess().getInvalidLiteralExpCSAction_0(),
					$current);
			}
		)
		otherlv_1='invalid'
		{
			newLeafNode(otherlv_1, grammarAccess.getInvalidLiteralExpCSAccess().getInvalidKeyword_1());
		}
	)
;

// Entry rule entryRuleNullLiteralExpCS
entryRuleNullLiteralExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNullLiteralExpCSRule()); }
	iv_ruleNullLiteralExpCS=ruleNullLiteralExpCS
	{ $current=$iv_ruleNullLiteralExpCS.current; }
	EOF;

// Rule NullLiteralExpCS
ruleNullLiteralExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getNullLiteralExpCSAccess().getNullLiteralExpCSAction_0(),
					$current);
			}
		)
		otherlv_1='null'
		{
			newLeafNode(otherlv_1, grammarAccess.getNullLiteralExpCSAccess().getNullKeyword_1());
		}
	)
;

// Entry rule entryRuleNestedExpCS
entryRuleNestedExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNestedExpCSRule()); }
	iv_ruleNestedExpCS=ruleNestedExpCS
	{ $current=$iv_ruleNestedExpCS.current; }
	EOF;

// Rule NestedExpCS
ruleNestedExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getNestedExpCSAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNestedExpCSAccess().getOwnedExpressionExpCSParserRuleCall_1_0());
				}
				lv_ownedExpression_1_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNestedExpCSRule());
					}
					set(
						$current,
						"ownedExpression",
						lv_ownedExpression_1_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getNestedExpCSAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleIfExpCS
entryRuleIfExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfExpCSRule()); }
	iv_ruleIfExpCS=ruleIfExpCS
	{ $current=$iv_ruleIfExpCS.current; }
	EOF;

// Rule IfExpCS
ruleIfExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfExpCSAccess().getIfKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getIfExpCSAccess().getOwnedConditionExpCSParserRuleCall_1_0_0());
					}
					lv_ownedCondition_1_1=ruleExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfExpCSRule());
						}
						set(
							$current,
							"ownedCondition",
							lv_ownedCondition_1_1,
							"modelConverter.use_language.USE.ExpCS");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getIfExpCSAccess().getOwnedConditionPatternExpCSParserRuleCall_1_0_1());
					}
					lv_ownedCondition_1_2=rulePatternExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfExpCSRule());
						}
						set(
							$current,
							"ownedCondition",
							lv_ownedCondition_1_2,
							"modelConverter.use_language.USE.PatternExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfExpCSAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpCSAccess().getOwnedThenExpressionExpCSParserRuleCall_3_0());
				}
				lv_ownedThenExpression_3_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpCSRule());
					}
					set(
						$current,
						"ownedThenExpression",
						lv_ownedThenExpression_3_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpCSAccess().getOwnedIfThenExpressionsElseIfThenExpCSParserRuleCall_4_0());
				}
				lv_ownedIfThenExpressions_4_0=ruleElseIfThenExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpCSRule());
					}
					add(
						$current,
						"ownedIfThenExpressions",
						lv_ownedIfThenExpressions_4_0,
						"modelConverter.use_language.USE.ElseIfThenExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='else'
		{
			newLeafNode(otherlv_5, grammarAccess.getIfExpCSAccess().getElseKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpCSAccess().getOwnedElseExpressionExpCSParserRuleCall_6_0());
				}
				lv_ownedElseExpression_6_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpCSRule());
					}
					set(
						$current,
						"ownedElseExpression",
						lv_ownedElseExpression_6_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='endif'
		{
			newLeafNode(otherlv_7, grammarAccess.getIfExpCSAccess().getEndifKeyword_7());
		}
	)
;

// Entry rule entryRuleElseIfThenExpCS
entryRuleElseIfThenExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElseIfThenExpCSRule()); }
	iv_ruleElseIfThenExpCS=ruleElseIfThenExpCS
	{ $current=$iv_ruleElseIfThenExpCS.current; }
	EOF;

// Rule ElseIfThenExpCS
ruleElseIfThenExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='elseif'
		{
			newLeafNode(otherlv_0, grammarAccess.getElseIfThenExpCSAccess().getElseifKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseIfThenExpCSAccess().getOwnedConditionExpCSParserRuleCall_1_0());
				}
				lv_ownedCondition_1_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseIfThenExpCSRule());
					}
					set(
						$current,
						"ownedCondition",
						lv_ownedCondition_1_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getElseIfThenExpCSAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseIfThenExpCSAccess().getOwnedThenExpressionExpCSParserRuleCall_3_0());
				}
				lv_ownedThenExpression_3_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseIfThenExpCSRule());
					}
					set(
						$current,
						"ownedThenExpression",
						lv_ownedThenExpression_3_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLetExpCS
entryRuleLetExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLetExpCSRule()); }
	iv_ruleLetExpCS=ruleLetExpCS
	{ $current=$iv_ruleLetExpCS.current; }
	EOF;

// Rule LetExpCS
ruleLetExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='let'
		{
			newLeafNode(otherlv_0, grammarAccess.getLetExpCSAccess().getLetKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLetExpCSAccess().getOwnedVariablesLetVariableCSParserRuleCall_1_0());
				}
				lv_ownedVariables_1_0=ruleLetVariableCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetExpCSRule());
					}
					add(
						$current,
						"ownedVariables",
						lv_ownedVariables_1_0,
						"modelConverter.use_language.USE.LetVariableCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getLetExpCSAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLetExpCSAccess().getOwnedVariablesLetVariableCSParserRuleCall_2_1_0());
					}
					lv_ownedVariables_3_0=ruleLetVariableCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLetExpCSRule());
						}
						add(
							$current,
							"ownedVariables",
							lv_ownedVariables_3_0,
							"modelConverter.use_language.USE.LetVariableCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='in'
		{
			newLeafNode(otherlv_4, grammarAccess.getLetExpCSAccess().getInKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLetExpCSAccess().getOwnedInExpressionExpCSParserRuleCall_4_0());
				}
				lv_ownedInExpression_5_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetExpCSRule());
					}
					set(
						$current,
						"ownedInExpression",
						lv_ownedInExpression_5_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLetVariableCS
entryRuleLetVariableCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLetVariableCSRule()); }
	iv_ruleLetVariableCS=ruleLetVariableCS
	{ $current=$iv_ruleLetVariableCS.current; }
	EOF;

// Rule LetVariableCS
ruleLetVariableCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLetVariableCSAccess().getNameUnrestrictedNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleUnrestrictedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetVariableCSRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"modelConverter.use_language.USE.UnrestrictedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLetVariableCSAccess().getOwnedRoundBracketedClauseRoundBracketedClauseCSParserRuleCall_1_0());
				}
				lv_ownedRoundBracketedClause_1_0=ruleRoundBracketedClauseCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetVariableCSRule());
					}
					set(
						$current,
						"ownedRoundBracketedClause",
						lv_ownedRoundBracketedClause_1_0,
						"modelConverter.use_language.USE.RoundBracketedClauseCS");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getLetVariableCSAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLetVariableCSAccess().getOwnedTypeTypeExpCSParserRuleCall_2_1_0());
					}
					lv_ownedType_3_0=ruleTypeExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLetVariableCSRule());
						}
						set(
							$current,
							"ownedType",
							lv_ownedType_3_0,
							"modelConverter.use_language.USE.TypeExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='='
		{
			newLeafNode(otherlv_4, grammarAccess.getLetVariableCSAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLetVariableCSAccess().getOwnedInitExpressionExpCSParserRuleCall_4_0());
				}
				lv_ownedInitExpression_5_0=ruleExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetVariableCSRule());
					}
					set(
						$current,
						"ownedInitExpression",
						lv_ownedInitExpression_5_0,
						"modelConverter.use_language.USE.ExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRoundBracketedClauseCS
entryRuleRoundBracketedClauseCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoundBracketedClauseCSRule()); }
	iv_ruleRoundBracketedClauseCS=ruleRoundBracketedClauseCS
	{ $current=$iv_ruleRoundBracketedClauseCS.current; }
	EOF;

// Rule RoundBracketedClauseCS
ruleRoundBracketedClauseCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getRoundBracketedClauseCSAccess().getRoundBracketedClauseCSAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRoundBracketedClauseCSAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRoundBracketedClauseCSAccess().getOwnedArgumentsNavigatingArgCSParserRuleCall_2_0_0());
					}
					lv_ownedArguments_2_0=ruleNavigatingArgCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRoundBracketedClauseCSRule());
						}
						add(
							$current,
							"ownedArguments",
							lv_ownedArguments_2_0,
							"modelConverter.use_language.USE.NavigatingArgCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRoundBracketedClauseCSAccess().getOwnedArgumentsNavigatingCommaArgCSParserRuleCall_2_1_0_0());
						}
						lv_ownedArguments_3_1=ruleNavigatingCommaArgCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRoundBracketedClauseCSRule());
							}
							add(
								$current,
								"ownedArguments",
								lv_ownedArguments_3_1,
								"modelConverter.use_language.USE.NavigatingCommaArgCS");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getRoundBracketedClauseCSAccess().getOwnedArgumentsNavigatingSemiArgCSParserRuleCall_2_1_0_1());
						}
						lv_ownedArguments_3_2=ruleNavigatingSemiArgCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRoundBracketedClauseCSRule());
							}
							add(
								$current,
								"ownedArguments",
								lv_ownedArguments_3_2,
								"modelConverter.use_language.USE.NavigatingSemiArgCS");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getRoundBracketedClauseCSAccess().getOwnedArgumentsNavigatingBarArgCSParserRuleCall_2_1_0_2());
						}
						lv_ownedArguments_3_3=ruleNavigatingBarArgCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRoundBracketedClauseCSRule());
							}
							add(
								$current,
								"ownedArguments",
								lv_ownedArguments_3_3,
								"modelConverter.use_language.USE.NavigatingBarArgCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getRoundBracketedClauseCSAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleNavigatingBarArgCS
entryRuleNavigatingBarArgCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNavigatingBarArgCSRule()); }
	iv_ruleNavigatingBarArgCS=ruleNavigatingBarArgCS
	{ $current=$iv_ruleNavigatingBarArgCS.current; }
	EOF;

// Rule NavigatingBarArgCS
ruleNavigatingBarArgCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_prefix_0_0='|'
				{
					newLeafNode(lv_prefix_0_0, grammarAccess.getNavigatingBarArgCSAccess().getPrefixVerticalLineKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNavigatingBarArgCSRule());
					}
					setWithLastConsumed($current, "prefix", lv_prefix_0_0, "|");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNavigatingBarArgCSAccess().getOwnedNameExpressionNavigatingArgExpCSParserRuleCall_1_0());
				}
				lv_ownedNameExpression_1_0=ruleNavigatingArgExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNavigatingBarArgCSRule());
					}
					set(
						$current,
						"ownedNameExpression",
						lv_ownedNameExpression_1_0,
						"modelConverter.use_language.USE.NavigatingArgExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_symbolT_2_0=':'
					{
						newLeafNode(lv_symbolT_2_0, grammarAccess.getNavigatingBarArgCSAccess().getSymbolTColonKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNavigatingBarArgCSRule());
						}
						setWithLastConsumed($current, "symbolT", lv_symbolT_2_0, ":");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNavigatingBarArgCSAccess().getOwnedTypeTypeExpCSParserRuleCall_2_1_0());
					}
					lv_ownedType_3_0=ruleTypeExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNavigatingBarArgCSRule());
						}
						set(
							$current,
							"ownedType",
							lv_ownedType_3_0,
							"modelConverter.use_language.USE.TypeExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						lv_symbolIE_4_0='='
						{
							newLeafNode(lv_symbolIE_4_0, grammarAccess.getNavigatingBarArgCSAccess().getSymbolIEEqualsSignKeyword_2_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getNavigatingBarArgCSRule());
							}
							setWithLastConsumed($current, "symbolIE", lv_symbolIE_4_0, "=");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getNavigatingBarArgCSAccess().getOwnedInitExpressionExpCSParserRuleCall_2_2_1_0());
						}
						lv_ownedInitExpression_5_0=ruleExpCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNavigatingBarArgCSRule());
							}
							set(
								$current,
								"ownedInitExpression",
								lv_ownedInitExpression_5_0,
								"modelConverter.use_language.USE.ExpCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)?
	)
;

// Entry rule entryRuleNavigatingCommaArgCS
entryRuleNavigatingCommaArgCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNavigatingCommaArgCSRule()); }
	iv_ruleNavigatingCommaArgCS=ruleNavigatingCommaArgCS
	{ $current=$iv_ruleNavigatingCommaArgCS.current; }
	EOF;

// Rule NavigatingCommaArgCS
ruleNavigatingCommaArgCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_prefix_0_0=','
				{
					newLeafNode(lv_prefix_0_0, grammarAccess.getNavigatingCommaArgCSAccess().getPrefixCommaKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNavigatingCommaArgCSRule());
					}
					setWithLastConsumed($current, "prefix", lv_prefix_0_0, ",");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNavigatingCommaArgCSAccess().getOwnedNameExpressionNavigatingArgExpCSParserRuleCall_1_0());
				}
				lv_ownedNameExpression_1_0=ruleNavigatingArgExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNavigatingCommaArgCSRule());
					}
					set(
						$current,
						"ownedNameExpression",
						lv_ownedNameExpression_1_0,
						"modelConverter.use_language.USE.NavigatingArgExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_symbolCI_2_0='<-'
						{
							newLeafNode(lv_symbolCI_2_0, grammarAccess.getNavigatingCommaArgCSAccess().getSymbolCILessThanSignHyphenMinusKeyword_2_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getNavigatingCommaArgCSRule());
							}
							setWithLastConsumed($current, "symbolCI", lv_symbolCI_2_0, "<-");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getNavigatingCommaArgCSAccess().getOwnedCoIteratorCoIteratorVariableCSParserRuleCall_2_0_1_0());
						}
						lv_ownedCoIterator_3_0=ruleCoIteratorVariableCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNavigatingCommaArgCSRule());
							}
							set(
								$current,
								"ownedCoIterator",
								lv_ownedCoIterator_3_0,
								"modelConverter.use_language.USE.CoIteratorVariableCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						(
							lv_symbolIE_4_0='='
							{
								newLeafNode(lv_symbolIE_4_0, grammarAccess.getNavigatingCommaArgCSAccess().getSymbolIEEqualsSignKeyword_2_0_2_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getNavigatingCommaArgCSRule());
								}
								setWithLastConsumed($current, "symbolIE", lv_symbolIE_4_0, "=");
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getNavigatingCommaArgCSAccess().getOwnedInitExpressionExpCSParserRuleCall_2_0_2_1_0());
							}
							lv_ownedInitExpression_5_0=ruleExpCS
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getNavigatingCommaArgCSRule());
								}
								set(
									$current,
									"ownedInitExpression",
									lv_ownedInitExpression_5_0,
									"modelConverter.use_language.USE.ExpCS");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)
			    |
			(
				(
					(
						lv_symbolT_6_0=':'
						{
							newLeafNode(lv_symbolT_6_0, grammarAccess.getNavigatingCommaArgCSAccess().getSymbolTColonKeyword_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getNavigatingCommaArgCSRule());
							}
							setWithLastConsumed($current, "symbolT", lv_symbolT_6_0, ":");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getNavigatingCommaArgCSAccess().getOwnedTypeTypeExpCSParserRuleCall_2_1_1_0());
						}
						lv_ownedType_7_0=ruleTypeExpCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNavigatingCommaArgCSRule());
							}
							set(
								$current,
								"ownedType",
								lv_ownedType_7_0,
								"modelConverter.use_language.USE.TypeExpCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						(
							lv_symbolCI_8_0='<-'
							{
								newLeafNode(lv_symbolCI_8_0, grammarAccess.getNavigatingCommaArgCSAccess().getSymbolCILessThanSignHyphenMinusKeyword_2_1_2_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getNavigatingCommaArgCSRule());
								}
								setWithLastConsumed($current, "symbolCI", lv_symbolCI_8_0, "<-");
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getNavigatingCommaArgCSAccess().getOwnedCoIteratorCoIteratorVariableCSParserRuleCall_2_1_2_1_0());
							}
							lv_ownedCoIterator_9_0=ruleCoIteratorVariableCS
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getNavigatingCommaArgCSRule());
								}
								set(
									$current,
									"ownedCoIterator",
									lv_ownedCoIterator_9_0,
									"modelConverter.use_language.USE.CoIteratorVariableCS");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
				(
					(
						(
							lv_symbolIE_10_0='='
							{
								newLeafNode(lv_symbolIE_10_0, grammarAccess.getNavigatingCommaArgCSAccess().getSymbolIEEqualsSignKeyword_2_1_3_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getNavigatingCommaArgCSRule());
								}
								setWithLastConsumed($current, "symbolIE", lv_symbolIE_10_0, "=");
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getNavigatingCommaArgCSAccess().getOwnedInitExpressionExpCSParserRuleCall_2_1_3_1_0());
							}
							lv_ownedInitExpression_11_0=ruleExpCS
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getNavigatingCommaArgCSRule());
								}
								set(
									$current,
									"ownedInitExpression",
									lv_ownedInitExpression_11_0,
									"modelConverter.use_language.USE.ExpCS");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)
			    |
			(
				(
					(
						(
							lv_symbolT_12_0=':'
							{
								newLeafNode(lv_symbolT_12_0, grammarAccess.getNavigatingCommaArgCSAccess().getSymbolTColonKeyword_2_2_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getNavigatingCommaArgCSRule());
								}
								setWithLastConsumed($current, "symbolT", lv_symbolT_12_0, ":");
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getNavigatingCommaArgCSAccess().getOwnedTypeTypeExpCSParserRuleCall_2_2_0_1_0());
							}
							lv_ownedType_13_0=ruleTypeExpCS
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getNavigatingCommaArgCSRule());
								}
								set(
									$current,
									"ownedType",
									lv_ownedType_13_0,
									"modelConverter.use_language.USE.TypeExpCS");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
				(
					(
						(
							lv_symbolCI_14_0='<-'
							{
								newLeafNode(lv_symbolCI_14_0, grammarAccess.getNavigatingCommaArgCSAccess().getSymbolCILessThanSignHyphenMinusKeyword_2_2_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getNavigatingCommaArgCSRule());
								}
								setWithLastConsumed($current, "symbolCI", lv_symbolCI_14_0, "<-");
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getNavigatingCommaArgCSAccess().getOwnedCoIteratorCoIteratorVariableCSParserRuleCall_2_2_1_1_0());
							}
							lv_ownedCoIterator_15_0=ruleCoIteratorVariableCS
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getNavigatingCommaArgCSRule());
								}
								set(
									$current,
									"ownedCoIterator",
									lv_ownedCoIterator_15_0,
									"modelConverter.use_language.USE.CoIteratorVariableCS");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
				(
					(
						lv_symbolIE_16_0='in'
						{
							newLeafNode(lv_symbolIE_16_0, grammarAccess.getNavigatingCommaArgCSAccess().getSymbolIEInKeyword_2_2_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getNavigatingCommaArgCSRule());
							}
							setWithLastConsumed($current, "symbolIE", lv_symbolIE_16_0, "in");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getNavigatingCommaArgCSAccess().getOwnedInitExpressionExpCSParserRuleCall_2_2_3_0());
						}
						lv_ownedInitExpression_17_0=ruleExpCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNavigatingCommaArgCSRule());
							}
							set(
								$current,
								"ownedInitExpression",
								lv_ownedInitExpression_17_0,
								"modelConverter.use_language.USE.ExpCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleNavigatingSemiArgCS
entryRuleNavigatingSemiArgCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNavigatingSemiArgCSRule()); }
	iv_ruleNavigatingSemiArgCS=ruleNavigatingSemiArgCS
	{ $current=$iv_ruleNavigatingSemiArgCS.current; }
	EOF;

// Rule NavigatingSemiArgCS
ruleNavigatingSemiArgCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_prefix_0_0=';'
				{
					newLeafNode(lv_prefix_0_0, grammarAccess.getNavigatingSemiArgCSAccess().getPrefixSemicolonKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNavigatingSemiArgCSRule());
					}
					setWithLastConsumed($current, "prefix", lv_prefix_0_0, ";");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNavigatingSemiArgCSAccess().getOwnedNameExpressionNavigatingArgExpCSParserRuleCall_1_0());
				}
				lv_ownedNameExpression_1_0=ruleNavigatingArgExpCS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNavigatingSemiArgCSRule());
					}
					set(
						$current,
						"ownedNameExpression",
						lv_ownedNameExpression_1_0,
						"modelConverter.use_language.USE.NavigatingArgExpCS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_symbolT_2_0=':'
					{
						newLeafNode(lv_symbolT_2_0, grammarAccess.getNavigatingSemiArgCSAccess().getSymbolTColonKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNavigatingSemiArgCSRule());
						}
						setWithLastConsumed($current, "symbolT", lv_symbolT_2_0, ":");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNavigatingSemiArgCSAccess().getOwnedTypeTypeExpCSParserRuleCall_2_1_0());
					}
					lv_ownedType_3_0=ruleTypeExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNavigatingSemiArgCSRule());
						}
						set(
							$current,
							"ownedType",
							lv_ownedType_3_0,
							"modelConverter.use_language.USE.TypeExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						lv_symbolIE_4_0='='
						{
							newLeafNode(lv_symbolIE_4_0, grammarAccess.getNavigatingSemiArgCSAccess().getSymbolIEEqualsSignKeyword_2_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getNavigatingSemiArgCSRule());
							}
							setWithLastConsumed($current, "symbolIE", lv_symbolIE_4_0, "=");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getNavigatingSemiArgCSAccess().getOwnedInitExpressionExpCSParserRuleCall_2_2_1_0());
						}
						lv_ownedInitExpression_5_0=ruleExpCS
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNavigatingSemiArgCSRule());
							}
							set(
								$current,
								"ownedInitExpression",
								lv_ownedInitExpression_5_0,
								"modelConverter.use_language.USE.ExpCS");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)?
	)
;

// Entry rule entryRuleNavigatingArgCS
entryRuleNavigatingArgCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNavigatingArgCSRule()); }
	iv_ruleNavigatingArgCS=ruleNavigatingArgCS
	{ $current=$iv_ruleNavigatingArgCS.current; }
	EOF;

// Rule NavigatingArgCS
ruleNavigatingArgCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNavigatingArgCSAccess().getOwnedNameExpressionNavigatingArgExpCSParserRuleCall_0_0_0());
					}
					lv_ownedNameExpression_0_0=ruleNavigatingArgExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNavigatingArgCSRule());
						}
						set(
							$current,
							"ownedNameExpression",
							lv_ownedNameExpression_0_0,
							"modelConverter.use_language.USE.NavigatingArgExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						(
							lv_symbolCI_1_0='<-'
							{
								newLeafNode(lv_symbolCI_1_0, grammarAccess.getNavigatingArgCSAccess().getSymbolCILessThanSignHyphenMinusKeyword_0_1_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getNavigatingArgCSRule());
								}
								setWithLastConsumed($current, "symbolCI", lv_symbolCI_1_0, "<-");
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getNavigatingArgCSAccess().getOwnedCoIteratorCoIteratorVariableCSParserRuleCall_0_1_0_1_0());
							}
							lv_ownedCoIterator_2_0=ruleCoIteratorVariableCS
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getNavigatingArgCSRule());
								}
								set(
									$current,
									"ownedCoIterator",
									lv_ownedCoIterator_2_0,
									"modelConverter.use_language.USE.CoIteratorVariableCS");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						(
							(
								lv_symbolIE_3_0='='
								{
									newLeafNode(lv_symbolIE_3_0, grammarAccess.getNavigatingArgCSAccess().getSymbolIEEqualsSignKeyword_0_1_0_2_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getNavigatingArgCSRule());
									}
									setWithLastConsumed($current, "symbolIE", lv_symbolIE_3_0, "=");
								}
							)
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getNavigatingArgCSAccess().getOwnedInitExpressionExpCSParserRuleCall_0_1_0_2_1_0());
								}
								lv_ownedInitExpression_4_0=ruleExpCS
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getNavigatingArgCSRule());
									}
									set(
										$current,
										"ownedInitExpression",
										lv_ownedInitExpression_4_0,
										"modelConverter.use_language.USE.ExpCS");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)?
				)
				    |
				(
					(
						(
							lv_symbolT_5_0=':'
							{
								newLeafNode(lv_symbolT_5_0, grammarAccess.getNavigatingArgCSAccess().getSymbolTColonKeyword_0_1_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getNavigatingArgCSRule());
								}
								setWithLastConsumed($current, "symbolT", lv_symbolT_5_0, ":");
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getNavigatingArgCSAccess().getOwnedTypeTypeExpCSParserRuleCall_0_1_1_1_0());
							}
							lv_ownedType_6_0=ruleTypeExpCS
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getNavigatingArgCSRule());
								}
								set(
									$current,
									"ownedType",
									lv_ownedType_6_0,
									"modelConverter.use_language.USE.TypeExpCS");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						(
							(
								lv_symbolCI_7_0='<-'
								{
									newLeafNode(lv_symbolCI_7_0, grammarAccess.getNavigatingArgCSAccess().getSymbolCILessThanSignHyphenMinusKeyword_0_1_1_2_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getNavigatingArgCSRule());
									}
									setWithLastConsumed($current, "symbolCI", lv_symbolCI_7_0, "<-");
								}
							)
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getNavigatingArgCSAccess().getOwnedCoIteratorCoIteratorVariableCSParserRuleCall_0_1_1_2_1_0());
								}
								lv_ownedCoIterator_8_0=ruleCoIteratorVariableCS
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getNavigatingArgCSRule());
									}
									set(
										$current,
										"ownedCoIterator",
										lv_ownedCoIterator_8_0,
										"modelConverter.use_language.USE.CoIteratorVariableCS");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)?
					(
						(
							(
								lv_symbolIE_9_0='='
								{
									newLeafNode(lv_symbolIE_9_0, grammarAccess.getNavigatingArgCSAccess().getSymbolIEEqualsSignKeyword_0_1_1_3_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getNavigatingArgCSRule());
									}
									setWithLastConsumed($current, "symbolIE", lv_symbolIE_9_0, "=");
								}
							)
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getNavigatingArgCSAccess().getOwnedInitExpressionExpCSParserRuleCall_0_1_1_3_1_0());
								}
								lv_ownedInitExpression_10_0=ruleExpCS
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getNavigatingArgCSRule());
									}
									set(
										$current,
										"ownedInitExpression",
										lv_ownedInitExpression_10_0,
										"modelConverter.use_language.USE.ExpCS");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)?
				)
				    |
				(
					(
						(
							(
								lv_symbolT_11_0=':'
								{
									newLeafNode(lv_symbolT_11_0, grammarAccess.getNavigatingArgCSAccess().getSymbolTColonKeyword_0_1_2_0_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getNavigatingArgCSRule());
									}
									setWithLastConsumed($current, "symbolT", lv_symbolT_11_0, ":");
								}
							)
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getNavigatingArgCSAccess().getOwnedTypeTypeExpCSParserRuleCall_0_1_2_0_1_0());
								}
								lv_ownedType_12_0=ruleTypeExpCS
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getNavigatingArgCSRule());
									}
									set(
										$current,
										"ownedType",
										lv_ownedType_12_0,
										"modelConverter.use_language.USE.TypeExpCS");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)?
					(
						(
							(
								lv_symbolCI_13_0='<-'
								{
									newLeafNode(lv_symbolCI_13_0, grammarAccess.getNavigatingArgCSAccess().getSymbolCILessThanSignHyphenMinusKeyword_0_1_2_1_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getNavigatingArgCSRule());
									}
									setWithLastConsumed($current, "symbolCI", lv_symbolCI_13_0, "<-");
								}
							)
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getNavigatingArgCSAccess().getOwnedCoIteratorCoIteratorVariableCSParserRuleCall_0_1_2_1_1_0());
								}
								lv_ownedCoIterator_14_0=ruleCoIteratorVariableCS
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getNavigatingArgCSRule());
									}
									set(
										$current,
										"ownedCoIterator",
										lv_ownedCoIterator_14_0,
										"modelConverter.use_language.USE.CoIteratorVariableCS");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)?
					(
						(
							lv_symbolIE_15_0='in'
							{
								newLeafNode(lv_symbolIE_15_0, grammarAccess.getNavigatingArgCSAccess().getSymbolIEInKeyword_0_1_2_2_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getNavigatingArgCSRule());
								}
								setWithLastConsumed($current, "symbolIE", lv_symbolIE_15_0, "in");
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getNavigatingArgCSAccess().getOwnedInitExpressionExpCSParserRuleCall_0_1_2_3_0());
							}
							lv_ownedInitExpression_16_0=ruleExpCS
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getNavigatingArgCSRule());
								}
								set(
									$current,
									"ownedInitExpression",
									lv_ownedInitExpression_16_0,
									"modelConverter.use_language.USE.ExpCS");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)?
		)
		    |
		(
			(
				(
					lv_symbolT_17_0=':'
					{
						newLeafNode(lv_symbolT_17_0, grammarAccess.getNavigatingArgCSAccess().getSymbolTColonKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNavigatingArgCSRule());
						}
						setWithLastConsumed($current, "symbolT", lv_symbolT_17_0, ":");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNavigatingArgCSAccess().getOwnedTypeTypeExpCSParserRuleCall_1_1_0());
					}
					lv_ownedType_18_0=ruleTypeExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNavigatingArgCSRule());
						}
						set(
							$current,
							"ownedType",
							lv_ownedType_18_0,
							"modelConverter.use_language.USE.TypeExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleNavigatingArgExpCS
entryRuleNavigatingArgExpCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNavigatingArgExpCSRule()); }
	iv_ruleNavigatingArgExpCS=ruleNavigatingArgExpCS
	{ $current=$iv_ruleNavigatingArgExpCS.current; }
	EOF;

// Rule NavigatingArgExpCS
ruleNavigatingArgExpCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getNavigatingArgExpCSAccess().getExpCSParserRuleCall());
	}
	this_ExpCS_0=ruleExpCS
	{
		$current = $this_ExpCS_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleCoIteratorVariableCS
entryRuleCoIteratorVariableCS returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCoIteratorVariableCSRule()); }
	iv_ruleCoIteratorVariableCS=ruleCoIteratorVariableCS
	{ $current=$iv_ruleCoIteratorVariableCS.current; }
	EOF;

// Rule CoIteratorVariableCS
ruleCoIteratorVariableCS returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCoIteratorVariableCSAccess().getNameUnrestrictedNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleUnrestrictedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCoIteratorVariableCSRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"modelConverter.use_language.USE.UnrestrictedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getCoIteratorVariableCSAccess().getColonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCoIteratorVariableCSAccess().getOwnedTypeTypeExpCSParserRuleCall_1_1_0());
					}
					lv_ownedType_2_0=ruleTypeExpCS
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCoIteratorVariableCSRule());
						}
						set(
							$current,
							"ownedType",
							lv_ownedType_2_0,
							"modelConverter.use_language.USE.TypeExpCS");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
