/**
 * generated by Xtext 2.25.0
 */
package modelConverter.use_language.use.impl;

import java.util.Collection;

import modelConverter.use_language.use.AssociationClass;
import modelConverter.use_language.use.AssociationEnd;
import modelConverter.use_language.use.AttributesBase;
import modelConverter.use_language.use.ConstraintsBase;
import modelConverter.use_language.use.Generalization;
import modelConverter.use_language.use.OperationsBase;
import modelConverter.use_language.use.UsePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Association Class</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link modelConverter.use_language.use.impl.AssociationClassImpl#isAbstract <em>Abstract</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.AssociationClassImpl#getGeneralization <em>Generalization</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.AssociationClassImpl#getAssociationEnds <em>Association Ends</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.AssociationClassImpl#getAttributes <em>Attributes</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.AssociationClassImpl#getOperations <em>Operations</em>}</li>
 *   <li>{@link modelConverter.use_language.use.impl.AssociationClassImpl#getConstraints <em>Constraints</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssociationClassImpl extends TypeImpl implements AssociationClass
{
  /**
   * The default value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected static final boolean ABSTRACT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected boolean abstract_ = ABSTRACT_EDEFAULT;

  /**
   * The cached value of the '{@link #getGeneralization() <em>Generalization</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGeneralization()
   * @generated
   * @ordered
   */
  protected EList<Generalization> generalization;

  /**
   * The cached value of the '{@link #getAssociationEnds() <em>Association Ends</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssociationEnds()
   * @generated
   * @ordered
   */
  protected EList<AssociationEnd> associationEnds;

  /**
   * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributes()
   * @generated
   * @ordered
   */
  protected AttributesBase attributes;

  /**
   * The cached value of the '{@link #getOperations() <em>Operations</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperations()
   * @generated
   * @ordered
   */
  protected OperationsBase operations;

  /**
   * The cached value of the '{@link #getConstraints() <em>Constraints</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraints()
   * @generated
   * @ordered
   */
  protected ConstraintsBase constraints;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssociationClassImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UsePackage.Literals.ASSOCIATION_CLASS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAbstract()
  {
    return abstract_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAbstract(boolean newAbstract)
  {
    boolean oldAbstract = abstract_;
    abstract_ = newAbstract;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.ASSOCIATION_CLASS__ABSTRACT, oldAbstract, abstract_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Generalization> getGeneralization()
  {
    if (generalization == null)
    {
      generalization = new EObjectContainmentEList<Generalization>(Generalization.class, this, UsePackage.ASSOCIATION_CLASS__GENERALIZATION);
    }
    return generalization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AssociationEnd> getAssociationEnds()
  {
    if (associationEnds == null)
    {
      associationEnds = new EObjectContainmentEList<AssociationEnd>(AssociationEnd.class, this, UsePackage.ASSOCIATION_CLASS__ASSOCIATION_ENDS);
    }
    return associationEnds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributesBase getAttributes()
  {
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAttributes(AttributesBase newAttributes, NotificationChain msgs)
  {
    AttributesBase oldAttributes = attributes;
    attributes = newAttributes;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.ASSOCIATION_CLASS__ATTRIBUTES, oldAttributes, newAttributes);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAttributes(AttributesBase newAttributes)
  {
    if (newAttributes != attributes)
    {
      NotificationChain msgs = null;
      if (attributes != null)
        msgs = ((InternalEObject)attributes).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.ASSOCIATION_CLASS__ATTRIBUTES, null, msgs);
      if (newAttributes != null)
        msgs = ((InternalEObject)newAttributes).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.ASSOCIATION_CLASS__ATTRIBUTES, null, msgs);
      msgs = basicSetAttributes(newAttributes, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.ASSOCIATION_CLASS__ATTRIBUTES, newAttributes, newAttributes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationsBase getOperations()
  {
    return operations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOperations(OperationsBase newOperations, NotificationChain msgs)
  {
    OperationsBase oldOperations = operations;
    operations = newOperations;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.ASSOCIATION_CLASS__OPERATIONS, oldOperations, newOperations);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperations(OperationsBase newOperations)
  {
    if (newOperations != operations)
    {
      NotificationChain msgs = null;
      if (operations != null)
        msgs = ((InternalEObject)operations).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.ASSOCIATION_CLASS__OPERATIONS, null, msgs);
      if (newOperations != null)
        msgs = ((InternalEObject)newOperations).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.ASSOCIATION_CLASS__OPERATIONS, null, msgs);
      msgs = basicSetOperations(newOperations, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.ASSOCIATION_CLASS__OPERATIONS, newOperations, newOperations));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstraintsBase getConstraints()
  {
    return constraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstraints(ConstraintsBase newConstraints, NotificationChain msgs)
  {
    ConstraintsBase oldConstraints = constraints;
    constraints = newConstraints;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UsePackage.ASSOCIATION_CLASS__CONSTRAINTS, oldConstraints, newConstraints);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstraints(ConstraintsBase newConstraints)
  {
    if (newConstraints != constraints)
    {
      NotificationChain msgs = null;
      if (constraints != null)
        msgs = ((InternalEObject)constraints).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UsePackage.ASSOCIATION_CLASS__CONSTRAINTS, null, msgs);
      if (newConstraints != null)
        msgs = ((InternalEObject)newConstraints).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UsePackage.ASSOCIATION_CLASS__CONSTRAINTS, null, msgs);
      msgs = basicSetConstraints(newConstraints, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UsePackage.ASSOCIATION_CLASS__CONSTRAINTS, newConstraints, newConstraints));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UsePackage.ASSOCIATION_CLASS__GENERALIZATION:
        return ((InternalEList<?>)getGeneralization()).basicRemove(otherEnd, msgs);
      case UsePackage.ASSOCIATION_CLASS__ASSOCIATION_ENDS:
        return ((InternalEList<?>)getAssociationEnds()).basicRemove(otherEnd, msgs);
      case UsePackage.ASSOCIATION_CLASS__ATTRIBUTES:
        return basicSetAttributes(null, msgs);
      case UsePackage.ASSOCIATION_CLASS__OPERATIONS:
        return basicSetOperations(null, msgs);
      case UsePackage.ASSOCIATION_CLASS__CONSTRAINTS:
        return basicSetConstraints(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UsePackage.ASSOCIATION_CLASS__ABSTRACT:
        return isAbstract();
      case UsePackage.ASSOCIATION_CLASS__GENERALIZATION:
        return getGeneralization();
      case UsePackage.ASSOCIATION_CLASS__ASSOCIATION_ENDS:
        return getAssociationEnds();
      case UsePackage.ASSOCIATION_CLASS__ATTRIBUTES:
        return getAttributes();
      case UsePackage.ASSOCIATION_CLASS__OPERATIONS:
        return getOperations();
      case UsePackage.ASSOCIATION_CLASS__CONSTRAINTS:
        return getConstraints();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UsePackage.ASSOCIATION_CLASS__ABSTRACT:
        setAbstract((Boolean)newValue);
        return;
      case UsePackage.ASSOCIATION_CLASS__GENERALIZATION:
        getGeneralization().clear();
        getGeneralization().addAll((Collection<? extends Generalization>)newValue);
        return;
      case UsePackage.ASSOCIATION_CLASS__ASSOCIATION_ENDS:
        getAssociationEnds().clear();
        getAssociationEnds().addAll((Collection<? extends AssociationEnd>)newValue);
        return;
      case UsePackage.ASSOCIATION_CLASS__ATTRIBUTES:
        setAttributes((AttributesBase)newValue);
        return;
      case UsePackage.ASSOCIATION_CLASS__OPERATIONS:
        setOperations((OperationsBase)newValue);
        return;
      case UsePackage.ASSOCIATION_CLASS__CONSTRAINTS:
        setConstraints((ConstraintsBase)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.ASSOCIATION_CLASS__ABSTRACT:
        setAbstract(ABSTRACT_EDEFAULT);
        return;
      case UsePackage.ASSOCIATION_CLASS__GENERALIZATION:
        getGeneralization().clear();
        return;
      case UsePackage.ASSOCIATION_CLASS__ASSOCIATION_ENDS:
        getAssociationEnds().clear();
        return;
      case UsePackage.ASSOCIATION_CLASS__ATTRIBUTES:
        setAttributes((AttributesBase)null);
        return;
      case UsePackage.ASSOCIATION_CLASS__OPERATIONS:
        setOperations((OperationsBase)null);
        return;
      case UsePackage.ASSOCIATION_CLASS__CONSTRAINTS:
        setConstraints((ConstraintsBase)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UsePackage.ASSOCIATION_CLASS__ABSTRACT:
        return abstract_ != ABSTRACT_EDEFAULT;
      case UsePackage.ASSOCIATION_CLASS__GENERALIZATION:
        return generalization != null && !generalization.isEmpty();
      case UsePackage.ASSOCIATION_CLASS__ASSOCIATION_ENDS:
        return associationEnds != null && !associationEnds.isEmpty();
      case UsePackage.ASSOCIATION_CLASS__ATTRIBUTES:
        return attributes != null;
      case UsePackage.ASSOCIATION_CLASS__OPERATIONS:
        return operations != null;
      case UsePackage.ASSOCIATION_CLASS__CONSTRAINTS:
        return constraints != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (abstract: ");
    result.append(abstract_);
    result.append(')');
    return result.toString();
  }

} //AssociationClassImpl
